# Generated by Django 5.2.4 on 2025-07-21 13:30

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0005_submgrun_tax_ids'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='sitesettings',
            name='sequencing_data_path',
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='adapters',
            field=models.CharField(blank=True, help_text='Adapters p', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='altitude',
            field=models.CharField(blank=True, help_text='The altitu', max_length=120, validators=[django.core.validators.RegexValidator('((0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?)|((^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)|(^missing$))')]),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='broad_scale_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='collection_date',
            field=models.CharField(blank=True, help_text='The date t', max_length=120, validators=[django.core.validators.RegexValidator('(^[12][0-9]{3}(-(0[1-9]|1[0-2])(-(0[1-9]|[12][0-9]|3[01])(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?(/[0-9]{4}(-[0-9]{2}(-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?)?$)|(^not applicable$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)|(^missing$)')]),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='depth',
            field=models.CharField(blank=True, help_text='The vertic', max_length=120, validators=[django.core.validators.RegexValidator('((0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?)|((^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)|(^missing$))')]),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='elevation',
            field=models.CharField(blank=True, help_text='The elevat', max_length=120, validators=[django.core.validators.RegexValidator('([+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?)|((^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)|(^missing$))')]),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='environmental_medium',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='experimental_factor',
            field=models.CharField(blank=True, help_text='Experiment', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='geographic_location_country_and_or_sea',
            field=models.CharField(blank=True, choices=[('Afghanistan', 'Afghanistan'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Arctic Ocean', 'Arctic Ocean'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Ashmore and Cartier Islands', 'Ashmore and Cartier Islands'), ('Atlantic Ocean', 'Atlantic Ocean'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Baker Island', 'Baker Island'), ('Baltic Sea', 'Baltic Sea'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Bassas da India', 'Bassas da India'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia', 'Bolivia'), ('Borneo', 'Borneo'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Virgin Islands', 'British Virgin Islands'), ('Brunei', 'Brunei'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Canada', 'Canada'), ('Cape Verde', 'Cape Verde'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Clipperton Island', 'Clipperton Island'), ('Cocos Islands', 'Cocos Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Cook Islands', 'Cook Islands'), ('Coral Sea Islands', 'Coral Sea Islands'), ('Costa Rica', 'Costa Rica'), ("Cote d'Ivoire", "Cote d'Ivoire"), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Curacao', 'Curacao'), ('Cyprus', 'Cyprus'), ('Czechia', 'Czechia'), ('Democratic Republic of the Congo', 'Democratic Republic of the Congo'), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('East Timor', 'East Timor'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Ethiopia', 'Ethiopia'), ('Europa Island', 'Europa Island'), ('Falkland Islands (Islas Malvinas)', 'Falkland Islands (Islas Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern and Antarctic Lands', 'French Southern and Antarctic Lands'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Gaza Strip', 'Gaza Strip'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Glorioso Islands', 'Glorioso Islands'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and McDonald Islands', 'Heard Island and McDonald Islands'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Howland Island', 'Howland Island'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indian Ocean', 'Indian Ocean'), ('Indonesia', 'Indonesia'), ('Iran', 'Iran'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Jan Mayen', 'Jan Mayen'), ('Japan', 'Japan'), ('Jarvis Island', 'Jarvis Island'), ('Jersey', 'Jersey'), ('Johnston Atoll', 'Johnston Atoll'), ('Jordan', 'Jordan'), ('Juan de Nova Island', 'Juan de Nova Island'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kerguelen Archipelago', 'Kerguelen Archipelago'), ('Kingman Reef', 'Kingman Reef'), ('Kiribati', 'Kiribati'), ('Kosovo', 'Kosovo'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), ('Laos', 'Laos'), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macau', 'Macau'), ('Macedonia', 'Macedonia'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Mediterranean Sea', 'Mediterranean Sea'), ('Mexico', 'Mexico'), ('Micronesia', 'Micronesia'), ('Midway Islands', 'Midway Islands'), ('Moldova', 'Moldova'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Navassa Island', 'Navassa Island'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('North Korea', 'North Korea'), ('North Sea', 'North Sea'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pacific Ocean', 'Pacific Ocean'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palmyra Atoll', 'Palmyra Atoll'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paracel Islands', 'Paracel Islands'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn Islands', 'Pitcairn Islands'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Republic of the Congo', 'Republic of the Congo'), ('Reunion', 'Reunion'), ('Romania', 'Romania'), ('Ross Sea', 'Ross Sea'), ('Russia', 'Russia'), ('Rwanda', 'Rwanda'), ('Saint Helena', 'Saint Helena'), ('Saint Kitts and Nevis', 'Saint Kitts and Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Pierre and Miquelon', 'Saint Pierre and Miquelon'), ('Saint Vincent and the Grenadines', 'Saint Vincent and the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Sint Maarten', 'Sint Maarten'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia and the South Sandwich Islands', 'South Georgia and the South Sandwich Islands'), ('South Korea', 'South Korea'), ('Southern Ocean', 'Southern Ocean'), ('Spain', 'Spain'), ('Spratly Islands', 'Spratly Islands'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard', 'Svalbard'), ('Swaziland', 'Swaziland'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syria', 'Syria'), ('Taiwan', 'Taiwan'), ('Tajikistan', 'Tajikistan'), ('Tanzania', 'Tanzania'), ('Tasman Sea', 'Tasman Sea'), ('Thailand', 'Thailand'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad and Tobago', 'Trinidad and Tobago'), ('Tromelin Island', 'Tromelin Island'), ('Tunisia', 'Tunisia'), ('Turkey', 'Turkey'), ('Turkmenistan', 'Turkmenistan'), ('Turks and Caicos Islands', 'Turks and Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('USA', 'USA'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela', 'Venezuela'), ('Viet Nam', 'Viet Nam'), ('Virgin Islands', 'Virgin Islands'), ('Wake Island', 'Wake Island'), ('Wallis and Futuna', 'Wallis and Futuna'), ('West Bank', 'West Bank'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe'), ('missing', 'missing'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('restricted access', 'restricted access')], help_text='The geogra', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not applicable$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)|(^missing$)')]),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not applicable$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)|(^missing$)')]),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='isolation_source',
            field=models.CharField(blank=True, help_text='describes ', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='library_reads_sequenced',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='library_screening_strategy',
            field=models.CharField(blank=True, help_text='Specific e', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='library_size',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='library_vector',
            field=models.CharField(blank=True, help_text='Cloning ve', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='local_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='multiplex_identifiers',
            field=models.CharField(blank=True, help_text='Molecular ', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='nucleic_acid_amplification',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='nucleic_acid_extraction',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='project_name',
            field=models.CharField(blank=True, help_text='Name of th', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='reference_for_biomaterial',
            field=models.CharField(blank=True, help_text='Primary pu', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='relationship_to_oxygen',
            field=models.CharField(blank=True, choices=[('aerobe', 'aerobe'), ('anaerobe', 'anaerobe'), ('facultative', 'facultative'), ('microaerophilic', 'microaerophilic'), ('microanaerobe', 'microanaerobe'), ('obligate aerobe', 'obligate aerobe'), ('obligate anaerobe', 'obligate anaerobe')], help_text='Is this or', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='relevant_electronic_resources',
            field=models.CharField(blank=True, help_text='A related ', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='relevant_standard_operating_procedures',
            field=models.CharField(blank=True, help_text='Standard o', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='sample_collection_method',
            field=models.CharField(blank=True, help_text='The method', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='sample_material_processing',
            field=models.CharField(blank=True, help_text='A brief de', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome',
            name='source_material_identifiers',
            field=models.CharField(blank=True, help_text='A unique i', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome_unit',
            name='altitude',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome_unit',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, choices=[('L', 'L'), ('g', 'g'), ('kg', 'kg'), ('m2', 'm2'), ('m3', 'm3')], max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome_unit',
            name='depth',
            field=models.CharField(blank=True, choices=[('m', 'm'), ('mm', 'mm')], max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome_unit',
            name='elevation',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome_unit',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='ena_binned_metagenome_unit',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='ena_default_sample_checklist',
            name='collection_date',
            field=models.CharField(blank=True, help_text='The date t', max_length=120, validators=[django.core.validators.RegexValidator('(^[12][0-9]{3}(-(0[1-9]|1[0-2])(-(0[1-9]|[12][0-9]|3[01])(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?(/[0-9]{4}(-[0-9]{2}(-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?)?$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='ena_default_sample_checklist',
            name='geographic_location_country_and_or_sea',
            field=models.CharField(blank=True, choices=[('Afghanistan', 'Afghanistan'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Arctic Ocean', 'Arctic Ocean'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Ashmore and Cartier Islands', 'Ashmore and Cartier Islands'), ('Atlantic Ocean', 'Atlantic Ocean'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Baker Island', 'Baker Island'), ('Baltic Sea', 'Baltic Sea'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Bassas da India', 'Bassas da India'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia', 'Bolivia'), ('Borneo', 'Borneo'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Virgin Islands', 'British Virgin Islands'), ('Brunei', 'Brunei'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Canada', 'Canada'), ('Cape Verde', 'Cape Verde'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Clipperton Island', 'Clipperton Island'), ('Cocos Islands', 'Cocos Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Cook Islands', 'Cook Islands'), ('Coral Sea Islands', 'Coral Sea Islands'), ('Costa Rica', 'Costa Rica'), ("Cote d'Ivoire", "Cote d'Ivoire"), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Curacao', 'Curacao'), ('Cyprus', 'Cyprus'), ('Czech Republic', 'Czech Republic'), ('Democratic Republic of the Congo', 'Democratic Republic of the Congo'), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('East Timor', 'East Timor'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Ethiopia', 'Ethiopia'), ('Europa Island', 'Europa Island'), ('Falkland Islands (Islas Malvinas)', 'Falkland Islands (Islas Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern and Antarctic Lands', 'French Southern and Antarctic Lands'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Gaza Strip', 'Gaza Strip'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Glorioso Islands', 'Glorioso Islands'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and McDonald Islands', 'Heard Island and McDonald Islands'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Howland Island', 'Howland Island'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indian Ocean', 'Indian Ocean'), ('Indonesia', 'Indonesia'), ('Iran', 'Iran'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Jan Mayen', 'Jan Mayen'), ('Japan', 'Japan'), ('Jarvis Island', 'Jarvis Island'), ('Jersey', 'Jersey'), ('Johnston Atoll', 'Johnston Atoll'), ('Jordan', 'Jordan'), ('Juan de Nova Island', 'Juan de Nova Island'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kerguelen Archipelago', 'Kerguelen Archipelago'), ('Kingman Reef', 'Kingman Reef'), ('Kiribati', 'Kiribati'), ('Kosovo', 'Kosovo'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), ('Laos', 'Laos'), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macau', 'Macau'), ('Macedonia', 'Macedonia'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Mediterranean Sea', 'Mediterranean Sea'), ('Mexico', 'Mexico'), ('Micronesia', 'Micronesia'), ('Midway Islands', 'Midway Islands'), ('Moldova', 'Moldova'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Navassa Island', 'Navassa Island'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('North Korea', 'North Korea'), ('North Sea', 'North Sea'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pacific Ocean', 'Pacific Ocean'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palmyra Atoll', 'Palmyra Atoll'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paracel Islands', 'Paracel Islands'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn Islands', 'Pitcairn Islands'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Republic of the Congo', 'Republic of the Congo'), ('Reunion', 'Reunion'), ('Romania', 'Romania'), ('Ross Sea', 'Ross Sea'), ('Russia', 'Russia'), ('Rwanda', 'Rwanda'), ('Saint Helena', 'Saint Helena'), ('Saint Kitts and Nevis', 'Saint Kitts and Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Pierre and Miquelon', 'Saint Pierre and Miquelon'), ('Saint Vincent and the Grenadines', 'Saint Vincent and the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Sint Maarten', 'Sint Maarten'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia and the South Sandwich Islands', 'South Georgia and the South Sandwich Islands'), ('South Korea', 'South Korea'), ('Southern Ocean', 'Southern Ocean'), ('Spain', 'Spain'), ('Spratly Islands', 'Spratly Islands'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard', 'Svalbard'), ('Swaziland', 'Swaziland'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syria', 'Syria'), ('Taiwan', 'Taiwan'), ('Tajikistan', 'Tajikistan'), ('Tanzania', 'Tanzania'), ('Tasman Sea', 'Tasman Sea'), ('Thailand', 'Thailand'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad and Tobago', 'Trinidad and Tobago'), ('Tromelin Island', 'Tromelin Island'), ('Tunisia', 'Tunisia'), ('Turkey', 'Turkey'), ('Turkmenistan', 'Turkmenistan'), ('Turks and Caicos Islands', 'Turks and Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('USA', 'USA'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela', 'Venezuela'), ('Viet Nam', 'Viet Nam'), ('Virgin Islands', 'Virgin Islands'), ('Wake Island', 'Wake Island'), ('Wallis and Futuna', 'Wallis and Futuna'), ('West Bank', 'West Bank'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('restricted access', 'restricted access')], help_text='The locati', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_default_sample_checklist',
            name='geographic_location_region_and_locality',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120),
        ),
        migrations.AddField(
            model_name='ena_default_sample_checklist',
            name='host_scientific_name',
            field=models.CharField(blank=True, help_text='Scientific', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='MAG_coverage_software',
            field=models.CharField(blank=True, help_text='Tool(s) us', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='adapters',
            field=models.CharField(blank=True, help_text='Adapters p', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='altitude',
            field=models.CharField(blank=True, help_text='The altitu', max_length=120, validators=[django.core.validators.RegexValidator('((0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?)|((^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)|(^missing$))')]),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='annotation_source',
            field=models.CharField(blank=True, help_text='For cases ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='assembly_quality',
            field=models.CharField(blank=True, choices=[('Many fragments with little to no review of assembly other than reporting of standard assembly statistics', 'Many fragments with little to no review of assembly other than reporting of standard assembly statistics'), ('Multiple fragments where gaps span repetitive regions. Presence of the 23S, 16S, and 5S rRNA genes and at least 18 tRNAs', 'Multiple fragments where gaps span repetitive regions. Presence of the 23S, 16S, and 5S rRNA genes and at least 18 tRNAs'), ('Single contiguous sequence without gaps or ambiguities with a consensus error rate equivalent to Q50 or better', 'Single contiguous sequence without gaps or ambiguities with a consensus error rate equivalent to Q50 or better')], help_text='The assemb', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='assembly_software',
            field=models.CharField(blank=True, help_text='Tool(s) us', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='binning_parameters',
            field=models.CharField(blank=True, help_text='The parame', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='binning_software',
            field=models.CharField(blank=True, help_text='Tool(s) us', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='broad_scale_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='collection_date',
            field=models.CharField(blank=True, help_text='The date t', max_length=120, validators=[django.core.validators.RegexValidator('(^[12][0-9]{3}(-(0[1-9]|1[0-2])(-(0[1-9]|[12][0-9]|3[01])(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?(/[0-9]{4}(-[0-9]{2}(-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?)?$)|(^not applicable$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)|(^missing$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='completeness_approach',
            field=models.CharField(blank=True, help_text='The approa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='completeness_score',
            field=models.CharField(blank=True, help_text='Completene', max_length=120, validators=[django.core.validators.RegexValidator('^(\\d|[1-9]\\d|\\d\\.\\d{1,2}|[1-9]\\d\\.\\d{1,2}|100)$')]),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='completeness_software',
            field=models.CharField(blank=True, help_text='Tools used', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='contamination_score',
            field=models.CharField(blank=True, help_text='The contam', max_length=120, validators=[django.core.validators.RegexValidator('^(\\d|[1-9]\\d|\\d\\.\\d{1,2}|[1-9]\\d\\.\\d{1,2}|100)$')]),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='contamination_screening_input',
            field=models.CharField(blank=True, choices=[('contigs', 'contigs'), ('reads', 'reads')], help_text='The type o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='contamination_screening_parameters',
            field=models.CharField(blank=True, help_text='Specific p', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='decontamination_software',
            field=models.CharField(blank=True, help_text='Tool(s) us', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='depth',
            field=models.CharField(blank=True, help_text='The vertic', max_length=120, validators=[django.core.validators.RegexValidator('((0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?)|((^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)|(^missing$))')]),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='elevation',
            field=models.CharField(blank=True, help_text='The elevat', max_length=120, validators=[django.core.validators.RegexValidator('([+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?)|((^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)|(^missing$))')]),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='environmental_medium',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='experimental_factor',
            field=models.CharField(blank=True, help_text='Experiment', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='geographic_location_country_and_or_sea',
            field=models.CharField(blank=True, choices=[('Afghanistan', 'Afghanistan'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Arctic Ocean', 'Arctic Ocean'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Ashmore and Cartier Islands', 'Ashmore and Cartier Islands'), ('Atlantic Ocean', 'Atlantic Ocean'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Baker Island', 'Baker Island'), ('Baltic Sea', 'Baltic Sea'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Bassas da India', 'Bassas da India'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia', 'Bolivia'), ('Borneo', 'Borneo'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Virgin Islands', 'British Virgin Islands'), ('Brunei', 'Brunei'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Canada', 'Canada'), ('Cape Verde', 'Cape Verde'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Clipperton Island', 'Clipperton Island'), ('Cocos Islands', 'Cocos Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Cook Islands', 'Cook Islands'), ('Coral Sea Islands', 'Coral Sea Islands'), ('Costa Rica', 'Costa Rica'), ("Cote d'Ivoire", "Cote d'Ivoire"), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Curacao', 'Curacao'), ('Cyprus', 'Cyprus'), ('Czechia', 'Czechia'), ('Democratic Republic of the Congo', 'Democratic Republic of the Congo'), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('East Timor', 'East Timor'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Ethiopia', 'Ethiopia'), ('Europa Island', 'Europa Island'), ('Falkland Islands (Islas Malvinas)', 'Falkland Islands (Islas Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern and Antarctic Lands', 'French Southern and Antarctic Lands'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Gaza Strip', 'Gaza Strip'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Glorioso Islands', 'Glorioso Islands'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and McDonald Islands', 'Heard Island and McDonald Islands'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Howland Island', 'Howland Island'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indian Ocean', 'Indian Ocean'), ('Indonesia', 'Indonesia'), ('Iran', 'Iran'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Jan Mayen', 'Jan Mayen'), ('Japan', 'Japan'), ('Jarvis Island', 'Jarvis Island'), ('Jersey', 'Jersey'), ('Johnston Atoll', 'Johnston Atoll'), ('Jordan', 'Jordan'), ('Juan de Nova Island', 'Juan de Nova Island'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kerguelen Archipelago', 'Kerguelen Archipelago'), ('Kingman Reef', 'Kingman Reef'), ('Kiribati', 'Kiribati'), ('Kosovo', 'Kosovo'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), ('Laos', 'Laos'), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macau', 'Macau'), ('Macedonia', 'Macedonia'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Mediterranean Sea', 'Mediterranean Sea'), ('Mexico', 'Mexico'), ('Micronesia', 'Micronesia'), ('Midway Islands', 'Midway Islands'), ('Moldova', 'Moldova'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Navassa Island', 'Navassa Island'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('North Korea', 'North Korea'), ('North Sea', 'North Sea'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pacific Ocean', 'Pacific Ocean'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palmyra Atoll', 'Palmyra Atoll'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paracel Islands', 'Paracel Islands'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn Islands', 'Pitcairn Islands'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Republic of the Congo', 'Republic of the Congo'), ('Reunion', 'Reunion'), ('Romania', 'Romania'), ('Ross Sea', 'Ross Sea'), ('Russia', 'Russia'), ('Rwanda', 'Rwanda'), ('Saint Helena', 'Saint Helena'), ('Saint Kitts and Nevis', 'Saint Kitts and Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Pierre and Miquelon', 'Saint Pierre and Miquelon'), ('Saint Vincent and the Grenadines', 'Saint Vincent and the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Sint Maarten', 'Sint Maarten'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia and the South Sandwich Islands', 'South Georgia and the South Sandwich Islands'), ('South Korea', 'South Korea'), ('Southern Ocean', 'Southern Ocean'), ('Spain', 'Spain'), ('Spratly Islands', 'Spratly Islands'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard', 'Svalbard'), ('Swaziland', 'Swaziland'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syria', 'Syria'), ('Taiwan', 'Taiwan'), ('Tajikistan', 'Tajikistan'), ('Tanzania', 'Tanzania'), ('Tasman Sea', 'Tasman Sea'), ('Thailand', 'Thailand'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad and Tobago', 'Trinidad and Tobago'), ('Tromelin Island', 'Tromelin Island'), ('Tunisia', 'Tunisia'), ('Turkey', 'Turkey'), ('Turkmenistan', 'Turkmenistan'), ('Turks and Caicos Islands', 'Turks and Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('USA', 'USA'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela', 'Venezuela'), ('Viet Nam', 'Viet Nam'), ('Virgin Islands', 'Virgin Islands'), ('Wake Island', 'Wake Island'), ('Wallis and Futuna', 'Wallis and Futuna'), ('West Bank', 'West Bank'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe'), ('missing', 'missing'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('restricted access', 'restricted access')], help_text='The geogra', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not applicable$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)|(^missing$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not applicable$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)|(^missing$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='geographic_location_region_and_locality',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='isolation_source',
            field=models.CharField(blank=True, help_text='describes ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='library_reads_sequenced',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='library_screening_strategy',
            field=models.CharField(blank=True, help_text='Specific e', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='library_size',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='library_vector',
            field=models.CharField(blank=True, help_text='Cloning ve', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='local_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='metagenomic_source',
            field=models.CharField(blank=True, help_text='The metage', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='multiplex_identifiers',
            field=models.CharField(blank=True, help_text='Molecular ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='nucleic_acid_amplification',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='nucleic_acid_extraction',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='number_of_standard_tRNAs_extracted',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='project_name',
            field=models.CharField(blank=True, help_text='Name of th', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='reassembly_post_binning',
            field=models.CharField(blank=True, choices=[('No', 'No'), ('Yes', 'Yes')], help_text='Has an ass', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='reference_for_biomaterial',
            field=models.CharField(blank=True, help_text='Primary pu', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='relationship_to_oxygen',
            field=models.CharField(blank=True, choices=[('aerobe', 'aerobe'), ('anaerobe', 'anaerobe'), ('facultative', 'facultative'), ('microaerophilic', 'microaerophilic'), ('microanaerobe', 'microanaerobe'), ('obligate aerobe', 'obligate aerobe'), ('obligate anaerobe', 'obligate anaerobe')], help_text='Is this or', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='relevant_electronic_resources',
            field=models.CharField(blank=True, help_text='A related ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='relevant_standard_operating_procedures',
            field=models.CharField(blank=True, help_text='Standard o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='sample_collection_device',
            field=models.CharField(blank=True, help_text='The device', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='sample_collection_method',
            field=models.CharField(blank=True, help_text='The method', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='sample_derived_from',
            field=models.CharField(blank=True, help_text='Reference ', max_length=120, validators=[django.core.validators.RegexValidator('(^[ESD]R[SR]\\d{6,}(,[ESD]R[SR]\\d{6,})*$)|(^SAM[END][AG]?\\d+(,SAM[END][AG]?\\d+)*$)|(^EGA[NR]\\d{11}(,EGA[NR]\\d{11})*$)|(^[ESD]R[SR]\\d{6,}-[ESD]R[SR]\\d{6,}$)|(^SAM[END][AG]?\\d+-SAM[END][AG]?\\d+$)|(^EGA[NR]\\d{11}-EGA[NR]\\d{11}$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='sample_material_processing',
            field=models.CharField(blank=True, help_text='A brief de', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='sixteen_s_recovered',
            field=models.CharField(blank=True, choices=[('No', 'No'), ('Yes', 'Yes')], help_text='Can a 16S ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='sixteen_s_recovery_software',
            field=models.CharField(blank=True, help_text='Tools used', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='size_fraction_selected',
            field=models.CharField(blank=True, help_text='Filtering ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='source_material_identifiers',
            field=models.CharField(blank=True, help_text='A unique i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='tRNA_extraction_software',
            field=models.CharField(blank=True, help_text='Tools used', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='taxonomic_classification',
            field=models.CharField(blank=True, help_text='Method use', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags',
            name='taxonomic_identity_marker',
            field=models.CharField(blank=True, help_text='The phylog', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags_unit',
            name='altitude',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags_unit',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, choices=[('L', 'L'), ('g', 'g'), ('kg', 'kg'), ('m2', 'm2'), ('m3', 'm3')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags_unit',
            name='completeness_score',
            field=models.CharField(blank=True, choices=[('%', '%')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags_unit',
            name='contamination_score',
            field=models.CharField(blank=True, choices=[('%', '%')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags_unit',
            name='depth',
            field=models.CharField(blank=True, choices=[('m', 'm'), ('mm', 'mm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags_unit',
            name='elevation',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags_unit',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags_unit',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mimags_unit',
            name='reassembly_post_binning',
            field=models.CharField(blank=True, choices=[('No', 'No'), ('Yes', 'Yes')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='adapters',
            field=models.CharField(blank=True, help_text='Adapters p', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='altitude',
            field=models.CharField(blank=True, help_text='The altitu', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='annotation_source',
            field=models.CharField(blank=True, help_text='For cases ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='broad_scale_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='chemical_administration',
            field=models.CharField(blank=True, help_text='list of ch', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='chimera_check_software',
            field=models.CharField(blank=True, help_text='Tool(s) us', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='collection_date',
            field=models.CharField(blank=True, help_text='The date t', max_length=120, validators=[django.core.validators.RegexValidator('(^[12][0-9]{3}(-(0[1-9]|1[0-2])(-(0[1-9]|[12][0-9]|3[01])(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?(/[0-9]{4}(-[0-9]{2}(-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?)?$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='elevation',
            field=models.CharField(blank=True, help_text='The elevat', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='encoded_traits',
            field=models.CharField(blank=True, help_text='Should inc', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='environmental_medium',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='estimated_size',
            field=models.CharField(blank=True, help_text='The estima', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='experimental_factor',
            field=models.CharField(blank=True, help_text='Experiment', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='extrachromosomal_elements',
            field=models.CharField(blank=True, help_text='Do plasmid', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='geographic_location_country_and_or_sea',
            field=models.CharField(blank=True, choices=[('Afghanistan', 'Afghanistan'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Arctic Ocean', 'Arctic Ocean'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Ashmore and Cartier Islands', 'Ashmore and Cartier Islands'), ('Atlantic Ocean', 'Atlantic Ocean'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Baker Island', 'Baker Island'), ('Baltic Sea', 'Baltic Sea'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Bassas da India', 'Bassas da India'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia', 'Bolivia'), ('Borneo', 'Borneo'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Virgin Islands', 'British Virgin Islands'), ('Brunei', 'Brunei'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Canada', 'Canada'), ('Cape Verde', 'Cape Verde'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Clipperton Island', 'Clipperton Island'), ('Cocos Islands', 'Cocos Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Cook Islands', 'Cook Islands'), ('Coral Sea Islands', 'Coral Sea Islands'), ('Costa Rica', 'Costa Rica'), ("Cote d'Ivoire", "Cote d'Ivoire"), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Curacao', 'Curacao'), ('Cyprus', 'Cyprus'), ('Czech Republic', 'Czech Republic'), ('Democratic Republic of the Congo', 'Democratic Republic of the Congo'), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('East Timor', 'East Timor'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Ethiopia', 'Ethiopia'), ('Europa Island', 'Europa Island'), ('Falkland Islands (Islas Malvinas)', 'Falkland Islands (Islas Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern and Antarctic Lands', 'French Southern and Antarctic Lands'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Gaza Strip', 'Gaza Strip'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Glorioso Islands', 'Glorioso Islands'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and McDonald Islands', 'Heard Island and McDonald Islands'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Howland Island', 'Howland Island'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indian Ocean', 'Indian Ocean'), ('Indonesia', 'Indonesia'), ('Iran', 'Iran'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Jan Mayen', 'Jan Mayen'), ('Japan', 'Japan'), ('Jarvis Island', 'Jarvis Island'), ('Jersey', 'Jersey'), ('Johnston Atoll', 'Johnston Atoll'), ('Jordan', 'Jordan'), ('Juan de Nova Island', 'Juan de Nova Island'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kerguelen Archipelago', 'Kerguelen Archipelago'), ('Kingman Reef', 'Kingman Reef'), ('Kiribati', 'Kiribati'), ('Kosovo', 'Kosovo'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), ('Laos', 'Laos'), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macau', 'Macau'), ('Macedonia', 'Macedonia'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Mediterranean Sea', 'Mediterranean Sea'), ('Mexico', 'Mexico'), ('Micronesia', 'Micronesia'), ('Midway Islands', 'Midway Islands'), ('Moldova', 'Moldova'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Navassa Island', 'Navassa Island'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('North Korea', 'North Korea'), ('North Sea', 'North Sea'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pacific Ocean', 'Pacific Ocean'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palmyra Atoll', 'Palmyra Atoll'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paracel Islands', 'Paracel Islands'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn Islands', 'Pitcairn Islands'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Republic of the Congo', 'Republic of the Congo'), ('Reunion', 'Reunion'), ('Romania', 'Romania'), ('Ross Sea', 'Ross Sea'), ('Russia', 'Russia'), ('Rwanda', 'Rwanda'), ('Saint Helena', 'Saint Helena'), ('Saint Kitts and Nevis', 'Saint Kitts and Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Pierre and Miquelon', 'Saint Pierre and Miquelon'), ('Saint Vincent and the Grenadines', 'Saint Vincent and the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Sint Maarten', 'Sint Maarten'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia and the South Sandwich Islands', 'South Georgia and the South Sandwich Islands'), ('South Korea', 'South Korea'), ('Southern Ocean', 'Southern Ocean'), ('Spain', 'Spain'), ('Spratly Islands', 'Spratly Islands'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard', 'Svalbard'), ('Swaziland', 'Swaziland'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syria', 'Syria'), ('Taiwan', 'Taiwan'), ('Tajikistan', 'Tajikistan'), ('Tanzania', 'Tanzania'), ('Tasman Sea', 'Tasman Sea'), ('Thailand', 'Thailand'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad and Tobago', 'Trinidad and Tobago'), ('Tromelin Island', 'Tromelin Island'), ('Tunisia', 'Tunisia'), ('Turkey', 'Turkey'), ('Turkmenistan', 'Turkmenistan'), ('Turks and Caicos Islands', 'Turks and Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('USA', 'USA'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela', 'Venezuela'), ('Viet Nam', 'Viet Nam'), ('Virgin Islands', 'Virgin Islands'), ('Wake Island', 'Wake Island'), ('Wallis and Futuna', 'Wallis and Futuna'), ('West Bank', 'West Bank'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('restricted access', 'restricted access')], help_text='The locati', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='geographic_location_region_and_locality',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='host_disease_status',
            field=models.CharField(blank=True, help_text='list of di', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='host_scientific_name',
            field=models.CharField(blank=True, help_text='Scientific', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='isolation_and_growth_condition',
            field=models.CharField(blank=True, help_text='Publicatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='known_pathogenicity',
            field=models.CharField(blank=True, help_text='To what is', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='library_construction_method',
            field=models.CharField(blank=True, help_text='Library co', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='library_reads_sequenced',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='library_screening_strategy',
            field=models.CharField(blank=True, help_text='Specific e', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='library_size',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='library_vector',
            field=models.CharField(blank=True, help_text='Cloning ve', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='local_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='methane',
            field=models.CharField(blank=True, help_text='methane (g', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='multiplex_identifiers',
            field=models.CharField(blank=True, help_text='Molecular ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='negative_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='nucleic_acid_amplification',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='nucleic_acid_extraction',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='number_of_replicons',
            field=models.CharField(blank=True, help_text='Reports th', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='observed_biotic_relationship',
            field=models.CharField(blank=True, choices=[('commensal', 'commensal'), ('free living', 'free living'), ('mutualism', 'mutualism'), ('parasite', 'parasite'), ('symbiont', 'symbiont')], help_text='Is it free', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='organism_count',
            field=models.CharField(blank=True, help_text='Total cell', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='oxygenation_status_of_sample',
            field=models.CharField(blank=True, choices=[('aerobic', 'aerobic'), ('anaerobic', 'anaerobic')], help_text='oxygenatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='pcr_conditions',
            field=models.CharField(blank=True, help_text='Descriptio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='pcr_primers',
            field=models.CharField(blank=True, help_text='PCR primer', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='perturbation',
            field=models.CharField(blank=True, help_text='type of pe', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='ploidy',
            field=models.CharField(blank=True, help_text='The ploidy', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='positive_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='project_name',
            field=models.CharField(blank=True, help_text='Name of th', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='propagation',
            field=models.CharField(blank=True, help_text='The type o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='reference_for_biomaterial',
            field=models.CharField(blank=True, help_text='Primary pu', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='relationship_to_oxygen',
            field=models.CharField(blank=True, choices=[('aerobe', 'aerobe'), ('anaerobe', 'anaerobe'), ('facultative', 'facultative'), ('microaerophilic', 'microaerophilic'), ('microanaerobe', 'microanaerobe'), ('obligate aerobe', 'obligate aerobe'), ('obligate anaerobe', 'obligate anaerobe')], help_text='Is this or', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='relevant_electronic_resources',
            field=models.CharField(blank=True, help_text='A related ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='relevant_standard_operating_procedures',
            field=models.CharField(blank=True, help_text='Standard o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='salinity',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='sample_collection_device',
            field=models.CharField(blank=True, help_text='The device', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='sample_collection_method',
            field=models.CharField(blank=True, help_text='The method', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='sample_material_processing',
            field=models.CharField(blank=True, help_text='A brief de', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='sample_storage_duration',
            field=models.CharField(blank=True, help_text='duration f', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='sample_storage_location',
            field=models.CharField(blank=True, help_text='location a', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, help_text='Volume (ml', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='sequence_quality_check',
            field=models.CharField(blank=True, choices=[('manual', 'manual'), ('none', 'none'), ('software', 'software')], help_text='Indicate i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='sequencing_method',
            field=models.CharField(blank=True, help_text='Sequencing', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='source_material_identifiers',
            field=models.CharField(blank=True, help_text='A unique i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='subspecific_genetic_lineage',
            field=models.CharField(blank=True, help_text='Informatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='target_gene',
            field=models.CharField(blank=True, help_text='Targeted g', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='target_subfragment',
            field=models.CharField(blank=True, help_text='Name of su', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air',
            name='trophic_level',
            field=models.CharField(blank=True, choices=[('autotroph', 'autotroph'), ('carboxydotroph', 'carboxydotroph'), ('chemoautotroph', 'chemoautotroph'), ('chemoheterotroph', 'chemoheterotroph'), ('chemolithoautotroph', 'chemolithoautotroph'), ('chemolithotroph', 'chemolithotroph'), ('chemoorganoheterotroph', 'chemoorganoheterotroph'), ('chemoorganotroph', 'chemoorganotroph'), ('chemosynthetic', 'chemosynthetic'), ('chemotroph', 'chemotroph'), ('copiotroph', 'copiotroph'), ('diazotroph', 'diazotroph'), ('facultative autotroph', 'facultative autotroph'), ('heterotroph', 'heterotroph'), ('lithoautotroph', 'lithoautotroph'), ('lithoheterotroph', 'lithoheterotroph'), ('lithotroph', 'lithotroph'), ('methanotroph', 'methanotroph'), ('methylotroph', 'methylotroph'), ('mixotroph', 'mixotroph'), ('obligate chemoautolithotroph', 'obligate chemoautolithotroph'), ('oligotroph', 'oligotroph'), ('organoheterotroph', 'organoheterotroph'), ('organotroph', 'organotroph'), ('photoautotroph', 'photoautotroph'), ('photoheterotroph', 'photoheterotroph'), ('photolithoautotroph', 'photolithoautotroph'), ('photolithotroph', 'photolithotroph'), ('photosynthetic', 'photosynthetic'), ('phototroph', 'phototroph')], help_text='Trophic le', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air_unit',
            name='altitude',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air_unit',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, choices=[('L', 'L'), ('g', 'g'), ('kg', 'kg'), ('m2', 'm2'), ('m3', 'm3')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air_unit',
            name='elevation',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air_unit',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air_unit',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air_unit',
            name='methane',
            field=models.CharField(blank=True, choices=[('µM/L', 'µM/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air_unit',
            name='salinity',
            field=models.CharField(blank=True, choices=[('psu', 'psu')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air_unit',
            name='sample_storage_duration',
            field=models.CharField(blank=True, choices=[('days', 'days'), ('hours', 'hours'), ('months', 'months'), ('weeks', 'weeks'), ('years', 'years')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air_unit',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, choices=[('°C', '°C')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air_unit',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('mL', 'mL'), ('mg', 'mg'), ('ng', 'ng')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_air_unit',
            name='temperature',
            field=models.CharField(blank=True, choices=[('ºC', 'ºC')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='adapters',
            field=models.CharField(blank=True, help_text='Adapters p', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='altitude',
            field=models.CharField(blank=True, help_text='The altitu', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='annotation_source',
            field=models.CharField(blank=True, help_text='For cases ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='broad_scale_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='chemical_administration',
            field=models.CharField(blank=True, help_text='list of ch', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='chimera_check_software',
            field=models.CharField(blank=True, help_text='Tool(s) us', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='collection_date',
            field=models.CharField(blank=True, help_text='The date t', max_length=120, validators=[django.core.validators.RegexValidator('(^[12][0-9]{3}(-(0[1-9]|1[0-2])(-(0[1-9]|[12][0-9]|3[01])(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?(/[0-9]{4}(-[0-9]{2}(-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?)?$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='depth',
            field=models.CharField(blank=True, help_text='The vertic', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='elevation',
            field=models.CharField(blank=True, help_text='The elevat', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='encoded_traits',
            field=models.CharField(blank=True, help_text='Should inc', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='environmental_medium',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='estimated_size',
            field=models.CharField(blank=True, help_text='The estima', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='experimental_factor',
            field=models.CharField(blank=True, help_text='Experiment', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='extrachromosomal_elements',
            field=models.CharField(blank=True, help_text='Do plasmid', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='geographic_location_country_and_or_sea',
            field=models.CharField(blank=True, choices=[('Afghanistan', 'Afghanistan'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Arctic Ocean', 'Arctic Ocean'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Ashmore and Cartier Islands', 'Ashmore and Cartier Islands'), ('Atlantic Ocean', 'Atlantic Ocean'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Baker Island', 'Baker Island'), ('Baltic Sea', 'Baltic Sea'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Bassas da India', 'Bassas da India'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia', 'Bolivia'), ('Borneo', 'Borneo'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Virgin Islands', 'British Virgin Islands'), ('Brunei', 'Brunei'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Canada', 'Canada'), ('Cape Verde', 'Cape Verde'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Clipperton Island', 'Clipperton Island'), ('Cocos Islands', 'Cocos Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Cook Islands', 'Cook Islands'), ('Coral Sea Islands', 'Coral Sea Islands'), ('Costa Rica', 'Costa Rica'), ("Cote d'Ivoire", "Cote d'Ivoire"), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Curacao', 'Curacao'), ('Cyprus', 'Cyprus'), ('Czech Republic', 'Czech Republic'), ('Democratic Republic of the Congo', 'Democratic Republic of the Congo'), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('East Timor', 'East Timor'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Ethiopia', 'Ethiopia'), ('Europa Island', 'Europa Island'), ('Falkland Islands (Islas Malvinas)', 'Falkland Islands (Islas Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern and Antarctic Lands', 'French Southern and Antarctic Lands'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Gaza Strip', 'Gaza Strip'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Glorioso Islands', 'Glorioso Islands'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and McDonald Islands', 'Heard Island and McDonald Islands'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Howland Island', 'Howland Island'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indian Ocean', 'Indian Ocean'), ('Indonesia', 'Indonesia'), ('Iran', 'Iran'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Jan Mayen', 'Jan Mayen'), ('Japan', 'Japan'), ('Jarvis Island', 'Jarvis Island'), ('Jersey', 'Jersey'), ('Johnston Atoll', 'Johnston Atoll'), ('Jordan', 'Jordan'), ('Juan de Nova Island', 'Juan de Nova Island'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kerguelen Archipelago', 'Kerguelen Archipelago'), ('Kingman Reef', 'Kingman Reef'), ('Kiribati', 'Kiribati'), ('Kosovo', 'Kosovo'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), ('Laos', 'Laos'), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macau', 'Macau'), ('Macedonia', 'Macedonia'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Mediterranean Sea', 'Mediterranean Sea'), ('Mexico', 'Mexico'), ('Micronesia', 'Micronesia'), ('Midway Islands', 'Midway Islands'), ('Moldova', 'Moldova'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Navassa Island', 'Navassa Island'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('North Korea', 'North Korea'), ('North Sea', 'North Sea'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pacific Ocean', 'Pacific Ocean'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palmyra Atoll', 'Palmyra Atoll'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paracel Islands', 'Paracel Islands'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn Islands', 'Pitcairn Islands'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Republic of the Congo', 'Republic of the Congo'), ('Reunion', 'Reunion'), ('Romania', 'Romania'), ('Ross Sea', 'Ross Sea'), ('Russia', 'Russia'), ('Rwanda', 'Rwanda'), ('Saint Helena', 'Saint Helena'), ('Saint Kitts and Nevis', 'Saint Kitts and Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Pierre and Miquelon', 'Saint Pierre and Miquelon'), ('Saint Vincent and the Grenadines', 'Saint Vincent and the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Sint Maarten', 'Sint Maarten'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia and the South Sandwich Islands', 'South Georgia and the South Sandwich Islands'), ('South Korea', 'South Korea'), ('Southern Ocean', 'Southern Ocean'), ('Spain', 'Spain'), ('Spratly Islands', 'Spratly Islands'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard', 'Svalbard'), ('Swaziland', 'Swaziland'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syria', 'Syria'), ('Taiwan', 'Taiwan'), ('Tajikistan', 'Tajikistan'), ('Tanzania', 'Tanzania'), ('Tasman Sea', 'Tasman Sea'), ('Thailand', 'Thailand'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad and Tobago', 'Trinidad and Tobago'), ('Tromelin Island', 'Tromelin Island'), ('Tunisia', 'Tunisia'), ('Turkey', 'Turkey'), ('Turkmenistan', 'Turkmenistan'), ('Turks and Caicos Islands', 'Turks and Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('USA', 'USA'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela', 'Venezuela'), ('Viet Nam', 'Viet Nam'), ('Virgin Islands', 'Virgin Islands'), ('Wake Island', 'Wake Island'), ('Wallis and Futuna', 'Wallis and Futuna'), ('West Bank', 'West Bank'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('restricted access', 'restricted access')], help_text='The locati', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='geographic_location_region_and_locality',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_age',
            field=models.CharField(blank=True, help_text='age of hos', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_body_product',
            field=models.CharField(blank=True, help_text='substance ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_body_site',
            field=models.CharField(blank=True, help_text='name of bo', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_body_temperature',
            field=models.CharField(blank=True, help_text='core body ', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_common_name',
            field=models.CharField(blank=True, help_text='common nam', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_diet',
            field=models.CharField(blank=True, help_text='type of di', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_disease_status',
            field=models.CharField(blank=True, help_text='list of di', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_dry_mass',
            field=models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_family_relationship',
            field=models.CharField(blank=True, help_text='relationsh', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_genotype',
            field=models.CharField(blank=True, help_text='observed g', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_height',
            field=models.CharField(blank=True, help_text='the height', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_last_meal',
            field=models.CharField(blank=True, help_text='content of', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_length',
            field=models.CharField(blank=True, help_text='the length', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_life_stage',
            field=models.CharField(blank=True, help_text='descriptio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_phenotype',
            field=models.CharField(blank=True, help_text='phenotype ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_scientific_name',
            field=models.CharField(blank=True, help_text='Scientific', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_sex',
            field=models.CharField(blank=True, choices=[('female', 'female'), ('hermaphrodite', 'hermaphrodite'), ('male', 'male'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('neuter', 'neuter'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('other', 'other'), ('restricted access', 'restricted access')], help_text='Gender or ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_subject_id',
            field=models.CharField(blank=True, help_text='a unique i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_subspecific_genetic_lineage',
            field=models.CharField(blank=True, help_text='Informatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_taxid',
            field=models.CharField(blank=True, help_text='NCBI taxon', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='host_total_mass',
            field=models.CharField(blank=True, help_text='total mass', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='isolation_and_growth_condition',
            field=models.CharField(blank=True, help_text='Publicatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='known_pathogenicity',
            field=models.CharField(blank=True, help_text='To what is', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='library_construction_method',
            field=models.CharField(blank=True, help_text='Library co', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='library_reads_sequenced',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='library_screening_strategy',
            field=models.CharField(blank=True, help_text='Specific e', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='library_size',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='library_vector',
            field=models.CharField(blank=True, help_text='Cloning ve', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='local_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='multiplex_identifiers',
            field=models.CharField(blank=True, help_text='Molecular ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='negative_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='nucleic_acid_amplification',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='nucleic_acid_extraction',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='number_of_replicons',
            field=models.CharField(blank=True, help_text='Reports th', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='observed_biotic_relationship',
            field=models.CharField(blank=True, choices=[('commensal', 'commensal'), ('free living', 'free living'), ('mutualism', 'mutualism'), ('parasite', 'parasite'), ('symbiont', 'symbiont')], help_text='Is it free', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='organism_count',
            field=models.CharField(blank=True, help_text='Total cell', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='oxygenation_status_of_sample',
            field=models.CharField(blank=True, choices=[('aerobic', 'aerobic'), ('anaerobic', 'anaerobic')], help_text='oxygenatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='pcr_conditions',
            field=models.CharField(blank=True, help_text='Descriptio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='pcr_primers',
            field=models.CharField(blank=True, help_text='PCR primer', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='perturbation',
            field=models.CharField(blank=True, help_text='type of pe', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='ploidy',
            field=models.CharField(blank=True, help_text='The ploidy', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='positive_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='project_name',
            field=models.CharField(blank=True, help_text='Name of th', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='propagation',
            field=models.CharField(blank=True, help_text='The type o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='reference_for_biomaterial',
            field=models.CharField(blank=True, help_text='Primary pu', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='relationship_to_oxygen',
            field=models.CharField(blank=True, choices=[('aerobe', 'aerobe'), ('anaerobe', 'anaerobe'), ('facultative', 'facultative'), ('microaerophilic', 'microaerophilic'), ('microanaerobe', 'microanaerobe'), ('obligate aerobe', 'obligate aerobe'), ('obligate anaerobe', 'obligate anaerobe')], help_text='Is this or', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='relevant_electronic_resources',
            field=models.CharField(blank=True, help_text='A related ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='relevant_standard_operating_procedures',
            field=models.CharField(blank=True, help_text='Standard o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='salinity',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='sample_material_processing',
            field=models.CharField(blank=True, help_text='A brief de', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='sample_storage_duration',
            field=models.CharField(blank=True, help_text='duration f', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='sample_storage_location',
            field=models.CharField(blank=True, help_text='location a', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, help_text='Volume (ml', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='sequence_quality_check',
            field=models.CharField(blank=True, choices=[('manual', 'manual'), ('none', 'none'), ('software', 'software')], help_text='Indicate i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='sequencing_method',
            field=models.CharField(blank=True, help_text='Sequencing', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='source_material_identifiers',
            field=models.CharField(blank=True, help_text='A unique i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='subspecific_genetic_lineage',
            field=models.CharField(blank=True, help_text='Informatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='target_gene',
            field=models.CharField(blank=True, help_text='Targeted g', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='target_subfragment',
            field=models.CharField(blank=True, help_text='Name of su', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated',
            name='trophic_level',
            field=models.CharField(blank=True, choices=[('autotroph', 'autotroph'), ('carboxydotroph', 'carboxydotroph'), ('chemoautotroph', 'chemoautotroph'), ('chemoheterotroph', 'chemoheterotroph'), ('chemolithoautotroph', 'chemolithoautotroph'), ('chemolithotroph', 'chemolithotroph'), ('chemoorganoheterotroph', 'chemoorganoheterotroph'), ('chemoorganotroph', 'chemoorganotroph'), ('chemosynthetic', 'chemosynthetic'), ('chemotroph', 'chemotroph'), ('copiotroph', 'copiotroph'), ('diazotroph', 'diazotroph'), ('facultative autotroph', 'facultative autotroph'), ('heterotroph', 'heterotroph'), ('lithoautotroph', 'lithoautotroph'), ('lithoheterotroph', 'lithoheterotroph'), ('lithotroph', 'lithotroph'), ('methanotroph', 'methanotroph'), ('methylotroph', 'methylotroph'), ('mixotroph', 'mixotroph'), ('obligate chemoautolithotroph', 'obligate chemoautolithotroph'), ('oligotroph', 'oligotroph'), ('organoheterotroph', 'organoheterotroph'), ('organotroph', 'organotroph'), ('photoautotroph', 'photoautotroph'), ('photoheterotroph', 'photoheterotroph'), ('photolithoautotroph', 'photolithoautotroph'), ('photolithotroph', 'photolithotroph'), ('photosynthetic', 'photosynthetic'), ('phototroph', 'phototroph')], help_text='Trophic le', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated_unit',
            name='altitude',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated_unit',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, choices=[('L', 'L'), ('g', 'g'), ('kg', 'kg'), ('m2', 'm2'), ('m3', 'm3')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated_unit',
            name='depth',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated_unit',
            name='elevation',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated_unit',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated_unit',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated_unit',
            name='host_age',
            field=models.CharField(blank=True, choices=[('centuries', 'centuries'), ('days', 'days'), ('decades', 'decades'), ('hours', 'hours'), ('minutes', 'minutes'), ('months', 'months'), ('seconds', 'seconds'), ('weeks', 'weeks'), ('years', 'years')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated_unit',
            name='host_body_temperature',
            field=models.CharField(blank=True, choices=[('ºC', 'ºC')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated_unit',
            name='host_dry_mass',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('kg', 'kg'), ('mg', 'mg')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated_unit',
            name='host_height',
            field=models.CharField(blank=True, choices=[('cm', 'cm'), ('m', 'm'), ('mm', 'mm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated_unit',
            name='host_length',
            field=models.CharField(blank=True, choices=[('cm', 'cm'), ('m', 'm'), ('mm', 'mm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated_unit',
            name='host_total_mass',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('kg', 'kg')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated_unit',
            name='salinity',
            field=models.CharField(blank=True, choices=[('psu', 'psu')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated_unit',
            name='sample_storage_duration',
            field=models.CharField(blank=True, choices=[('days', 'days'), ('hours', 'hours'), ('months', 'months'), ('weeks', 'weeks'), ('years', 'years')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated_unit',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, choices=[('°C', '°C')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated_unit',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('mL', 'mL'), ('mg', 'mg'), ('ng', 'ng')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_host_associated_unit',
            name='temperature',
            field=models.CharField(blank=True, choices=[('ºC', 'ºC')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='IHMC_medication_code',
            field=models.CharField(blank=True, choices=[('01=1=Analgesics/NSAIDS', '01=1=Analgesics/NSAIDS'), ('02=2=Anesthetics', '02=2=Anesthetics'), ('03=3=Antacids/H2 antagonists', '03=3=Antacids/H2 antagonists'), ('04=4=Anti-acne', '04=4=Anti-acne'), ('05=5=Anti-asthma/bronchodilators', '05=5=Anti-asthma/bronchodilators'), ('06=6=Anti-cholesterol/Anti-hyperlipidemic', '06=6=Anti-cholesterol/Anti-hyperlipidemic'), ('07=7=Anti-coagulants', '07=7=Anti-coagulants'), ('08=8=Antibiotics/(anti)-infectives, parasitics, microbials', '08=8=Antibiotics/(anti)-infectives, parasitics, microbials'), ('09=9=Antidepressants/mood-altering drugs', '09=9=Antidepressants/mood-altering drugs'), ('10=10=Antihistamines/ Decongestants', '10=10=Antihistamines/ Decongestants'), ('11=11=Antihypertensives', '11=11=Antihypertensives'), ('12=12=Cardiovascular, other than hyperlipidemic/HTN', '12=12=Cardiovascular, other than hyperlipidemic/HTN'), ('13=13=Contraceptives (oral, implant, injectable)', '13=13=Contraceptives (oral, implant, injectable)'), ('14=14=Emergency/support medications', '14=14=Emergency/support medications'), ('15=15=Endocrine/Metabolic agents', '15=15=Endocrine/Metabolic agents'), ('16=16=GI meds (anti-diarrheal, emetic, spasmodics)', '16=16=GI meds (anti-diarrheal, emetic, spasmodics)'), ('17=17=Herbal/homeopathic products', '17=17=Herbal/homeopathic products'), ('18=18=Hormones/steroids', '18=18=Hormones/steroids'), ('19=19=OTC cold & flu', '19=19=OTC cold & flu'), ('20=20=Vaccine prophylaxis', '20=20=Vaccine prophylaxis'), ('21=21=Vitamins, minerals, food supplements', '21=21=Vitamins, minerals, food supplements'), ('99=99=Other', '99=99=Other')], help_text='can includ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='adapters',
            field=models.CharField(blank=True, help_text='Adapters p', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='annotation_source',
            field=models.CharField(blank=True, help_text='For cases ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='broad_scale_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='chemical_administration',
            field=models.CharField(blank=True, help_text='list of ch', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='chimera_check_software',
            field=models.CharField(blank=True, help_text='Tool(s) us', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='collection_date',
            field=models.CharField(blank=True, help_text='The date t', max_length=120, validators=[django.core.validators.RegexValidator('(^[12][0-9]{3}(-(0[1-9]|1[0-2])(-(0[1-9]|[12][0-9]|3[01])(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?(/[0-9]{4}(-[0-9]{2}(-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?)?$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='encoded_traits',
            field=models.CharField(blank=True, help_text='Should inc', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='environmental_medium',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='estimated_size',
            field=models.CharField(blank=True, help_text='The estima', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='ethnicity',
            field=models.CharField(blank=True, help_text='A category', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='experimental_factor',
            field=models.CharField(blank=True, help_text='Experiment', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='extrachromosomal_elements',
            field=models.CharField(blank=True, help_text='Do plasmid', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='geographic_location_country_and_or_sea',
            field=models.CharField(blank=True, choices=[('Afghanistan', 'Afghanistan'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Arctic Ocean', 'Arctic Ocean'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Ashmore and Cartier Islands', 'Ashmore and Cartier Islands'), ('Atlantic Ocean', 'Atlantic Ocean'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Baker Island', 'Baker Island'), ('Baltic Sea', 'Baltic Sea'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Bassas da India', 'Bassas da India'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia', 'Bolivia'), ('Borneo', 'Borneo'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Virgin Islands', 'British Virgin Islands'), ('Brunei', 'Brunei'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Canada', 'Canada'), ('Cape Verde', 'Cape Verde'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Clipperton Island', 'Clipperton Island'), ('Cocos Islands', 'Cocos Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Cook Islands', 'Cook Islands'), ('Coral Sea Islands', 'Coral Sea Islands'), ('Costa Rica', 'Costa Rica'), ("Cote d'Ivoire", "Cote d'Ivoire"), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Curacao', 'Curacao'), ('Cyprus', 'Cyprus'), ('Czech Republic', 'Czech Republic'), ('Democratic Republic of the Congo', 'Democratic Republic of the Congo'), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('East Timor', 'East Timor'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Ethiopia', 'Ethiopia'), ('Europa Island', 'Europa Island'), ('Falkland Islands (Islas Malvinas)', 'Falkland Islands (Islas Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern and Antarctic Lands', 'French Southern and Antarctic Lands'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Gaza Strip', 'Gaza Strip'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Glorioso Islands', 'Glorioso Islands'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and McDonald Islands', 'Heard Island and McDonald Islands'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Howland Island', 'Howland Island'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indian Ocean', 'Indian Ocean'), ('Indonesia', 'Indonesia'), ('Iran', 'Iran'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Jan Mayen', 'Jan Mayen'), ('Japan', 'Japan'), ('Jarvis Island', 'Jarvis Island'), ('Jersey', 'Jersey'), ('Johnston Atoll', 'Johnston Atoll'), ('Jordan', 'Jordan'), ('Juan de Nova Island', 'Juan de Nova Island'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kerguelen Archipelago', 'Kerguelen Archipelago'), ('Kingman Reef', 'Kingman Reef'), ('Kiribati', 'Kiribati'), ('Kosovo', 'Kosovo'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), ('Laos', 'Laos'), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macau', 'Macau'), ('Macedonia', 'Macedonia'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Mediterranean Sea', 'Mediterranean Sea'), ('Mexico', 'Mexico'), ('Micronesia', 'Micronesia'), ('Midway Islands', 'Midway Islands'), ('Moldova', 'Moldova'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Navassa Island', 'Navassa Island'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('North Korea', 'North Korea'), ('North Sea', 'North Sea'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pacific Ocean', 'Pacific Ocean'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palmyra Atoll', 'Palmyra Atoll'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paracel Islands', 'Paracel Islands'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn Islands', 'Pitcairn Islands'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Republic of the Congo', 'Republic of the Congo'), ('Reunion', 'Reunion'), ('Romania', 'Romania'), ('Ross Sea', 'Ross Sea'), ('Russia', 'Russia'), ('Rwanda', 'Rwanda'), ('Saint Helena', 'Saint Helena'), ('Saint Kitts and Nevis', 'Saint Kitts and Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Pierre and Miquelon', 'Saint Pierre and Miquelon'), ('Saint Vincent and the Grenadines', 'Saint Vincent and the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Sint Maarten', 'Sint Maarten'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia and the South Sandwich Islands', 'South Georgia and the South Sandwich Islands'), ('South Korea', 'South Korea'), ('Southern Ocean', 'Southern Ocean'), ('Spain', 'Spain'), ('Spratly Islands', 'Spratly Islands'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard', 'Svalbard'), ('Swaziland', 'Swaziland'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syria', 'Syria'), ('Taiwan', 'Taiwan'), ('Tajikistan', 'Tajikistan'), ('Tanzania', 'Tanzania'), ('Tasman Sea', 'Tasman Sea'), ('Thailand', 'Thailand'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad and Tobago', 'Trinidad and Tobago'), ('Tromelin Island', 'Tromelin Island'), ('Tunisia', 'Tunisia'), ('Turkey', 'Turkey'), ('Turkmenistan', 'Turkmenistan'), ('Turks and Caicos Islands', 'Turks and Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('USA', 'USA'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela', 'Venezuela'), ('Viet Nam', 'Viet Nam'), ('Virgin Islands', 'Virgin Islands'), ('Wake Island', 'Wake Island'), ('Wallis and Futuna', 'Wallis and Futuna'), ('West Bank', 'West Bank'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('restricted access', 'restricted access')], help_text='The locati', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='geographic_location_region_and_locality',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='host_age',
            field=models.CharField(blank=True, help_text='age of hos', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='host_body_mass_index',
            field=models.CharField(blank=True, help_text='body mass ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='host_body_product',
            field=models.CharField(blank=True, help_text='substance ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='host_body_site',
            field=models.CharField(blank=True, help_text='name of bo', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='host_body_temperature',
            field=models.CharField(blank=True, help_text='core body ', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='host_diet',
            field=models.CharField(blank=True, help_text='type of di', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='host_disease_status',
            field=models.CharField(blank=True, help_text='list of di', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='host_family_relationship',
            field=models.CharField(blank=True, help_text='relationsh', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='host_genotype',
            field=models.CharField(blank=True, help_text='observed g', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='host_height',
            field=models.CharField(blank=True, help_text='the height', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='host_last_meal',
            field=models.CharField(blank=True, help_text='content of', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='host_occupation',
            field=models.CharField(blank=True, choices=[('01=01 Accounting/Finance', '01=01 Accounting/Finance'), ('02=02 Advertising/Public Relations', '02=02 Advertising/Public Relations'), ('03=03 Arts/Entertainment/Publishing', '03=03 Arts/Entertainment/Publishing'), ('04=04 Automotive', '04=04 Automotive'), ('05=05 Banking/ Mortgage', '05=05 Banking/ Mortgage'), ('06=06 Biotech', '06=06 Biotech'), ('07=07 Broadcast/Journalism', '07=07 Broadcast/Journalism'), ('08=08 Business Development', '08=08 Business Development'), ('09=09 Clerical/Administrative', '09=09 Clerical/Administrative'), ('10=10 Construction/Trades', '10=10 Construction/Trades'), ('11=11 Consultant', '11=11 Consultant'), ('12=12 Customer Services', '12=12 Customer Services'), ('13=13 Design', '13=13 Design'), ('14=14 Education', '14=14 Education'), ('15=15 Engineering', '15=15 Engineering'), ('16=16 Entry Level', '16=16 Entry Level'), ('17=17 Executive', '17=17 Executive'), ('18=18 Food Service', '18=18 Food Service'), ('19=19 Government', '19=19 Government'), ('20=20 Grocery', '20=20 Grocery'), ('21=21 Healthcare', '21=21 Healthcare'), ('22=22 Hospitality', '22=22 Hospitality'), ('23=23 Human Resources', '23=23 Human Resources'), ('24=24 Information Technology', '24=24 Information Technology'), ('25=25 Insurance', '25=25 Insurance'), ('26=26 Law/Legal', '26=26 Law/Legal'), ('27=27 Management', '27=27 Management'), ('28=28 Manufacturing', '28=28 Manufacturing'), ('29=29 Marketing', '29=29 Marketing'), ('30=30 Pharmaceutical', '30=30 Pharmaceutical'), ('31=31 Professional Services', '31=31 Professional Services'), ('32=32 Purchasing', '32=32 Purchasing'), ('33=33 Quality Assurance (QA)', '33=33 Quality Assurance (QA)'), ('34=34 Research', '34=34 Research'), ('35=35 Restaurant', '35=35 Restaurant'), ('36=36 Retail', '36=36 Retail'), ('37=37 Sales', '37=37 Sales'), ('38=38 Science', '38=38 Science'), ('39=39 Security/Law Enforcement', '39=39 Security/Law Enforcement'), ('40=40 Shipping/Distribution', '40=40 Shipping/Distribution'), ('41=41 Strategy', '41=41 Strategy'), ('42=42 Student', '42=42 Student'), ('43=43 Telecommunications', '43=43 Telecommunications'), ('44=44 Training', '44=44 Training'), ('45=45 Transportation', '45=45 Transportation'), ('46=46 Warehouse', '46=46 Warehouse'), ('47=47 Other', '47=47 Other'), ('99=99 Unknown/Refused', '99=99 Unknown/Refused')], help_text='most frequ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='host_phenotype',
            field=models.CharField(blank=True, help_text='phenotype ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='host_pulse',
            field=models.CharField(blank=True, help_text='resting pu', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='host_scientific_name',
            field=models.CharField(blank=True, help_text='Scientific', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='host_sex',
            field=models.CharField(blank=True, choices=[('female', 'female'), ('hermaphrodite', 'hermaphrodite'), ('male', 'male'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('neuter', 'neuter'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('other', 'other'), ('restricted access', 'restricted access')], help_text='Gender or ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='host_subject_id',
            field=models.CharField(blank=True, help_text='a unique i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='host_total_mass',
            field=models.CharField(blank=True, help_text='total mass', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='isolation_and_growth_condition',
            field=models.CharField(blank=True, help_text='Publicatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='known_pathogenicity',
            field=models.CharField(blank=True, help_text='To what is', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='library_construction_method',
            field=models.CharField(blank=True, help_text='Library co', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='library_reads_sequenced',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='library_screening_strategy',
            field=models.CharField(blank=True, help_text='Specific e', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='library_size',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='library_vector',
            field=models.CharField(blank=True, help_text='Cloning ve', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='local_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='medical_history_performed',
            field=models.CharField(blank=True, choices=[('No', 'No'), ('Yes', 'Yes')], help_text='whether fu', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='multiplex_identifiers',
            field=models.CharField(blank=True, help_text='Molecular ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='negative_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='nucleic_acid_amplification',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='nucleic_acid_extraction',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='number_of_replicons',
            field=models.CharField(blank=True, help_text='Reports th', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='observed_biotic_relationship',
            field=models.CharField(blank=True, choices=[('commensal', 'commensal'), ('free living', 'free living'), ('mutualism', 'mutualism'), ('parasite', 'parasite'), ('symbiont', 'symbiont')], help_text='Is it free', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='organism_count',
            field=models.CharField(blank=True, help_text='Total cell', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='oxygenation_status_of_sample',
            field=models.CharField(blank=True, choices=[('aerobic', 'aerobic'), ('anaerobic', 'anaerobic')], help_text='oxygenatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='pcr_conditions',
            field=models.CharField(blank=True, help_text='Descriptio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='pcr_primers',
            field=models.CharField(blank=True, help_text='PCR primer', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='perturbation',
            field=models.CharField(blank=True, help_text='type of pe', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='ploidy',
            field=models.CharField(blank=True, help_text='The ploidy', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='positive_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='project_name',
            field=models.CharField(blank=True, help_text='Name of th', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='propagation',
            field=models.CharField(blank=True, help_text='The type o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='reference_for_biomaterial',
            field=models.CharField(blank=True, help_text='Primary pu', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='relationship_to_oxygen',
            field=models.CharField(blank=True, choices=[('aerobe', 'aerobe'), ('anaerobe', 'anaerobe'), ('facultative', 'facultative'), ('microaerophilic', 'microaerophilic'), ('microanaerobe', 'microanaerobe'), ('obligate aerobe', 'obligate aerobe'), ('obligate anaerobe', 'obligate anaerobe')], help_text='Is this or', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='relevant_electronic_resources',
            field=models.CharField(blank=True, help_text='A related ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='relevant_standard_operating_procedures',
            field=models.CharField(blank=True, help_text='Standard o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='salinity',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='sample_collection_device',
            field=models.CharField(blank=True, help_text='The device', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='sample_collection_method',
            field=models.CharField(blank=True, help_text='The method', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='sample_material_processing',
            field=models.CharField(blank=True, help_text='A brief de', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='sample_storage_duration',
            field=models.CharField(blank=True, help_text='duration f', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='sample_storage_location',
            field=models.CharField(blank=True, help_text='location a', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, help_text='Volume (ml', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='sequence_quality_check',
            field=models.CharField(blank=True, choices=[('manual', 'manual'), ('none', 'none'), ('software', 'software')], help_text='Indicate i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='sequencing_method',
            field=models.CharField(blank=True, help_text='Sequencing', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='source_material_identifiers',
            field=models.CharField(blank=True, help_text='A unique i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='subspecific_genetic_lineage',
            field=models.CharField(blank=True, help_text='Informatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='target_gene',
            field=models.CharField(blank=True, help_text='Targeted g', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='target_subfragment',
            field=models.CharField(blank=True, help_text='Name of su', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated',
            name='trophic_level',
            field=models.CharField(blank=True, choices=[('autotroph', 'autotroph'), ('carboxydotroph', 'carboxydotroph'), ('chemoautotroph', 'chemoautotroph'), ('chemoheterotroph', 'chemoheterotroph'), ('chemolithoautotroph', 'chemolithoautotroph'), ('chemolithotroph', 'chemolithotroph'), ('chemoorganoheterotroph', 'chemoorganoheterotroph'), ('chemoorganotroph', 'chemoorganotroph'), ('chemosynthetic', 'chemosynthetic'), ('chemotroph', 'chemotroph'), ('copiotroph', 'copiotroph'), ('diazotroph', 'diazotroph'), ('facultative autotroph', 'facultative autotroph'), ('heterotroph', 'heterotroph'), ('lithoautotroph', 'lithoautotroph'), ('lithoheterotroph', 'lithoheterotroph'), ('lithotroph', 'lithotroph'), ('methanotroph', 'methanotroph'), ('methylotroph', 'methylotroph'), ('mixotroph', 'mixotroph'), ('obligate chemoautolithotroph', 'obligate chemoautolithotroph'), ('oligotroph', 'oligotroph'), ('organoheterotroph', 'organoheterotroph'), ('organotroph', 'organotroph'), ('photoautotroph', 'photoautotroph'), ('photoheterotroph', 'photoheterotroph'), ('photolithoautotroph', 'photolithoautotroph'), ('photolithotroph', 'photolithotroph'), ('photosynthetic', 'photosynthetic'), ('phototroph', 'phototroph')], help_text='Trophic le', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated_unit',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, choices=[('L', 'L'), ('g', 'g'), ('kg', 'kg'), ('m2', 'm2'), ('m3', 'm3')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated_unit',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated_unit',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated_unit',
            name='host_age',
            field=models.CharField(blank=True, choices=[('centuries', 'centuries'), ('days', 'days'), ('decades', 'decades'), ('hours', 'hours'), ('minutes', 'minutes'), ('months', 'months'), ('seconds', 'seconds'), ('weeks', 'weeks'), ('years', 'years')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated_unit',
            name='host_body_mass_index',
            field=models.CharField(blank=True, choices=[('kg/m2', 'kg/m2')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated_unit',
            name='host_body_temperature',
            field=models.CharField(blank=True, choices=[('ºC', 'ºC')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated_unit',
            name='host_height',
            field=models.CharField(blank=True, choices=[('cm', 'cm'), ('m', 'm'), ('mm', 'mm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated_unit',
            name='host_pulse',
            field=models.CharField(blank=True, choices=[('bpm', 'bpm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated_unit',
            name='host_total_mass',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('kg', 'kg')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated_unit',
            name='salinity',
            field=models.CharField(blank=True, choices=[('psu', 'psu')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated_unit',
            name='sample_storage_duration',
            field=models.CharField(blank=True, choices=[('days', 'days'), ('hours', 'hours'), ('months', 'months'), ('weeks', 'weeks'), ('years', 'years')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated_unit',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, choices=[('°C', '°C')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated_unit',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('mL', 'mL'), ('mg', 'mg'), ('ng', 'ng')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_associated_unit',
            name='temperature',
            field=models.CharField(blank=True, choices=[('ºC', 'ºC')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='IHMC_medication_code',
            field=models.CharField(blank=True, choices=[('01=1=Analgesics/NSAIDS', '01=1=Analgesics/NSAIDS'), ('02=2=Anesthetics', '02=2=Anesthetics'), ('03=3=Antacids/H2 antagonists', '03=3=Antacids/H2 antagonists'), ('04=4=Anti-acne', '04=4=Anti-acne'), ('05=5=Anti-asthma/bronchodilators', '05=5=Anti-asthma/bronchodilators'), ('06=6=Anti-cholesterol/Anti-hyperlipidemic', '06=6=Anti-cholesterol/Anti-hyperlipidemic'), ('07=7=Anti-coagulants', '07=7=Anti-coagulants'), ('08=8=Antibiotics/(anti)-infectives, parasitics, microbials', '08=8=Antibiotics/(anti)-infectives, parasitics, microbials'), ('09=9=Antidepressants/mood-altering drugs', '09=9=Antidepressants/mood-altering drugs'), ('10=10=Antihistamines/ Decongestants', '10=10=Antihistamines/ Decongestants'), ('11=11=Antihypertensives', '11=11=Antihypertensives'), ('12=12=Cardiovascular, other than hyperlipidemic/HTN', '12=12=Cardiovascular, other than hyperlipidemic/HTN'), ('13=13=Contraceptives (oral, implant, injectable)', '13=13=Contraceptives (oral, implant, injectable)'), ('14=14=Emergency/support medications', '14=14=Emergency/support medications'), ('15=15=Endocrine/Metabolic agents', '15=15=Endocrine/Metabolic agents'), ('16=16=GI meds (anti-diarrheal, emetic, spasmodics)', '16=16=GI meds (anti-diarrheal, emetic, spasmodics)'), ('17=17=Herbal/homeopathic products', '17=17=Herbal/homeopathic products'), ('18=18=Hormones/steroids', '18=18=Hormones/steroids'), ('19=19=OTC cold & flu', '19=19=OTC cold & flu'), ('20=20=Vaccine prophylaxis', '20=20=Vaccine prophylaxis'), ('21=21=Vitamins, minerals, food supplements', '21=21=Vitamins, minerals, food supplements'), ('99=99=Other', '99=99=Other')], help_text='can includ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='adapters',
            field=models.CharField(blank=True, help_text='Adapters p', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='annotation_source',
            field=models.CharField(blank=True, help_text='For cases ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='broad_scale_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='chemical_administration',
            field=models.CharField(blank=True, help_text='list of ch', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='chimera_check_software',
            field=models.CharField(blank=True, help_text='Tool(s) us', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='collection_date',
            field=models.CharField(blank=True, help_text='The date t', max_length=120, validators=[django.core.validators.RegexValidator('(^[12][0-9]{3}(-(0[1-9]|1[0-2])(-(0[1-9]|[12][0-9]|3[01])(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?(/[0-9]{4}(-[0-9]{2}(-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?)?$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='encoded_traits',
            field=models.CharField(blank=True, help_text='Should inc', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='environmental_medium',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='estimated_size',
            field=models.CharField(blank=True, help_text='The estima', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='ethnicity',
            field=models.CharField(blank=True, help_text='A category', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='experimental_factor',
            field=models.CharField(blank=True, help_text='Experiment', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='extrachromosomal_elements',
            field=models.CharField(blank=True, help_text='Do plasmid', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='geographic_location_country_and_or_sea',
            field=models.CharField(blank=True, choices=[('Afghanistan', 'Afghanistan'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Arctic Ocean', 'Arctic Ocean'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Ashmore and Cartier Islands', 'Ashmore and Cartier Islands'), ('Atlantic Ocean', 'Atlantic Ocean'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Baker Island', 'Baker Island'), ('Baltic Sea', 'Baltic Sea'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Bassas da India', 'Bassas da India'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia', 'Bolivia'), ('Borneo', 'Borneo'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Virgin Islands', 'British Virgin Islands'), ('Brunei', 'Brunei'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Canada', 'Canada'), ('Cape Verde', 'Cape Verde'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Clipperton Island', 'Clipperton Island'), ('Cocos Islands', 'Cocos Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Cook Islands', 'Cook Islands'), ('Coral Sea Islands', 'Coral Sea Islands'), ('Costa Rica', 'Costa Rica'), ("Cote d'Ivoire", "Cote d'Ivoire"), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Curacao', 'Curacao'), ('Cyprus', 'Cyprus'), ('Czech Republic', 'Czech Republic'), ('Democratic Republic of the Congo', 'Democratic Republic of the Congo'), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('East Timor', 'East Timor'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Ethiopia', 'Ethiopia'), ('Europa Island', 'Europa Island'), ('Falkland Islands (Islas Malvinas)', 'Falkland Islands (Islas Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern and Antarctic Lands', 'French Southern and Antarctic Lands'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Gaza Strip', 'Gaza Strip'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Glorioso Islands', 'Glorioso Islands'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and McDonald Islands', 'Heard Island and McDonald Islands'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Howland Island', 'Howland Island'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indian Ocean', 'Indian Ocean'), ('Indonesia', 'Indonesia'), ('Iran', 'Iran'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Jan Mayen', 'Jan Mayen'), ('Japan', 'Japan'), ('Jarvis Island', 'Jarvis Island'), ('Jersey', 'Jersey'), ('Johnston Atoll', 'Johnston Atoll'), ('Jordan', 'Jordan'), ('Juan de Nova Island', 'Juan de Nova Island'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kerguelen Archipelago', 'Kerguelen Archipelago'), ('Kingman Reef', 'Kingman Reef'), ('Kiribati', 'Kiribati'), ('Kosovo', 'Kosovo'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), ('Laos', 'Laos'), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macau', 'Macau'), ('Macedonia', 'Macedonia'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Mediterranean Sea', 'Mediterranean Sea'), ('Mexico', 'Mexico'), ('Micronesia', 'Micronesia'), ('Midway Islands', 'Midway Islands'), ('Moldova', 'Moldova'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Navassa Island', 'Navassa Island'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('North Korea', 'North Korea'), ('North Sea', 'North Sea'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pacific Ocean', 'Pacific Ocean'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palmyra Atoll', 'Palmyra Atoll'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paracel Islands', 'Paracel Islands'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn Islands', 'Pitcairn Islands'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Republic of the Congo', 'Republic of the Congo'), ('Reunion', 'Reunion'), ('Romania', 'Romania'), ('Ross Sea', 'Ross Sea'), ('Russia', 'Russia'), ('Rwanda', 'Rwanda'), ('Saint Helena', 'Saint Helena'), ('Saint Kitts and Nevis', 'Saint Kitts and Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Pierre and Miquelon', 'Saint Pierre and Miquelon'), ('Saint Vincent and the Grenadines', 'Saint Vincent and the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Sint Maarten', 'Sint Maarten'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia and the South Sandwich Islands', 'South Georgia and the South Sandwich Islands'), ('South Korea', 'South Korea'), ('Southern Ocean', 'Southern Ocean'), ('Spain', 'Spain'), ('Spratly Islands', 'Spratly Islands'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard', 'Svalbard'), ('Swaziland', 'Swaziland'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syria', 'Syria'), ('Taiwan', 'Taiwan'), ('Tajikistan', 'Tajikistan'), ('Tanzania', 'Tanzania'), ('Tasman Sea', 'Tasman Sea'), ('Thailand', 'Thailand'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad and Tobago', 'Trinidad and Tobago'), ('Tromelin Island', 'Tromelin Island'), ('Tunisia', 'Tunisia'), ('Turkey', 'Turkey'), ('Turkmenistan', 'Turkmenistan'), ('Turks and Caicos Islands', 'Turks and Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('USA', 'USA'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela', 'Venezuela'), ('Viet Nam', 'Viet Nam'), ('Virgin Islands', 'Virgin Islands'), ('Wake Island', 'Wake Island'), ('Wallis and Futuna', 'Wallis and Futuna'), ('West Bank', 'West Bank'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('restricted access', 'restricted access')], help_text='The locati', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='geographic_location_region_and_locality',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='host_age',
            field=models.CharField(blank=True, help_text='age of hos', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='host_body_mass_index',
            field=models.CharField(blank=True, help_text='body mass ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='host_body_product',
            field=models.CharField(blank=True, help_text='substance ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='host_body_site',
            field=models.CharField(blank=True, help_text='name of bo', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='host_body_temperature',
            field=models.CharField(blank=True, help_text='core body ', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='host_diet',
            field=models.CharField(blank=True, help_text='type of di', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='host_disease_status',
            field=models.CharField(blank=True, help_text='list of di', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='host_family_relationship',
            field=models.CharField(blank=True, help_text='relationsh', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='host_genotype',
            field=models.CharField(blank=True, help_text='observed g', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='host_height',
            field=models.CharField(blank=True, help_text='the height', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='host_last_meal',
            field=models.CharField(blank=True, help_text='content of', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='host_occupation',
            field=models.CharField(blank=True, choices=[('01=01 Accounting/Finance', '01=01 Accounting/Finance'), ('02=02 Advertising/Public Relations', '02=02 Advertising/Public Relations'), ('03=03 Arts/Entertainment/Publishing', '03=03 Arts/Entertainment/Publishing'), ('04=04 Automotive', '04=04 Automotive'), ('05=05 Banking/ Mortgage', '05=05 Banking/ Mortgage'), ('06=06 Biotech', '06=06 Biotech'), ('07=07 Broadcast/Journalism', '07=07 Broadcast/Journalism'), ('08=08 Business Development', '08=08 Business Development'), ('09=09 Clerical/Administrative', '09=09 Clerical/Administrative'), ('10=10 Construction/Trades', '10=10 Construction/Trades'), ('11=11 Consultant', '11=11 Consultant'), ('12=12 Customer Services', '12=12 Customer Services'), ('13=13 Design', '13=13 Design'), ('14=14 Education', '14=14 Education'), ('15=15 Engineering', '15=15 Engineering'), ('16=16 Entry Level', '16=16 Entry Level'), ('17=17 Executive', '17=17 Executive'), ('18=18 Food Service', '18=18 Food Service'), ('19=19 Government', '19=19 Government'), ('20=20 Grocery', '20=20 Grocery'), ('21=21 Healthcare', '21=21 Healthcare'), ('22=22 Hospitality', '22=22 Hospitality'), ('23=23 Human Resources', '23=23 Human Resources'), ('24=24 Information Technology', '24=24 Information Technology'), ('25=25 Insurance', '25=25 Insurance'), ('26=26 Law/Legal', '26=26 Law/Legal'), ('27=27 Management', '27=27 Management'), ('28=28 Manufacturing', '28=28 Manufacturing'), ('29=29 Marketing', '29=29 Marketing'), ('30=30 Pharmaceutical', '30=30 Pharmaceutical'), ('31=31 Professional Services', '31=31 Professional Services'), ('32=32 Purchasing', '32=32 Purchasing'), ('33=33 Quality Assurance (QA)', '33=33 Quality Assurance (QA)'), ('34=34 Research', '34=34 Research'), ('35=35 Restaurant', '35=35 Restaurant'), ('36=36 Retail', '36=36 Retail'), ('37=37 Sales', '37=37 Sales'), ('38=38 Science', '38=38 Science'), ('39=39 Security/Law Enforcement', '39=39 Security/Law Enforcement'), ('40=40 Shipping/Distribution', '40=40 Shipping/Distribution'), ('41=41 Strategy', '41=41 Strategy'), ('42=42 Student', '42=42 Student'), ('43=43 Telecommunications', '43=43 Telecommunications'), ('44=44 Training', '44=44 Training'), ('45=45 Transportation', '45=45 Transportation'), ('46=46 Warehouse', '46=46 Warehouse'), ('47=47 Other', '47=47 Other'), ('99=99 Unknown/Refused', '99=99 Unknown/Refused')], help_text='most frequ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='host_phenotype',
            field=models.CharField(blank=True, help_text='phenotype ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='host_pulse',
            field=models.CharField(blank=True, help_text='resting pu', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='host_sex',
            field=models.CharField(blank=True, choices=[('female', 'female'), ('hermaphrodite', 'hermaphrodite'), ('male', 'male'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('neuter', 'neuter'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('other', 'other'), ('restricted access', 'restricted access')], help_text='Gender or ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='host_subject_id',
            field=models.CharField(blank=True, help_text='a unique i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='host_total_mass',
            field=models.CharField(blank=True, help_text='total mass', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='isolation_and_growth_condition',
            field=models.CharField(blank=True, help_text='Publicatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='known_pathogenicity',
            field=models.CharField(blank=True, help_text='To what is', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='library_construction_method',
            field=models.CharField(blank=True, help_text='Library co', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='library_reads_sequenced',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='library_screening_strategy',
            field=models.CharField(blank=True, help_text='Specific e', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='library_size',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='library_vector',
            field=models.CharField(blank=True, help_text='Cloning ve', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='local_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='medical_history_performed',
            field=models.CharField(blank=True, choices=[('No', 'No'), ('Yes', 'Yes')], help_text='whether fu', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='multiplex_identifiers',
            field=models.CharField(blank=True, help_text='Molecular ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='negative_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='nucleic_acid_amplification',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='nucleic_acid_extraction',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='number_of_replicons',
            field=models.CharField(blank=True, help_text='Reports th', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='observed_biotic_relationship',
            field=models.CharField(blank=True, choices=[('commensal', 'commensal'), ('free living', 'free living'), ('mutualism', 'mutualism'), ('parasite', 'parasite'), ('symbiont', 'symbiont')], help_text='Is it free', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='organism_count',
            field=models.CharField(blank=True, help_text='Total cell', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='oxygenation_status_of_sample',
            field=models.CharField(blank=True, choices=[('aerobic', 'aerobic'), ('anaerobic', 'anaerobic')], help_text='oxygenatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='pcr_conditions',
            field=models.CharField(blank=True, help_text='Descriptio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='pcr_primers',
            field=models.CharField(blank=True, help_text='PCR primer', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='perturbation',
            field=models.CharField(blank=True, help_text='type of pe', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='ploidy',
            field=models.CharField(blank=True, help_text='The ploidy', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='positive_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='project_name',
            field=models.CharField(blank=True, help_text='Name of th', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='propagation',
            field=models.CharField(blank=True, help_text='The type o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='reference_for_biomaterial',
            field=models.CharField(blank=True, help_text='Primary pu', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='relationship_to_oxygen',
            field=models.CharField(blank=True, choices=[('aerobe', 'aerobe'), ('anaerobe', 'anaerobe'), ('facultative', 'facultative'), ('microaerophilic', 'microaerophilic'), ('microanaerobe', 'microanaerobe'), ('obligate aerobe', 'obligate aerobe'), ('obligate anaerobe', 'obligate anaerobe')], help_text='Is this or', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='relevant_electronic_resources',
            field=models.CharField(blank=True, help_text='A related ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='relevant_standard_operating_procedures',
            field=models.CharField(blank=True, help_text='Standard o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='salinity',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='sample_collection_device',
            field=models.CharField(blank=True, help_text='The device', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='sample_collection_method',
            field=models.CharField(blank=True, help_text='The method', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='sample_material_processing',
            field=models.CharField(blank=True, help_text='A brief de', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='sample_storage_duration',
            field=models.CharField(blank=True, help_text='duration f', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='sample_storage_location',
            field=models.CharField(blank=True, help_text='location a', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, help_text='Volume (ml', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='sequence_quality_check',
            field=models.CharField(blank=True, choices=[('manual', 'manual'), ('none', 'none'), ('software', 'software')], help_text='Indicate i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='sequencing_method',
            field=models.CharField(blank=True, help_text='Sequencing', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='source_material_identifiers',
            field=models.CharField(blank=True, help_text='A unique i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='subspecific_genetic_lineage',
            field=models.CharField(blank=True, help_text='Informatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='target_gene',
            field=models.CharField(blank=True, help_text='Targeted g', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='target_subfragment',
            field=models.CharField(blank=True, help_text='Name of su', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut',
            name='trophic_level',
            field=models.CharField(blank=True, choices=[('autotroph', 'autotroph'), ('carboxydotroph', 'carboxydotroph'), ('chemoautotroph', 'chemoautotroph'), ('chemoheterotroph', 'chemoheterotroph'), ('chemolithoautotroph', 'chemolithoautotroph'), ('chemolithotroph', 'chemolithotroph'), ('chemoorganoheterotroph', 'chemoorganoheterotroph'), ('chemoorganotroph', 'chemoorganotroph'), ('chemosynthetic', 'chemosynthetic'), ('chemotroph', 'chemotroph'), ('copiotroph', 'copiotroph'), ('diazotroph', 'diazotroph'), ('facultative autotroph', 'facultative autotroph'), ('heterotroph', 'heterotroph'), ('lithoautotroph', 'lithoautotroph'), ('lithoheterotroph', 'lithoheterotroph'), ('lithotroph', 'lithotroph'), ('methanotroph', 'methanotroph'), ('methylotroph', 'methylotroph'), ('mixotroph', 'mixotroph'), ('obligate chemoautolithotroph', 'obligate chemoautolithotroph'), ('oligotroph', 'oligotroph'), ('organoheterotroph', 'organoheterotroph'), ('organotroph', 'organotroph'), ('photoautotroph', 'photoautotroph'), ('photoheterotroph', 'photoheterotroph'), ('photolithoautotroph', 'photolithoautotroph'), ('photolithotroph', 'photolithotroph'), ('photosynthetic', 'photosynthetic'), ('phototroph', 'phototroph')], help_text='Trophic le', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut_unit',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, choices=[('L', 'L'), ('g', 'g'), ('kg', 'kg'), ('m2', 'm2'), ('m3', 'm3')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut_unit',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut_unit',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut_unit',
            name='host_age',
            field=models.CharField(blank=True, choices=[('centuries', 'centuries'), ('days', 'days'), ('decades', 'decades'), ('hours', 'hours'), ('minutes', 'minutes'), ('months', 'months'), ('seconds', 'seconds'), ('weeks', 'weeks'), ('years', 'years')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut_unit',
            name='host_body_mass_index',
            field=models.CharField(blank=True, choices=[('kg/m2', 'kg/m2')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut_unit',
            name='host_body_temperature',
            field=models.CharField(blank=True, choices=[('ºC', 'ºC')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut_unit',
            name='host_height',
            field=models.CharField(blank=True, choices=[('cm', 'cm'), ('m', 'm'), ('mm', 'mm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut_unit',
            name='host_pulse',
            field=models.CharField(blank=True, choices=[('bpm', 'bpm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut_unit',
            name='host_total_mass',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('kg', 'kg')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut_unit',
            name='salinity',
            field=models.CharField(blank=True, choices=[('psu', 'psu')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut_unit',
            name='sample_storage_duration',
            field=models.CharField(blank=True, choices=[('days', 'days'), ('hours', 'hours'), ('months', 'months'), ('weeks', 'weeks'), ('years', 'years')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut_unit',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, choices=[('°C', '°C')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut_unit',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('mL', 'mL'), ('mg', 'mg'), ('ng', 'ng')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_gut_unit',
            name='temperature',
            field=models.CharField(blank=True, choices=[('ºC', 'ºC')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='IHMC_medication_code',
            field=models.CharField(blank=True, choices=[('01=1=Analgesics/NSAIDS', '01=1=Analgesics/NSAIDS'), ('02=2=Anesthetics', '02=2=Anesthetics'), ('03=3=Antacids/H2 antagonists', '03=3=Antacids/H2 antagonists'), ('04=4=Anti-acne', '04=4=Anti-acne'), ('05=5=Anti-asthma/bronchodilators', '05=5=Anti-asthma/bronchodilators'), ('06=6=Anti-cholesterol/Anti-hyperlipidemic', '06=6=Anti-cholesterol/Anti-hyperlipidemic'), ('07=7=Anti-coagulants', '07=7=Anti-coagulants'), ('08=8=Antibiotics/(anti)-infectives, parasitics, microbials', '08=8=Antibiotics/(anti)-infectives, parasitics, microbials'), ('09=9=Antidepressants/mood-altering drugs', '09=9=Antidepressants/mood-altering drugs'), ('10=10=Antihistamines/ Decongestants', '10=10=Antihistamines/ Decongestants'), ('11=11=Antihypertensives', '11=11=Antihypertensives'), ('12=12=Cardiovascular, other than hyperlipidemic/HTN', '12=12=Cardiovascular, other than hyperlipidemic/HTN'), ('13=13=Contraceptives (oral, implant, injectable)', '13=13=Contraceptives (oral, implant, injectable)'), ('14=14=Emergency/support medications', '14=14=Emergency/support medications'), ('15=15=Endocrine/Metabolic agents', '15=15=Endocrine/Metabolic agents'), ('16=16=GI meds (anti-diarrheal, emetic, spasmodics)', '16=16=GI meds (anti-diarrheal, emetic, spasmodics)'), ('17=17=Herbal/homeopathic products', '17=17=Herbal/homeopathic products'), ('18=18=Hormones/steroids', '18=18=Hormones/steroids'), ('19=19=OTC cold & flu', '19=19=OTC cold & flu'), ('20=20=Vaccine prophylaxis', '20=20=Vaccine prophylaxis'), ('21=21=Vitamins, minerals, food supplements', '21=21=Vitamins, minerals, food supplements'), ('99=99=Other', '99=99=Other')], help_text='can includ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='adapters',
            field=models.CharField(blank=True, help_text='Adapters p', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='annotation_source',
            field=models.CharField(blank=True, help_text='For cases ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='broad_scale_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='chemical_administration',
            field=models.CharField(blank=True, help_text='list of ch', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='chimera_check_software',
            field=models.CharField(blank=True, help_text='Tool(s) us', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='collection_date',
            field=models.CharField(blank=True, help_text='The date t', max_length=120, validators=[django.core.validators.RegexValidator('(^[12][0-9]{3}(-(0[1-9]|1[0-2])(-(0[1-9]|[12][0-9]|3[01])(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?(/[0-9]{4}(-[0-9]{2}(-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?)?$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='encoded_traits',
            field=models.CharField(blank=True, help_text='Should inc', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='environmental_medium',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='estimated_size',
            field=models.CharField(blank=True, help_text='The estima', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='ethnicity',
            field=models.CharField(blank=True, help_text='A category', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='experimental_factor',
            field=models.CharField(blank=True, help_text='Experiment', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='extrachromosomal_elements',
            field=models.CharField(blank=True, help_text='Do plasmid', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='geographic_location_country_and_or_sea',
            field=models.CharField(blank=True, choices=[('Afghanistan', 'Afghanistan'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Arctic Ocean', 'Arctic Ocean'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Ashmore and Cartier Islands', 'Ashmore and Cartier Islands'), ('Atlantic Ocean', 'Atlantic Ocean'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Baker Island', 'Baker Island'), ('Baltic Sea', 'Baltic Sea'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Bassas da India', 'Bassas da India'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia', 'Bolivia'), ('Borneo', 'Borneo'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Virgin Islands', 'British Virgin Islands'), ('Brunei', 'Brunei'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Canada', 'Canada'), ('Cape Verde', 'Cape Verde'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Clipperton Island', 'Clipperton Island'), ('Cocos Islands', 'Cocos Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Cook Islands', 'Cook Islands'), ('Coral Sea Islands', 'Coral Sea Islands'), ('Costa Rica', 'Costa Rica'), ("Cote d'Ivoire", "Cote d'Ivoire"), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Curacao', 'Curacao'), ('Cyprus', 'Cyprus'), ('Czech Republic', 'Czech Republic'), ('Democratic Republic of the Congo', 'Democratic Republic of the Congo'), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('East Timor', 'East Timor'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Ethiopia', 'Ethiopia'), ('Europa Island', 'Europa Island'), ('Falkland Islands (Islas Malvinas)', 'Falkland Islands (Islas Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern and Antarctic Lands', 'French Southern and Antarctic Lands'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Gaza Strip', 'Gaza Strip'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Glorioso Islands', 'Glorioso Islands'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and McDonald Islands', 'Heard Island and McDonald Islands'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Howland Island', 'Howland Island'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indian Ocean', 'Indian Ocean'), ('Indonesia', 'Indonesia'), ('Iran', 'Iran'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Jan Mayen', 'Jan Mayen'), ('Japan', 'Japan'), ('Jarvis Island', 'Jarvis Island'), ('Jersey', 'Jersey'), ('Johnston Atoll', 'Johnston Atoll'), ('Jordan', 'Jordan'), ('Juan de Nova Island', 'Juan de Nova Island'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kerguelen Archipelago', 'Kerguelen Archipelago'), ('Kingman Reef', 'Kingman Reef'), ('Kiribati', 'Kiribati'), ('Kosovo', 'Kosovo'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), ('Laos', 'Laos'), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macau', 'Macau'), ('Macedonia', 'Macedonia'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Mediterranean Sea', 'Mediterranean Sea'), ('Mexico', 'Mexico'), ('Micronesia', 'Micronesia'), ('Midway Islands', 'Midway Islands'), ('Moldova', 'Moldova'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Navassa Island', 'Navassa Island'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('North Korea', 'North Korea'), ('North Sea', 'North Sea'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pacific Ocean', 'Pacific Ocean'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palmyra Atoll', 'Palmyra Atoll'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paracel Islands', 'Paracel Islands'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn Islands', 'Pitcairn Islands'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Republic of the Congo', 'Republic of the Congo'), ('Reunion', 'Reunion'), ('Romania', 'Romania'), ('Ross Sea', 'Ross Sea'), ('Russia', 'Russia'), ('Rwanda', 'Rwanda'), ('Saint Helena', 'Saint Helena'), ('Saint Kitts and Nevis', 'Saint Kitts and Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Pierre and Miquelon', 'Saint Pierre and Miquelon'), ('Saint Vincent and the Grenadines', 'Saint Vincent and the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Sint Maarten', 'Sint Maarten'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia and the South Sandwich Islands', 'South Georgia and the South Sandwich Islands'), ('South Korea', 'South Korea'), ('Southern Ocean', 'Southern Ocean'), ('Spain', 'Spain'), ('Spratly Islands', 'Spratly Islands'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard', 'Svalbard'), ('Swaziland', 'Swaziland'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syria', 'Syria'), ('Taiwan', 'Taiwan'), ('Tajikistan', 'Tajikistan'), ('Tanzania', 'Tanzania'), ('Tasman Sea', 'Tasman Sea'), ('Thailand', 'Thailand'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad and Tobago', 'Trinidad and Tobago'), ('Tromelin Island', 'Tromelin Island'), ('Tunisia', 'Tunisia'), ('Turkey', 'Turkey'), ('Turkmenistan', 'Turkmenistan'), ('Turks and Caicos Islands', 'Turks and Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('USA', 'USA'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela', 'Venezuela'), ('Viet Nam', 'Viet Nam'), ('Virgin Islands', 'Virgin Islands'), ('Wake Island', 'Wake Island'), ('Wallis and Futuna', 'Wallis and Futuna'), ('West Bank', 'West Bank'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('restricted access', 'restricted access')], help_text='The locati', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='geographic_location_region_and_locality',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='host_age',
            field=models.CharField(blank=True, help_text='age of hos', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='host_body_mass_index',
            field=models.CharField(blank=True, help_text='body mass ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='host_body_product',
            field=models.CharField(blank=True, help_text='substance ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='host_body_site',
            field=models.CharField(blank=True, help_text='name of bo', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='host_body_temperature',
            field=models.CharField(blank=True, help_text='core body ', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='host_diet',
            field=models.CharField(blank=True, help_text='type of di', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='host_disease_status',
            field=models.CharField(blank=True, help_text='list of di', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='host_family_relationship',
            field=models.CharField(blank=True, help_text='relationsh', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='host_genotype',
            field=models.CharField(blank=True, help_text='observed g', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='host_height',
            field=models.CharField(blank=True, help_text='the height', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='host_last_meal',
            field=models.CharField(blank=True, help_text='content of', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='host_occupation',
            field=models.CharField(blank=True, choices=[('01=01 Accounting/Finance', '01=01 Accounting/Finance'), ('02=02 Advertising/Public Relations', '02=02 Advertising/Public Relations'), ('03=03 Arts/Entertainment/Publishing', '03=03 Arts/Entertainment/Publishing'), ('04=04 Automotive', '04=04 Automotive'), ('05=05 Banking/ Mortgage', '05=05 Banking/ Mortgage'), ('06=06 Biotech', '06=06 Biotech'), ('07=07 Broadcast/Journalism', '07=07 Broadcast/Journalism'), ('08=08 Business Development', '08=08 Business Development'), ('09=09 Clerical/Administrative', '09=09 Clerical/Administrative'), ('10=10 Construction/Trades', '10=10 Construction/Trades'), ('11=11 Consultant', '11=11 Consultant'), ('12=12 Customer Services', '12=12 Customer Services'), ('13=13 Design', '13=13 Design'), ('14=14 Education', '14=14 Education'), ('15=15 Engineering', '15=15 Engineering'), ('16=16 Entry Level', '16=16 Entry Level'), ('17=17 Executive', '17=17 Executive'), ('18=18 Food Service', '18=18 Food Service'), ('19=19 Government', '19=19 Government'), ('20=20 Grocery', '20=20 Grocery'), ('21=21 Healthcare', '21=21 Healthcare'), ('22=22 Hospitality', '22=22 Hospitality'), ('23=23 Human Resources', '23=23 Human Resources'), ('24=24 Information Technology', '24=24 Information Technology'), ('25=25 Insurance', '25=25 Insurance'), ('26=26 Law/Legal', '26=26 Law/Legal'), ('27=27 Management', '27=27 Management'), ('28=28 Manufacturing', '28=28 Manufacturing'), ('29=29 Marketing', '29=29 Marketing'), ('30=30 Pharmaceutical', '30=30 Pharmaceutical'), ('31=31 Professional Services', '31=31 Professional Services'), ('32=32 Purchasing', '32=32 Purchasing'), ('33=33 Quality Assurance (QA)', '33=33 Quality Assurance (QA)'), ('34=34 Research', '34=34 Research'), ('35=35 Restaurant', '35=35 Restaurant'), ('36=36 Retail', '36=36 Retail'), ('37=37 Sales', '37=37 Sales'), ('38=38 Science', '38=38 Science'), ('39=39 Security/Law Enforcement', '39=39 Security/Law Enforcement'), ('40=40 Shipping/Distribution', '40=40 Shipping/Distribution'), ('41=41 Strategy', '41=41 Strategy'), ('42=42 Student', '42=42 Student'), ('43=43 Telecommunications', '43=43 Telecommunications'), ('44=44 Training', '44=44 Training'), ('45=45 Transportation', '45=45 Transportation'), ('46=46 Warehouse', '46=46 Warehouse'), ('47=47 Other', '47=47 Other'), ('99=99 Unknown/Refused', '99=99 Unknown/Refused')], help_text='most frequ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='host_phenotype',
            field=models.CharField(blank=True, help_text='phenotype ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='host_pulse',
            field=models.CharField(blank=True, help_text='resting pu', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='host_sex',
            field=models.CharField(blank=True, choices=[('female', 'female'), ('hermaphrodite', 'hermaphrodite'), ('male', 'male'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('neuter', 'neuter'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('other', 'other'), ('restricted access', 'restricted access')], help_text='Gender or ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='host_subject_id',
            field=models.CharField(blank=True, help_text='a unique i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='host_total_mass',
            field=models.CharField(blank=True, help_text='total mass', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='isolation_and_growth_condition',
            field=models.CharField(blank=True, help_text='Publicatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='known_pathogenicity',
            field=models.CharField(blank=True, help_text='To what is', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='library_construction_method',
            field=models.CharField(blank=True, help_text='Library co', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='library_reads_sequenced',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='library_screening_strategy',
            field=models.CharField(blank=True, help_text='Specific e', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='library_size',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='library_vector',
            field=models.CharField(blank=True, help_text='Cloning ve', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='local_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='medical_history_performed',
            field=models.CharField(blank=True, choices=[('No', 'No'), ('Yes', 'Yes')], help_text='whether fu', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='multiplex_identifiers',
            field=models.CharField(blank=True, help_text='Molecular ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='negative_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='nucleic_acid_amplification',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='nucleic_acid_extraction',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='number_of_replicons',
            field=models.CharField(blank=True, help_text='Reports th', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='observed_biotic_relationship',
            field=models.CharField(blank=True, choices=[('commensal', 'commensal'), ('free living', 'free living'), ('mutualism', 'mutualism'), ('parasite', 'parasite'), ('symbiont', 'symbiont')], help_text='Is it free', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='organism_count',
            field=models.CharField(blank=True, help_text='Total cell', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='oxygenation_status_of_sample',
            field=models.CharField(blank=True, choices=[('aerobic', 'aerobic'), ('anaerobic', 'anaerobic')], help_text='oxygenatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='pcr_conditions',
            field=models.CharField(blank=True, help_text='Descriptio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='pcr_primers',
            field=models.CharField(blank=True, help_text='PCR primer', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='perturbation',
            field=models.CharField(blank=True, help_text='type of pe', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='ploidy',
            field=models.CharField(blank=True, help_text='The ploidy', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='positive_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='project_name',
            field=models.CharField(blank=True, help_text='Name of th', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='propagation',
            field=models.CharField(blank=True, help_text='The type o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='reference_for_biomaterial',
            field=models.CharField(blank=True, help_text='Primary pu', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='relationship_to_oxygen',
            field=models.CharField(blank=True, choices=[('aerobe', 'aerobe'), ('anaerobe', 'anaerobe'), ('facultative', 'facultative'), ('microaerophilic', 'microaerophilic'), ('microanaerobe', 'microanaerobe'), ('obligate aerobe', 'obligate aerobe'), ('obligate anaerobe', 'obligate anaerobe')], help_text='Is this or', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='relevant_electronic_resources',
            field=models.CharField(blank=True, help_text='A related ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='relevant_standard_operating_procedures',
            field=models.CharField(blank=True, help_text='Standard o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='salinity',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='sample_collection_device',
            field=models.CharField(blank=True, help_text='The device', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='sample_collection_method',
            field=models.CharField(blank=True, help_text='The method', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='sample_material_processing',
            field=models.CharField(blank=True, help_text='A brief de', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='sample_storage_duration',
            field=models.CharField(blank=True, help_text='duration f', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='sample_storage_location',
            field=models.CharField(blank=True, help_text='location a', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, help_text='Volume (ml', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='sequence_quality_check',
            field=models.CharField(blank=True, choices=[('manual', 'manual'), ('none', 'none'), ('software', 'software')], help_text='Indicate i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='sequencing_method',
            field=models.CharField(blank=True, help_text='Sequencing', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='source_material_identifiers',
            field=models.CharField(blank=True, help_text='A unique i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='subspecific_genetic_lineage',
            field=models.CharField(blank=True, help_text='Informatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='target_gene',
            field=models.CharField(blank=True, help_text='Targeted g', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='target_subfragment',
            field=models.CharField(blank=True, help_text='Name of su', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral',
            name='trophic_level',
            field=models.CharField(blank=True, choices=[('autotroph', 'autotroph'), ('carboxydotroph', 'carboxydotroph'), ('chemoautotroph', 'chemoautotroph'), ('chemoheterotroph', 'chemoheterotroph'), ('chemolithoautotroph', 'chemolithoautotroph'), ('chemolithotroph', 'chemolithotroph'), ('chemoorganoheterotroph', 'chemoorganoheterotroph'), ('chemoorganotroph', 'chemoorganotroph'), ('chemosynthetic', 'chemosynthetic'), ('chemotroph', 'chemotroph'), ('copiotroph', 'copiotroph'), ('diazotroph', 'diazotroph'), ('facultative autotroph', 'facultative autotroph'), ('heterotroph', 'heterotroph'), ('lithoautotroph', 'lithoautotroph'), ('lithoheterotroph', 'lithoheterotroph'), ('lithotroph', 'lithotroph'), ('methanotroph', 'methanotroph'), ('methylotroph', 'methylotroph'), ('mixotroph', 'mixotroph'), ('obligate chemoautolithotroph', 'obligate chemoautolithotroph'), ('oligotroph', 'oligotroph'), ('organoheterotroph', 'organoheterotroph'), ('organotroph', 'organotroph'), ('photoautotroph', 'photoautotroph'), ('photoheterotroph', 'photoheterotroph'), ('photolithoautotroph', 'photolithoautotroph'), ('photolithotroph', 'photolithotroph'), ('photosynthetic', 'photosynthetic'), ('phototroph', 'phototroph')], help_text='Trophic le', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral_unit',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, choices=[('L', 'L'), ('g', 'g'), ('kg', 'kg'), ('m2', 'm2'), ('m3', 'm3')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral_unit',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral_unit',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral_unit',
            name='host_age',
            field=models.CharField(blank=True, choices=[('centuries', 'centuries'), ('days', 'days'), ('decades', 'decades'), ('hours', 'hours'), ('minutes', 'minutes'), ('months', 'months'), ('seconds', 'seconds'), ('weeks', 'weeks'), ('years', 'years')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral_unit',
            name='host_body_mass_index',
            field=models.CharField(blank=True, choices=[('kg/m2', 'kg/m2')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral_unit',
            name='host_body_temperature',
            field=models.CharField(blank=True, choices=[('ºC', 'ºC')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral_unit',
            name='host_height',
            field=models.CharField(blank=True, choices=[('cm', 'cm'), ('m', 'm'), ('mm', 'mm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral_unit',
            name='host_pulse',
            field=models.CharField(blank=True, choices=[('bpm', 'bpm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral_unit',
            name='host_total_mass',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('kg', 'kg')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral_unit',
            name='salinity',
            field=models.CharField(blank=True, choices=[('psu', 'psu')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral_unit',
            name='sample_storage_duration',
            field=models.CharField(blank=True, choices=[('days', 'days'), ('hours', 'hours'), ('months', 'months'), ('weeks', 'weeks'), ('years', 'years')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral_unit',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, choices=[('°C', '°C')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral_unit',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('mL', 'mL'), ('mg', 'mg'), ('ng', 'ng')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_oral_unit',
            name='temperature',
            field=models.CharField(blank=True, choices=[('ºC', 'ºC')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='adapters',
            field=models.CharField(blank=True, help_text='Adapters p', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='annotation_source',
            field=models.CharField(blank=True, help_text='For cases ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='broad_scale_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='chemical_administration',
            field=models.CharField(blank=True, help_text='list of ch', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='chimera_check_software',
            field=models.CharField(blank=True, help_text='Tool(s) us', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='collection_date',
            field=models.CharField(blank=True, help_text='The date t', max_length=120, validators=[django.core.validators.RegexValidator('(^[12][0-9]{3}(-(0[1-9]|1[0-2])(-(0[1-9]|[12][0-9]|3[01])(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?(/[0-9]{4}(-[0-9]{2}(-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?)?$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='encoded_traits',
            field=models.CharField(blank=True, help_text='Should inc', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='environmental_medium',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='estimated_size',
            field=models.CharField(blank=True, help_text='The estima', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='experimental_factor',
            field=models.CharField(blank=True, help_text='Experiment', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='extrachromosomal_elements',
            field=models.CharField(blank=True, help_text='Do plasmid', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='geographic_location_country_and_or_sea',
            field=models.CharField(blank=True, choices=[('Afghanistan', 'Afghanistan'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Arctic Ocean', 'Arctic Ocean'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Ashmore and Cartier Islands', 'Ashmore and Cartier Islands'), ('Atlantic Ocean', 'Atlantic Ocean'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Baker Island', 'Baker Island'), ('Baltic Sea', 'Baltic Sea'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Bassas da India', 'Bassas da India'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia', 'Bolivia'), ('Borneo', 'Borneo'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Virgin Islands', 'British Virgin Islands'), ('Brunei', 'Brunei'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Canada', 'Canada'), ('Cape Verde', 'Cape Verde'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Clipperton Island', 'Clipperton Island'), ('Cocos Islands', 'Cocos Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Cook Islands', 'Cook Islands'), ('Coral Sea Islands', 'Coral Sea Islands'), ('Costa Rica', 'Costa Rica'), ("Cote d'Ivoire", "Cote d'Ivoire"), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Curacao', 'Curacao'), ('Cyprus', 'Cyprus'), ('Czech Republic', 'Czech Republic'), ('Democratic Republic of the Congo', 'Democratic Republic of the Congo'), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('East Timor', 'East Timor'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Ethiopia', 'Ethiopia'), ('Europa Island', 'Europa Island'), ('Falkland Islands (Islas Malvinas)', 'Falkland Islands (Islas Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern and Antarctic Lands', 'French Southern and Antarctic Lands'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Gaza Strip', 'Gaza Strip'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Glorioso Islands', 'Glorioso Islands'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and McDonald Islands', 'Heard Island and McDonald Islands'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Howland Island', 'Howland Island'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indian Ocean', 'Indian Ocean'), ('Indonesia', 'Indonesia'), ('Iran', 'Iran'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Jan Mayen', 'Jan Mayen'), ('Japan', 'Japan'), ('Jarvis Island', 'Jarvis Island'), ('Jersey', 'Jersey'), ('Johnston Atoll', 'Johnston Atoll'), ('Jordan', 'Jordan'), ('Juan de Nova Island', 'Juan de Nova Island'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kerguelen Archipelago', 'Kerguelen Archipelago'), ('Kingman Reef', 'Kingman Reef'), ('Kiribati', 'Kiribati'), ('Kosovo', 'Kosovo'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), ('Laos', 'Laos'), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macau', 'Macau'), ('Macedonia', 'Macedonia'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Mediterranean Sea', 'Mediterranean Sea'), ('Mexico', 'Mexico'), ('Micronesia', 'Micronesia'), ('Midway Islands', 'Midway Islands'), ('Moldova', 'Moldova'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Navassa Island', 'Navassa Island'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('North Korea', 'North Korea'), ('North Sea', 'North Sea'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pacific Ocean', 'Pacific Ocean'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palmyra Atoll', 'Palmyra Atoll'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paracel Islands', 'Paracel Islands'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn Islands', 'Pitcairn Islands'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Republic of the Congo', 'Republic of the Congo'), ('Reunion', 'Reunion'), ('Romania', 'Romania'), ('Ross Sea', 'Ross Sea'), ('Russia', 'Russia'), ('Rwanda', 'Rwanda'), ('Saint Helena', 'Saint Helena'), ('Saint Kitts and Nevis', 'Saint Kitts and Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Pierre and Miquelon', 'Saint Pierre and Miquelon'), ('Saint Vincent and the Grenadines', 'Saint Vincent and the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Sint Maarten', 'Sint Maarten'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia and the South Sandwich Islands', 'South Georgia and the South Sandwich Islands'), ('South Korea', 'South Korea'), ('Southern Ocean', 'Southern Ocean'), ('Spain', 'Spain'), ('Spratly Islands', 'Spratly Islands'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard', 'Svalbard'), ('Swaziland', 'Swaziland'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syria', 'Syria'), ('Taiwan', 'Taiwan'), ('Tajikistan', 'Tajikistan'), ('Tanzania', 'Tanzania'), ('Tasman Sea', 'Tasman Sea'), ('Thailand', 'Thailand'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad and Tobago', 'Trinidad and Tobago'), ('Tromelin Island', 'Tromelin Island'), ('Tunisia', 'Tunisia'), ('Turkey', 'Turkey'), ('Turkmenistan', 'Turkmenistan'), ('Turks and Caicos Islands', 'Turks and Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('USA', 'USA'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela', 'Venezuela'), ('Viet Nam', 'Viet Nam'), ('Virgin Islands', 'Virgin Islands'), ('Wake Island', 'Wake Island'), ('Wallis and Futuna', 'Wallis and Futuna'), ('West Bank', 'West Bank'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('restricted access', 'restricted access')], help_text='The locati', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='geographic_location_region_and_locality',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='host_disease_status',
            field=models.CharField(blank=True, help_text='list of di', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='isolation_and_growth_condition',
            field=models.CharField(blank=True, help_text='Publicatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='known_pathogenicity',
            field=models.CharField(blank=True, help_text='To what is', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='library_construction_method',
            field=models.CharField(blank=True, help_text='Library co', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='library_reads_sequenced',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='library_screening_strategy',
            field=models.CharField(blank=True, help_text='Specific e', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='library_size',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='library_vector',
            field=models.CharField(blank=True, help_text='Cloning ve', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='local_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='multiplex_identifiers',
            field=models.CharField(blank=True, help_text='Molecular ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='negative_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='nucleic_acid_amplification',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='nucleic_acid_extraction',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='number_of_replicons',
            field=models.CharField(blank=True, help_text='Reports th', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='observed_biotic_relationship',
            field=models.CharField(blank=True, choices=[('commensal', 'commensal'), ('free living', 'free living'), ('mutualism', 'mutualism'), ('parasite', 'parasite'), ('symbiont', 'symbiont')], help_text='Is it free', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='organism_count',
            field=models.CharField(blank=True, help_text='Total cell', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='oxygenation_status_of_sample',
            field=models.CharField(blank=True, choices=[('aerobic', 'aerobic'), ('anaerobic', 'anaerobic')], help_text='oxygenatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='pcr_conditions',
            field=models.CharField(blank=True, help_text='Descriptio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='pcr_primers',
            field=models.CharField(blank=True, help_text='PCR primer', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='perturbation',
            field=models.CharField(blank=True, help_text='type of pe', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='ploidy',
            field=models.CharField(blank=True, help_text='The ploidy', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='positive_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='project_name',
            field=models.CharField(blank=True, help_text='Name of th', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='propagation',
            field=models.CharField(blank=True, help_text='The type o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='reference_for_biomaterial',
            field=models.CharField(blank=True, help_text='Primary pu', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='relationship_to_oxygen',
            field=models.CharField(blank=True, choices=[('aerobe', 'aerobe'), ('anaerobe', 'anaerobe'), ('facultative', 'facultative'), ('microaerophilic', 'microaerophilic'), ('microanaerobe', 'microanaerobe'), ('obligate aerobe', 'obligate aerobe'), ('obligate anaerobe', 'obligate anaerobe')], help_text='Is this or', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='relevant_electronic_resources',
            field=models.CharField(blank=True, help_text='A related ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='relevant_standard_operating_procedures',
            field=models.CharField(blank=True, help_text='Standard o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='salinity',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='sample_collection_device',
            field=models.CharField(blank=True, help_text='The device', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='sample_collection_method',
            field=models.CharField(blank=True, help_text='The method', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='sample_material_processing',
            field=models.CharField(blank=True, help_text='A brief de', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='sample_storage_duration',
            field=models.CharField(blank=True, help_text='duration f', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='sample_storage_location',
            field=models.CharField(blank=True, help_text='location a', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, help_text='Volume (ml', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='sequence_quality_check',
            field=models.CharField(blank=True, choices=[('manual', 'manual'), ('none', 'none'), ('software', 'software')], help_text='Indicate i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='sequencing_method',
            field=models.CharField(blank=True, help_text='Sequencing', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='source_material_identifiers',
            field=models.CharField(blank=True, help_text='A unique i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='subspecific_genetic_lineage',
            field=models.CharField(blank=True, help_text='Informatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='target_gene',
            field=models.CharField(blank=True, help_text='Targeted g', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='target_subfragment',
            field=models.CharField(blank=True, help_text='Name of su', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin',
            name='trophic_level',
            field=models.CharField(blank=True, choices=[('autotroph', 'autotroph'), ('carboxydotroph', 'carboxydotroph'), ('chemoautotroph', 'chemoautotroph'), ('chemoheterotroph', 'chemoheterotroph'), ('chemolithoautotroph', 'chemolithoautotroph'), ('chemolithotroph', 'chemolithotroph'), ('chemoorganoheterotroph', 'chemoorganoheterotroph'), ('chemoorganotroph', 'chemoorganotroph'), ('chemosynthetic', 'chemosynthetic'), ('chemotroph', 'chemotroph'), ('copiotroph', 'copiotroph'), ('diazotroph', 'diazotroph'), ('facultative autotroph', 'facultative autotroph'), ('heterotroph', 'heterotroph'), ('lithoautotroph', 'lithoautotroph'), ('lithoheterotroph', 'lithoheterotroph'), ('lithotroph', 'lithotroph'), ('methanotroph', 'methanotroph'), ('methylotroph', 'methylotroph'), ('mixotroph', 'mixotroph'), ('obligate chemoautolithotroph', 'obligate chemoautolithotroph'), ('oligotroph', 'oligotroph'), ('organoheterotroph', 'organoheterotroph'), ('organotroph', 'organotroph'), ('photoautotroph', 'photoautotroph'), ('photoheterotroph', 'photoheterotroph'), ('photolithoautotroph', 'photolithoautotroph'), ('photolithotroph', 'photolithotroph'), ('photosynthetic', 'photosynthetic'), ('phototroph', 'phototroph')], help_text='Trophic le', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin_unit',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, choices=[('L', 'L'), ('g', 'g'), ('kg', 'kg'), ('m2', 'm2'), ('m3', 'm3')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin_unit',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin_unit',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin_unit',
            name='salinity',
            field=models.CharField(blank=True, choices=[('psu', 'psu')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin_unit',
            name='sample_storage_duration',
            field=models.CharField(blank=True, choices=[('days', 'days'), ('hours', 'hours'), ('months', 'months'), ('weeks', 'weeks'), ('years', 'years')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin_unit',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, choices=[('°C', '°C')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin_unit',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('mL', 'mL'), ('mg', 'mg'), ('ng', 'ng')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_skin_unit',
            name='temperature',
            field=models.CharField(blank=True, choices=[('ºC', 'ºC')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='IHMC_medication_code',
            field=models.CharField(blank=True, choices=[('01=1=Analgesics/NSAIDS', '01=1=Analgesics/NSAIDS'), ('02=2=Anesthetics', '02=2=Anesthetics'), ('03=3=Antacids/H2 antagonists', '03=3=Antacids/H2 antagonists'), ('04=4=Anti-acne', '04=4=Anti-acne'), ('05=5=Anti-asthma/bronchodilators', '05=5=Anti-asthma/bronchodilators'), ('06=6=Anti-cholesterol/Anti-hyperlipidemic', '06=6=Anti-cholesterol/Anti-hyperlipidemic'), ('07=7=Anti-coagulants', '07=7=Anti-coagulants'), ('08=8=Antibiotics/(anti)-infectives, parasitics, microbials', '08=8=Antibiotics/(anti)-infectives, parasitics, microbials'), ('09=9=Antidepressants/mood-altering drugs', '09=9=Antidepressants/mood-altering drugs'), ('10=10=Antihistamines/ Decongestants', '10=10=Antihistamines/ Decongestants'), ('11=11=Antihypertensives', '11=11=Antihypertensives'), ('12=12=Cardiovascular, other than hyperlipidemic/HTN', '12=12=Cardiovascular, other than hyperlipidemic/HTN'), ('13=13=Contraceptives (oral, implant, injectable)', '13=13=Contraceptives (oral, implant, injectable)'), ('14=14=Emergency/support medications', '14=14=Emergency/support medications'), ('15=15=Endocrine/Metabolic agents', '15=15=Endocrine/Metabolic agents'), ('16=16=GI meds (anti-diarrheal, emetic, spasmodics)', '16=16=GI meds (anti-diarrheal, emetic, spasmodics)'), ('17=17=Herbal/homeopathic products', '17=17=Herbal/homeopathic products'), ('18=18=Hormones/steroids', '18=18=Hormones/steroids'), ('19=19=OTC cold & flu', '19=19=OTC cold & flu'), ('20=20=Vaccine prophylaxis', '20=20=Vaccine prophylaxis'), ('21=21=Vitamins, minerals, food supplements', '21=21=Vitamins, minerals, food supplements'), ('99=99=Other', '99=99=Other')], help_text='can includ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='adapters',
            field=models.CharField(blank=True, help_text='Adapters p', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='annotation_source',
            field=models.CharField(blank=True, help_text='For cases ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='broad_scale_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='chemical_administration',
            field=models.CharField(blank=True, help_text='list of ch', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='chimera_check_software',
            field=models.CharField(blank=True, help_text='Tool(s) us', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='collection_date',
            field=models.CharField(blank=True, help_text='The date t', max_length=120, validators=[django.core.validators.RegexValidator('(^[12][0-9]{3}(-(0[1-9]|1[0-2])(-(0[1-9]|[12][0-9]|3[01])(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?(/[0-9]{4}(-[0-9]{2}(-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?)?$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='encoded_traits',
            field=models.CharField(blank=True, help_text='Should inc', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='environmental_medium',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='estimated_size',
            field=models.CharField(blank=True, help_text='The estima', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='ethnicity',
            field=models.CharField(blank=True, help_text='A category', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='experimental_factor',
            field=models.CharField(blank=True, help_text='Experiment', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='extrachromosomal_elements',
            field=models.CharField(blank=True, help_text='Do plasmid', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='geographic_location_country_and_or_sea',
            field=models.CharField(blank=True, choices=[('Afghanistan', 'Afghanistan'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Arctic Ocean', 'Arctic Ocean'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Ashmore and Cartier Islands', 'Ashmore and Cartier Islands'), ('Atlantic Ocean', 'Atlantic Ocean'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Baker Island', 'Baker Island'), ('Baltic Sea', 'Baltic Sea'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Bassas da India', 'Bassas da India'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia', 'Bolivia'), ('Borneo', 'Borneo'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Virgin Islands', 'British Virgin Islands'), ('Brunei', 'Brunei'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Canada', 'Canada'), ('Cape Verde', 'Cape Verde'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Clipperton Island', 'Clipperton Island'), ('Cocos Islands', 'Cocos Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Cook Islands', 'Cook Islands'), ('Coral Sea Islands', 'Coral Sea Islands'), ('Costa Rica', 'Costa Rica'), ("Cote d'Ivoire", "Cote d'Ivoire"), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Curacao', 'Curacao'), ('Cyprus', 'Cyprus'), ('Czech Republic', 'Czech Republic'), ('Democratic Republic of the Congo', 'Democratic Republic of the Congo'), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('East Timor', 'East Timor'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Ethiopia', 'Ethiopia'), ('Europa Island', 'Europa Island'), ('Falkland Islands (Islas Malvinas)', 'Falkland Islands (Islas Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern and Antarctic Lands', 'French Southern and Antarctic Lands'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Gaza Strip', 'Gaza Strip'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Glorioso Islands', 'Glorioso Islands'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and McDonald Islands', 'Heard Island and McDonald Islands'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Howland Island', 'Howland Island'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indian Ocean', 'Indian Ocean'), ('Indonesia', 'Indonesia'), ('Iran', 'Iran'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Jan Mayen', 'Jan Mayen'), ('Japan', 'Japan'), ('Jarvis Island', 'Jarvis Island'), ('Jersey', 'Jersey'), ('Johnston Atoll', 'Johnston Atoll'), ('Jordan', 'Jordan'), ('Juan de Nova Island', 'Juan de Nova Island'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kerguelen Archipelago', 'Kerguelen Archipelago'), ('Kingman Reef', 'Kingman Reef'), ('Kiribati', 'Kiribati'), ('Kosovo', 'Kosovo'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), ('Laos', 'Laos'), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macau', 'Macau'), ('Macedonia', 'Macedonia'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Mediterranean Sea', 'Mediterranean Sea'), ('Mexico', 'Mexico'), ('Micronesia', 'Micronesia'), ('Midway Islands', 'Midway Islands'), ('Moldova', 'Moldova'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Navassa Island', 'Navassa Island'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('North Korea', 'North Korea'), ('North Sea', 'North Sea'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pacific Ocean', 'Pacific Ocean'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palmyra Atoll', 'Palmyra Atoll'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paracel Islands', 'Paracel Islands'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn Islands', 'Pitcairn Islands'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Republic of the Congo', 'Republic of the Congo'), ('Reunion', 'Reunion'), ('Romania', 'Romania'), ('Ross Sea', 'Ross Sea'), ('Russia', 'Russia'), ('Rwanda', 'Rwanda'), ('Saint Helena', 'Saint Helena'), ('Saint Kitts and Nevis', 'Saint Kitts and Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Pierre and Miquelon', 'Saint Pierre and Miquelon'), ('Saint Vincent and the Grenadines', 'Saint Vincent and the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Sint Maarten', 'Sint Maarten'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia and the South Sandwich Islands', 'South Georgia and the South Sandwich Islands'), ('South Korea', 'South Korea'), ('Southern Ocean', 'Southern Ocean'), ('Spain', 'Spain'), ('Spratly Islands', 'Spratly Islands'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard', 'Svalbard'), ('Swaziland', 'Swaziland'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syria', 'Syria'), ('Taiwan', 'Taiwan'), ('Tajikistan', 'Tajikistan'), ('Tanzania', 'Tanzania'), ('Tasman Sea', 'Tasman Sea'), ('Thailand', 'Thailand'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad and Tobago', 'Trinidad and Tobago'), ('Tromelin Island', 'Tromelin Island'), ('Tunisia', 'Tunisia'), ('Turkey', 'Turkey'), ('Turkmenistan', 'Turkmenistan'), ('Turks and Caicos Islands', 'Turks and Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('USA', 'USA'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela', 'Venezuela'), ('Viet Nam', 'Viet Nam'), ('Virgin Islands', 'Virgin Islands'), ('Wake Island', 'Wake Island'), ('Wallis and Futuna', 'Wallis and Futuna'), ('West Bank', 'West Bank'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('restricted access', 'restricted access')], help_text='The locati', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='geographic_location_region_and_locality',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='host_age',
            field=models.CharField(blank=True, help_text='age of hos', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='host_body_mass_index',
            field=models.CharField(blank=True, help_text='body mass ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='host_body_product',
            field=models.CharField(blank=True, help_text='substance ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='host_body_site',
            field=models.CharField(blank=True, help_text='name of bo', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='host_body_temperature',
            field=models.CharField(blank=True, help_text='core body ', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='host_diet',
            field=models.CharField(blank=True, help_text='type of di', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='host_disease_status',
            field=models.CharField(blank=True, help_text='list of di', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='host_family_relationship',
            field=models.CharField(blank=True, help_text='relationsh', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='host_genotype',
            field=models.CharField(blank=True, help_text='observed g', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='host_height',
            field=models.CharField(blank=True, help_text='the height', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='host_last_meal',
            field=models.CharField(blank=True, help_text='content of', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='host_occupation',
            field=models.CharField(blank=True, choices=[('01=01 Accounting/Finance', '01=01 Accounting/Finance'), ('02=02 Advertising/Public Relations', '02=02 Advertising/Public Relations'), ('03=03 Arts/Entertainment/Publishing', '03=03 Arts/Entertainment/Publishing'), ('04=04 Automotive', '04=04 Automotive'), ('05=05 Banking/ Mortgage', '05=05 Banking/ Mortgage'), ('06=06 Biotech', '06=06 Biotech'), ('07=07 Broadcast/Journalism', '07=07 Broadcast/Journalism'), ('08=08 Business Development', '08=08 Business Development'), ('09=09 Clerical/Administrative', '09=09 Clerical/Administrative'), ('10=10 Construction/Trades', '10=10 Construction/Trades'), ('11=11 Consultant', '11=11 Consultant'), ('12=12 Customer Services', '12=12 Customer Services'), ('13=13 Design', '13=13 Design'), ('14=14 Education', '14=14 Education'), ('15=15 Engineering', '15=15 Engineering'), ('16=16 Entry Level', '16=16 Entry Level'), ('17=17 Executive', '17=17 Executive'), ('18=18 Food Service', '18=18 Food Service'), ('19=19 Government', '19=19 Government'), ('20=20 Grocery', '20=20 Grocery'), ('21=21 Healthcare', '21=21 Healthcare'), ('22=22 Hospitality', '22=22 Hospitality'), ('23=23 Human Resources', '23=23 Human Resources'), ('24=24 Information Technology', '24=24 Information Technology'), ('25=25 Insurance', '25=25 Insurance'), ('26=26 Law/Legal', '26=26 Law/Legal'), ('27=27 Management', '27=27 Management'), ('28=28 Manufacturing', '28=28 Manufacturing'), ('29=29 Marketing', '29=29 Marketing'), ('30=30 Pharmaceutical', '30=30 Pharmaceutical'), ('31=31 Professional Services', '31=31 Professional Services'), ('32=32 Purchasing', '32=32 Purchasing'), ('33=33 Quality Assurance (QA)', '33=33 Quality Assurance (QA)'), ('34=34 Research', '34=34 Research'), ('35=35 Restaurant', '35=35 Restaurant'), ('36=36 Retail', '36=36 Retail'), ('37=37 Sales', '37=37 Sales'), ('38=38 Science', '38=38 Science'), ('39=39 Security/Law Enforcement', '39=39 Security/Law Enforcement'), ('40=40 Shipping/Distribution', '40=40 Shipping/Distribution'), ('41=41 Strategy', '41=41 Strategy'), ('42=42 Student', '42=42 Student'), ('43=43 Telecommunications', '43=43 Telecommunications'), ('44=44 Training', '44=44 Training'), ('45=45 Transportation', '45=45 Transportation'), ('46=46 Warehouse', '46=46 Warehouse'), ('47=47 Other', '47=47 Other'), ('99=99 Unknown/Refused', '99=99 Unknown/Refused')], help_text='most frequ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='host_phenotype',
            field=models.CharField(blank=True, help_text='phenotype ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='host_pulse',
            field=models.CharField(blank=True, help_text='resting pu', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='host_sex',
            field=models.CharField(blank=True, choices=[('female', 'female'), ('hermaphrodite', 'hermaphrodite'), ('male', 'male'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('neuter', 'neuter'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('other', 'other'), ('restricted access', 'restricted access')], help_text='Gender or ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='host_subject_id',
            field=models.CharField(blank=True, help_text='a unique i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='host_total_mass',
            field=models.CharField(blank=True, help_text='total mass', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='isolation_and_growth_condition',
            field=models.CharField(blank=True, help_text='Publicatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='known_pathogenicity',
            field=models.CharField(blank=True, help_text='To what is', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='library_construction_method',
            field=models.CharField(blank=True, help_text='Library co', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='library_reads_sequenced',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='library_screening_strategy',
            field=models.CharField(blank=True, help_text='Specific e', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='library_size',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='library_vector',
            field=models.CharField(blank=True, help_text='Cloning ve', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='local_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='medical_history_performed',
            field=models.CharField(blank=True, choices=[('No', 'No'), ('Yes', 'Yes')], help_text='whether fu', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='multiplex_identifiers',
            field=models.CharField(blank=True, help_text='Molecular ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='negative_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='nucleic_acid_amplification',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='nucleic_acid_extraction',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='number_of_replicons',
            field=models.CharField(blank=True, help_text='Reports th', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='observed_biotic_relationship',
            field=models.CharField(blank=True, choices=[('commensal', 'commensal'), ('free living', 'free living'), ('mutualism', 'mutualism'), ('parasite', 'parasite'), ('symbiont', 'symbiont')], help_text='Is it free', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='organism_count',
            field=models.CharField(blank=True, help_text='Total cell', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='oxygenation_status_of_sample',
            field=models.CharField(blank=True, choices=[('aerobic', 'aerobic'), ('anaerobic', 'anaerobic')], help_text='oxygenatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='pcr_conditions',
            field=models.CharField(blank=True, help_text='Descriptio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='pcr_primers',
            field=models.CharField(blank=True, help_text='PCR primer', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='perturbation',
            field=models.CharField(blank=True, help_text='type of pe', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='ploidy',
            field=models.CharField(blank=True, help_text='The ploidy', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='positive_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='project_name',
            field=models.CharField(blank=True, help_text='Name of th', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='propagation',
            field=models.CharField(blank=True, help_text='The type o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='reference_for_biomaterial',
            field=models.CharField(blank=True, help_text='Primary pu', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='relationship_to_oxygen',
            field=models.CharField(blank=True, choices=[('aerobe', 'aerobe'), ('anaerobe', 'anaerobe'), ('facultative', 'facultative'), ('microaerophilic', 'microaerophilic'), ('microanaerobe', 'microanaerobe'), ('obligate aerobe', 'obligate aerobe'), ('obligate anaerobe', 'obligate anaerobe')], help_text='Is this or', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='relevant_electronic_resources',
            field=models.CharField(blank=True, help_text='A related ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='relevant_standard_operating_procedures',
            field=models.CharField(blank=True, help_text='Standard o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='salinity',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='sample_collection_device',
            field=models.CharField(blank=True, help_text='The device', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='sample_collection_method',
            field=models.CharField(blank=True, help_text='The method', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='sample_material_processing',
            field=models.CharField(blank=True, help_text='A brief de', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='sample_storage_duration',
            field=models.CharField(blank=True, help_text='duration f', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='sample_storage_location',
            field=models.CharField(blank=True, help_text='location a', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, help_text='Volume (ml', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='sequence_quality_check',
            field=models.CharField(blank=True, choices=[('manual', 'manual'), ('none', 'none'), ('software', 'software')], help_text='Indicate i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='sequencing_method',
            field=models.CharField(blank=True, help_text='Sequencing', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='source_material_identifiers',
            field=models.CharField(blank=True, help_text='A unique i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='subspecific_genetic_lineage',
            field=models.CharField(blank=True, help_text='Informatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='target_gene',
            field=models.CharField(blank=True, help_text='Targeted g', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='target_subfragment',
            field=models.CharField(blank=True, help_text='Name of su', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal',
            name='trophic_level',
            field=models.CharField(blank=True, choices=[('autotroph', 'autotroph'), ('carboxydotroph', 'carboxydotroph'), ('chemoautotroph', 'chemoautotroph'), ('chemoheterotroph', 'chemoheterotroph'), ('chemolithoautotroph', 'chemolithoautotroph'), ('chemolithotroph', 'chemolithotroph'), ('chemoorganoheterotroph', 'chemoorganoheterotroph'), ('chemoorganotroph', 'chemoorganotroph'), ('chemosynthetic', 'chemosynthetic'), ('chemotroph', 'chemotroph'), ('copiotroph', 'copiotroph'), ('diazotroph', 'diazotroph'), ('facultative autotroph', 'facultative autotroph'), ('heterotroph', 'heterotroph'), ('lithoautotroph', 'lithoautotroph'), ('lithoheterotroph', 'lithoheterotroph'), ('lithotroph', 'lithotroph'), ('methanotroph', 'methanotroph'), ('methylotroph', 'methylotroph'), ('mixotroph', 'mixotroph'), ('obligate chemoautolithotroph', 'obligate chemoautolithotroph'), ('oligotroph', 'oligotroph'), ('organoheterotroph', 'organoheterotroph'), ('organotroph', 'organotroph'), ('photoautotroph', 'photoautotroph'), ('photoheterotroph', 'photoheterotroph'), ('photolithoautotroph', 'photolithoautotroph'), ('photolithotroph', 'photolithotroph'), ('photosynthetic', 'photosynthetic'), ('phototroph', 'phototroph')], help_text='Trophic le', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal_unit',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, choices=[('L', 'L'), ('g', 'g'), ('kg', 'kg'), ('m2', 'm2'), ('m3', 'm3')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal_unit',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal_unit',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal_unit',
            name='host_age',
            field=models.CharField(blank=True, choices=[('centuries', 'centuries'), ('days', 'days'), ('decades', 'decades'), ('hours', 'hours'), ('minutes', 'minutes'), ('months', 'months'), ('seconds', 'seconds'), ('weeks', 'weeks'), ('years', 'years')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal_unit',
            name='host_body_mass_index',
            field=models.CharField(blank=True, choices=[('kg/m2', 'kg/m2')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal_unit',
            name='host_body_temperature',
            field=models.CharField(blank=True, choices=[('ºC', 'ºC')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal_unit',
            name='host_height',
            field=models.CharField(blank=True, choices=[('cm', 'cm'), ('m', 'm'), ('mm', 'mm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal_unit',
            name='host_pulse',
            field=models.CharField(blank=True, choices=[('bpm', 'bpm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal_unit',
            name='host_total_mass',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('kg', 'kg')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal_unit',
            name='salinity',
            field=models.CharField(blank=True, choices=[('psu', 'psu')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal_unit',
            name='sample_storage_duration',
            field=models.CharField(blank=True, choices=[('days', 'days'), ('hours', 'hours'), ('months', 'months'), ('weeks', 'weeks'), ('years', 'years')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal_unit',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, choices=[('°C', '°C')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal_unit',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('mL', 'mL'), ('mg', 'mg'), ('ng', 'ng')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_human_vaginal_unit',
            name='temperature',
            field=models.CharField(blank=True, choices=[('ºC', 'ºC')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='adapters',
            field=models.CharField(blank=True, help_text='Adapters p', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='alkalinity',
            field=models.CharField(blank=True, help_text='alkalinity', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='alkyl_diethers',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='altitude',
            field=models.CharField(blank=True, help_text='The altitu', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='aminopeptidase_activity',
            field=models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='ammonium',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='annotation_source',
            field=models.CharField(blank=True, help_text='For cases ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='bacterial_carbon_production',
            field=models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='biomass',
            field=models.CharField(blank=True, help_text='amount of ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='bishomohopanol',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='broad_scale_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='bromide',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='calcium',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='carbon_nitrogen_ratio',
            field=models.CharField(blank=True, help_text='ratio of a', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='chemical_administration',
            field=models.CharField(blank=True, help_text='list of ch', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='chimera_check_software',
            field=models.CharField(blank=True, help_text='Tool(s) us', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='chloride',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='chlorophyll',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='collection_date',
            field=models.CharField(blank=True, help_text='The date t', max_length=120, validators=[django.core.validators.RegexValidator('(^[12][0-9]{3}(-(0[1-9]|1[0-2])(-(0[1-9]|[12][0-9]|3[01])(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?(/[0-9]{4}(-[0-9]{2}(-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?)?$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='depth',
            field=models.CharField(blank=True, help_text='The vertic', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='diether_lipids',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='dissolved_carbon_dioxide',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='dissolved_hydrogen',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='dissolved_inorganic_carbon',
            field=models.CharField(blank=True, help_text='dissolved ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='dissolved_organic_carbon',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='dissolved_organic_nitrogen',
            field=models.CharField(blank=True, help_text='dissolved ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='dissolved_oxygen',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='elevation',
            field=models.CharField(blank=True, help_text='The elevat', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='encoded_traits',
            field=models.CharField(blank=True, help_text='Should inc', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='environmental_medium',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='estimated_size',
            field=models.CharField(blank=True, help_text='The estima', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='experimental_factor',
            field=models.CharField(blank=True, help_text='Experiment', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='extrachromosomal_elements',
            field=models.CharField(blank=True, help_text='Do plasmid', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='geographic_location_country_and_or_sea',
            field=models.CharField(blank=True, choices=[('Afghanistan', 'Afghanistan'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Arctic Ocean', 'Arctic Ocean'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Ashmore and Cartier Islands', 'Ashmore and Cartier Islands'), ('Atlantic Ocean', 'Atlantic Ocean'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Baker Island', 'Baker Island'), ('Baltic Sea', 'Baltic Sea'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Bassas da India', 'Bassas da India'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia', 'Bolivia'), ('Borneo', 'Borneo'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Virgin Islands', 'British Virgin Islands'), ('Brunei', 'Brunei'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Canada', 'Canada'), ('Cape Verde', 'Cape Verde'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Clipperton Island', 'Clipperton Island'), ('Cocos Islands', 'Cocos Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Cook Islands', 'Cook Islands'), ('Coral Sea Islands', 'Coral Sea Islands'), ('Costa Rica', 'Costa Rica'), ("Cote d'Ivoire", "Cote d'Ivoire"), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Curacao', 'Curacao'), ('Cyprus', 'Cyprus'), ('Czech Republic', 'Czech Republic'), ('Democratic Republic of the Congo', 'Democratic Republic of the Congo'), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('East Timor', 'East Timor'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Ethiopia', 'Ethiopia'), ('Europa Island', 'Europa Island'), ('Falkland Islands (Islas Malvinas)', 'Falkland Islands (Islas Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern and Antarctic Lands', 'French Southern and Antarctic Lands'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Gaza Strip', 'Gaza Strip'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Glorioso Islands', 'Glorioso Islands'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and McDonald Islands', 'Heard Island and McDonald Islands'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Howland Island', 'Howland Island'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indian Ocean', 'Indian Ocean'), ('Indonesia', 'Indonesia'), ('Iran', 'Iran'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Jan Mayen', 'Jan Mayen'), ('Japan', 'Japan'), ('Jarvis Island', 'Jarvis Island'), ('Jersey', 'Jersey'), ('Johnston Atoll', 'Johnston Atoll'), ('Jordan', 'Jordan'), ('Juan de Nova Island', 'Juan de Nova Island'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kerguelen Archipelago', 'Kerguelen Archipelago'), ('Kingman Reef', 'Kingman Reef'), ('Kiribati', 'Kiribati'), ('Kosovo', 'Kosovo'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), ('Laos', 'Laos'), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macau', 'Macau'), ('Macedonia', 'Macedonia'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Mediterranean Sea', 'Mediterranean Sea'), ('Mexico', 'Mexico'), ('Micronesia', 'Micronesia'), ('Midway Islands', 'Midway Islands'), ('Moldova', 'Moldova'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Navassa Island', 'Navassa Island'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('North Korea', 'North Korea'), ('North Sea', 'North Sea'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pacific Ocean', 'Pacific Ocean'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palmyra Atoll', 'Palmyra Atoll'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paracel Islands', 'Paracel Islands'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn Islands', 'Pitcairn Islands'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Republic of the Congo', 'Republic of the Congo'), ('Reunion', 'Reunion'), ('Romania', 'Romania'), ('Ross Sea', 'Ross Sea'), ('Russia', 'Russia'), ('Rwanda', 'Rwanda'), ('Saint Helena', 'Saint Helena'), ('Saint Kitts and Nevis', 'Saint Kitts and Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Pierre and Miquelon', 'Saint Pierre and Miquelon'), ('Saint Vincent and the Grenadines', 'Saint Vincent and the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Sint Maarten', 'Sint Maarten'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia and the South Sandwich Islands', 'South Georgia and the South Sandwich Islands'), ('South Korea', 'South Korea'), ('Southern Ocean', 'Southern Ocean'), ('Spain', 'Spain'), ('Spratly Islands', 'Spratly Islands'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard', 'Svalbard'), ('Swaziland', 'Swaziland'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syria', 'Syria'), ('Taiwan', 'Taiwan'), ('Tajikistan', 'Tajikistan'), ('Tanzania', 'Tanzania'), ('Tasman Sea', 'Tasman Sea'), ('Thailand', 'Thailand'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad and Tobago', 'Trinidad and Tobago'), ('Tromelin Island', 'Tromelin Island'), ('Tunisia', 'Tunisia'), ('Turkey', 'Turkey'), ('Turkmenistan', 'Turkmenistan'), ('Turks and Caicos Islands', 'Turks and Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('USA', 'USA'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela', 'Venezuela'), ('Viet Nam', 'Viet Nam'), ('Virgin Islands', 'Virgin Islands'), ('Wake Island', 'Wake Island'), ('Wallis and Futuna', 'Wallis and Futuna'), ('West Bank', 'West Bank'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('restricted access', 'restricted access')], help_text='The locati', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='geographic_location_region_and_locality',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='glucosidase_activity',
            field=models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='host_disease_status',
            field=models.CharField(blank=True, help_text='list of di', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='host_scientific_name',
            field=models.CharField(blank=True, help_text='Scientific', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='isolation_and_growth_condition',
            field=models.CharField(blank=True, help_text='Publicatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='known_pathogenicity',
            field=models.CharField(blank=True, help_text='To what is', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='library_construction_method',
            field=models.CharField(blank=True, help_text='Library co', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='library_reads_sequenced',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='library_screening_strategy',
            field=models.CharField(blank=True, help_text='Specific e', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='library_size',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='library_vector',
            field=models.CharField(blank=True, help_text='Cloning ve', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='local_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='magnesium',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='mean_friction_velocity',
            field=models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='mean_peak_friction_velocity',
            field=models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='methane',
            field=models.CharField(blank=True, help_text='methane (g', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='multiplex_identifiers',
            field=models.CharField(blank=True, help_text='Molecular ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='n_alkanes',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='negative_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='nitrate',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='nitrite',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='nitrogen',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='nucleic_acid_amplification',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='nucleic_acid_extraction',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='number_of_replicons',
            field=models.CharField(blank=True, help_text='Reports th', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='observed_biotic_relationship',
            field=models.CharField(blank=True, choices=[('commensal', 'commensal'), ('free living', 'free living'), ('mutualism', 'mutualism'), ('parasite', 'parasite'), ('symbiont', 'symbiont')], help_text='Is it free', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='organic_carbon',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='organic_matter',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='organic_nitrogen',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='organism_count',
            field=models.CharField(blank=True, help_text='Total cell', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='oxygenation_status_of_sample',
            field=models.CharField(blank=True, choices=[('aerobic', 'aerobic'), ('anaerobic', 'anaerobic')], help_text='oxygenatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='pH',
            field=models.CharField(blank=True, help_text='pH measure', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='particulate_organic_carbon',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='pcr_conditions',
            field=models.CharField(blank=True, help_text='Descriptio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='pcr_primers',
            field=models.CharField(blank=True, help_text='PCR primer', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='perturbation',
            field=models.CharField(blank=True, help_text='type of pe', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='petroleum_hydrocarbon',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='phaeopigments',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='phosphate',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='phospholipid_fatty_acid',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='ploidy',
            field=models.CharField(blank=True, help_text='The ploidy', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='positive_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='potassium',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='pressure',
            field=models.CharField(blank=True, help_text='pressure t', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='project_name',
            field=models.CharField(blank=True, help_text='Name of th', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='propagation',
            field=models.CharField(blank=True, help_text='The type o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='redox_potential',
            field=models.CharField(blank=True, help_text='redox pote', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='reference_for_biomaterial',
            field=models.CharField(blank=True, help_text='Primary pu', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='relationship_to_oxygen',
            field=models.CharField(blank=True, choices=[('aerobe', 'aerobe'), ('anaerobe', 'anaerobe'), ('facultative', 'facultative'), ('microaerophilic', 'microaerophilic'), ('microanaerobe', 'microanaerobe'), ('obligate aerobe', 'obligate aerobe'), ('obligate anaerobe', 'obligate anaerobe')], help_text='Is this or', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='relevant_electronic_resources',
            field=models.CharField(blank=True, help_text='A related ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='relevant_standard_operating_procedures',
            field=models.CharField(blank=True, help_text='Standard o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='salinity',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='sample_collection_device',
            field=models.CharField(blank=True, help_text='The device', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='sample_collection_method',
            field=models.CharField(blank=True, help_text='The method', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='sample_material_processing',
            field=models.CharField(blank=True, help_text='A brief de', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='sample_storage_duration',
            field=models.CharField(blank=True, help_text='duration f', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='sample_storage_location',
            field=models.CharField(blank=True, help_text='location a', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, help_text='Volume (ml', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='sequence_quality_check',
            field=models.CharField(blank=True, choices=[('manual', 'manual'), ('none', 'none'), ('software', 'software')], help_text='Indicate i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='sequencing_method',
            field=models.CharField(blank=True, help_text='Sequencing', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='silicate',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='sodium',
            field=models.CharField(blank=True, help_text='sodium con', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='source_material_identifiers',
            field=models.CharField(blank=True, help_text='A unique i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='subspecific_genetic_lineage',
            field=models.CharField(blank=True, help_text='Informatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='sulfate',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='sulfide',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='target_gene',
            field=models.CharField(blank=True, help_text='Targeted g', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='target_subfragment',
            field=models.CharField(blank=True, help_text='Name of su', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='total_carbon',
            field=models.CharField(blank=True, help_text='total carb', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='total_nitrogen',
            field=models.CharField(blank=True, help_text='total nitr', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='total_organic_carbon',
            field=models.CharField(blank=True, help_text='Definition', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='trophic_level',
            field=models.CharField(blank=True, choices=[('autotroph', 'autotroph'), ('carboxydotroph', 'carboxydotroph'), ('chemoautotroph', 'chemoautotroph'), ('chemoheterotroph', 'chemoheterotroph'), ('chemolithoautotroph', 'chemolithoautotroph'), ('chemolithotroph', 'chemolithotroph'), ('chemoorganoheterotroph', 'chemoorganoheterotroph'), ('chemoorganotroph', 'chemoorganotroph'), ('chemosynthetic', 'chemosynthetic'), ('chemotroph', 'chemotroph'), ('copiotroph', 'copiotroph'), ('diazotroph', 'diazotroph'), ('facultative autotroph', 'facultative autotroph'), ('heterotroph', 'heterotroph'), ('lithoautotroph', 'lithoautotroph'), ('lithoheterotroph', 'lithoheterotroph'), ('lithotroph', 'lithotroph'), ('methanotroph', 'methanotroph'), ('methylotroph', 'methylotroph'), ('mixotroph', 'mixotroph'), ('obligate chemoautolithotroph', 'obligate chemoautolithotroph'), ('oligotroph', 'oligotroph'), ('organoheterotroph', 'organoheterotroph'), ('organotroph', 'organotroph'), ('photoautotroph', 'photoautotroph'), ('photoheterotroph', 'photoheterotroph'), ('photolithoautotroph', 'photolithoautotroph'), ('photolithotroph', 'photolithotroph'), ('photosynthetic', 'photosynthetic'), ('phototroph', 'phototroph')], help_text='Trophic le', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm',
            name='water_content',
            field=models.CharField(blank=True, help_text='water cont', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='alkalinity',
            field=models.CharField(blank=True, choices=[('mEq/L', 'mEq/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='alkyl_diethers',
            field=models.CharField(blank=True, choices=[('M/L', 'M/L'), ('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='altitude',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='aminopeptidase_activity',
            field=models.CharField(blank=True, choices=[('mol/L/h', 'mol/L/h')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='ammonium',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, choices=[('L', 'L'), ('g', 'g'), ('kg', 'kg'), ('m2', 'm2'), ('m3', 'm3')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='bacterial_carbon_production',
            field=models.CharField(blank=True, choices=[('ng/h', 'ng/h')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='biomass',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('kg', 'kg'), ('t', 't')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='bishomohopanol',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L'), ('µg/g', 'µg/g')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='bromide',
            field=models.CharField(blank=True, choices=[('parts/million', 'parts/million'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='calcium',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('parts/million', 'parts/million'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='chloride',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='chlorophyll',
            field=models.CharField(blank=True, choices=[('mg/m3', 'mg/m3'), ('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='depth',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='diether_lipids',
            field=models.CharField(blank=True, choices=[('ng/L', 'ng/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='dissolved_carbon_dioxide',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='dissolved_hydrogen',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='dissolved_inorganic_carbon',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='dissolved_organic_carbon',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='dissolved_organic_nitrogen',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='dissolved_oxygen',
            field=models.CharField(blank=True, choices=[('µmol/kg', 'µmol/kg')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='elevation',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='glucosidase_activity',
            field=models.CharField(blank=True, choices=[('mol/L/h', 'mol/L/h')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='magnesium',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('mol/L', 'mol/L'), ('parts/million', 'parts/million')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='mean_friction_velocity',
            field=models.CharField(blank=True, choices=[('m/s', 'm/s')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='mean_peak_friction_velocity',
            field=models.CharField(blank=True, choices=[('m/s', 'm/s')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='methane',
            field=models.CharField(blank=True, choices=[('µM/L', 'µM/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='n_alkanes',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='nitrate',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='nitrite',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='nitrogen',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='organic_carbon',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='organic_matter',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='organic_nitrogen',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='particulate_organic_carbon',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='petroleum_hydrocarbon',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='phaeopigments',
            field=models.CharField(blank=True, choices=[('mg/m3', 'mg/m3'), ('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='phosphate',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='phospholipid_fatty_acid',
            field=models.CharField(blank=True, choices=[('mol/L', 'mol/L'), ('mol/g', 'mol/g')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='potassium',
            field=models.CharField(blank=True, choices=[('parts/million', 'parts/million'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='pressure',
            field=models.CharField(blank=True, choices=[('atm', 'atm'), ('bar', 'bar')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='redox_potential',
            field=models.CharField(blank=True, choices=[('mV', 'mV')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='salinity',
            field=models.CharField(blank=True, choices=[('psu', 'psu')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='sample_storage_duration',
            field=models.CharField(blank=True, choices=[('days', 'days'), ('hours', 'hours'), ('months', 'months'), ('weeks', 'weeks'), ('years', 'years')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, choices=[('°C', '°C')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('mL', 'mL'), ('mg', 'mg'), ('ng', 'ng')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='silicate',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='sodium',
            field=models.CharField(blank=True, choices=[('parts/million', 'parts/million'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='sulfate',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='sulfide',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='temperature',
            field=models.CharField(blank=True, choices=[('ºC', 'ºC')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='total_carbon',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='total_nitrogen',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='total_organic_carbon',
            field=models.CharField(blank=True, choices=[('g/kg', 'g/kg')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='water_content',
            field=models.CharField(blank=True, choices=[('cm3/cm3', 'cm3/cm3'), ('g/g', 'g/g')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='adapters',
            field=models.CharField(blank=True, help_text='Adapters p', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='alkalinity',
            field=models.CharField(blank=True, help_text='alkalinity', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='annotation_source',
            field=models.CharField(blank=True, help_text='For cases ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='broad_scale_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='chemical_administration',
            field=models.CharField(blank=True, help_text='list of ch', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='chimera_check_software',
            field=models.CharField(blank=True, help_text='Tool(s) us', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='collection_date',
            field=models.CharField(blank=True, help_text='The date t', max_length=120, validators=[django.core.validators.RegexValidator('(^[12][0-9]{3}(-(0[1-9]|1[0-2])(-(0[1-9]|[12][0-9]|3[01])(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?(/[0-9]{4}(-[0-9]{2}(-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?)?$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='depth',
            field=models.CharField(blank=True, help_text='The vertic', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='encoded_traits',
            field=models.CharField(blank=True, help_text='Should inc', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='environmental_medium',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='estimated_size',
            field=models.CharField(blank=True, help_text='The estima', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='experimental_factor',
            field=models.CharField(blank=True, help_text='Experiment', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='extrachromosomal_elements',
            field=models.CharField(blank=True, help_text='Do plasmid', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='geographic_location_country_and_or_sea',
            field=models.CharField(blank=True, choices=[('Afghanistan', 'Afghanistan'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Arctic Ocean', 'Arctic Ocean'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Ashmore and Cartier Islands', 'Ashmore and Cartier Islands'), ('Atlantic Ocean', 'Atlantic Ocean'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Baker Island', 'Baker Island'), ('Baltic Sea', 'Baltic Sea'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Bassas da India', 'Bassas da India'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia', 'Bolivia'), ('Borneo', 'Borneo'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Virgin Islands', 'British Virgin Islands'), ('Brunei', 'Brunei'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Canada', 'Canada'), ('Cape Verde', 'Cape Verde'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Clipperton Island', 'Clipperton Island'), ('Cocos Islands', 'Cocos Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Cook Islands', 'Cook Islands'), ('Coral Sea Islands', 'Coral Sea Islands'), ('Costa Rica', 'Costa Rica'), ("Cote d'Ivoire", "Cote d'Ivoire"), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Curacao', 'Curacao'), ('Cyprus', 'Cyprus'), ('Czech Republic', 'Czech Republic'), ('Democratic Republic of the Congo', 'Democratic Republic of the Congo'), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('East Timor', 'East Timor'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Ethiopia', 'Ethiopia'), ('Europa Island', 'Europa Island'), ('Falkland Islands (Islas Malvinas)', 'Falkland Islands (Islas Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern and Antarctic Lands', 'French Southern and Antarctic Lands'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Gaza Strip', 'Gaza Strip'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Glorioso Islands', 'Glorioso Islands'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and McDonald Islands', 'Heard Island and McDonald Islands'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Howland Island', 'Howland Island'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indian Ocean', 'Indian Ocean'), ('Indonesia', 'Indonesia'), ('Iran', 'Iran'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Jan Mayen', 'Jan Mayen'), ('Japan', 'Japan'), ('Jarvis Island', 'Jarvis Island'), ('Jersey', 'Jersey'), ('Johnston Atoll', 'Johnston Atoll'), ('Jordan', 'Jordan'), ('Juan de Nova Island', 'Juan de Nova Island'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kerguelen Archipelago', 'Kerguelen Archipelago'), ('Kingman Reef', 'Kingman Reef'), ('Kiribati', 'Kiribati'), ('Kosovo', 'Kosovo'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), ('Laos', 'Laos'), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macau', 'Macau'), ('Macedonia', 'Macedonia'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Mediterranean Sea', 'Mediterranean Sea'), ('Mexico', 'Mexico'), ('Micronesia', 'Micronesia'), ('Midway Islands', 'Midway Islands'), ('Moldova', 'Moldova'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Navassa Island', 'Navassa Island'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('North Korea', 'North Korea'), ('North Sea', 'North Sea'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pacific Ocean', 'Pacific Ocean'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palmyra Atoll', 'Palmyra Atoll'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paracel Islands', 'Paracel Islands'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn Islands', 'Pitcairn Islands'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Republic of the Congo', 'Republic of the Congo'), ('Reunion', 'Reunion'), ('Romania', 'Romania'), ('Ross Sea', 'Ross Sea'), ('Russia', 'Russia'), ('Rwanda', 'Rwanda'), ('Saint Helena', 'Saint Helena'), ('Saint Kitts and Nevis', 'Saint Kitts and Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Pierre and Miquelon', 'Saint Pierre and Miquelon'), ('Saint Vincent and the Grenadines', 'Saint Vincent and the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Sint Maarten', 'Sint Maarten'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia and the South Sandwich Islands', 'South Georgia and the South Sandwich Islands'), ('South Korea', 'South Korea'), ('Southern Ocean', 'Southern Ocean'), ('Spain', 'Spain'), ('Spratly Islands', 'Spratly Islands'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard', 'Svalbard'), ('Swaziland', 'Swaziland'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syria', 'Syria'), ('Taiwan', 'Taiwan'), ('Tajikistan', 'Tajikistan'), ('Tanzania', 'Tanzania'), ('Tasman Sea', 'Tasman Sea'), ('Thailand', 'Thailand'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad and Tobago', 'Trinidad and Tobago'), ('Tromelin Island', 'Tromelin Island'), ('Tunisia', 'Tunisia'), ('Turkey', 'Turkey'), ('Turkmenistan', 'Turkmenistan'), ('Turks and Caicos Islands', 'Turks and Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('USA', 'USA'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela', 'Venezuela'), ('Viet Nam', 'Viet Nam'), ('Virgin Islands', 'Virgin Islands'), ('Wake Island', 'Wake Island'), ('Wallis and Futuna', 'Wallis and Futuna'), ('West Bank', 'West Bank'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('restricted access', 'restricted access')], help_text='The locati', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='geographic_location_region_and_locality',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='host_disease_status',
            field=models.CharField(blank=True, help_text='list of di', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='host_scientific_name',
            field=models.CharField(blank=True, help_text='Scientific', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='isolation_and_growth_condition',
            field=models.CharField(blank=True, help_text='Publicatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='known_pathogenicity',
            field=models.CharField(blank=True, help_text='To what is', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='library_construction_method',
            field=models.CharField(blank=True, help_text='Library co', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='library_reads_sequenced',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='library_screening_strategy',
            field=models.CharField(blank=True, help_text='Specific e', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='library_size',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='library_vector',
            field=models.CharField(blank=True, help_text='Cloning ve', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='local_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='multiplex_identifiers',
            field=models.CharField(blank=True, help_text='Molecular ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='negative_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='nitrate',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='nucleic_acid_amplification',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='nucleic_acid_extraction',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='number_of_replicons',
            field=models.CharField(blank=True, help_text='Reports th', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='observed_biotic_relationship',
            field=models.CharField(blank=True, choices=[('commensal', 'commensal'), ('free living', 'free living'), ('mutualism', 'mutualism'), ('parasite', 'parasite'), ('symbiont', 'symbiont')], help_text='Is it free', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='organism_count',
            field=models.CharField(blank=True, help_text='Total cell', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='oxygenation_status_of_sample',
            field=models.CharField(blank=True, choices=[('aerobic', 'aerobic'), ('anaerobic', 'anaerobic')], help_text='oxygenatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='pH',
            field=models.CharField(blank=True, help_text='pH measure', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='pcr_conditions',
            field=models.CharField(blank=True, help_text='Descriptio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='pcr_primers',
            field=models.CharField(blank=True, help_text='PCR primer', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='perturbation',
            field=models.CharField(blank=True, help_text='type of pe', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='phosphate',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='ploidy',
            field=models.CharField(blank=True, help_text='The ploidy', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='positive_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='project_name',
            field=models.CharField(blank=True, help_text='Name of th', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='propagation',
            field=models.CharField(blank=True, help_text='The type o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='reference_for_biomaterial',
            field=models.CharField(blank=True, help_text='Primary pu', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='relationship_to_oxygen',
            field=models.CharField(blank=True, choices=[('aerobe', 'aerobe'), ('anaerobe', 'anaerobe'), ('facultative', 'facultative'), ('microaerophilic', 'microaerophilic'), ('microanaerobe', 'microanaerobe'), ('obligate aerobe', 'obligate aerobe'), ('obligate anaerobe', 'obligate anaerobe')], help_text='Is this or', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='relevant_electronic_resources',
            field=models.CharField(blank=True, help_text='A related ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='relevant_standard_operating_procedures',
            field=models.CharField(blank=True, help_text='Standard o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='salinity',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='sample_collection_device',
            field=models.CharField(blank=True, help_text='The device', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='sample_collection_method',
            field=models.CharField(blank=True, help_text='The method', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='sample_material_processing',
            field=models.CharField(blank=True, help_text='A brief de', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='sample_storage_duration',
            field=models.CharField(blank=True, help_text='duration f', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='sample_storage_location',
            field=models.CharField(blank=True, help_text='location a', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, help_text='Volume (ml', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='sequence_quality_check',
            field=models.CharField(blank=True, choices=[('manual', 'manual'), ('none', 'none'), ('software', 'software')], help_text='Indicate i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='sequencing_method',
            field=models.CharField(blank=True, help_text='Sequencing', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='sodium',
            field=models.CharField(blank=True, help_text='sodium con', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='source_material_identifiers',
            field=models.CharField(blank=True, help_text='A unique i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='subspecific_genetic_lineage',
            field=models.CharField(blank=True, help_text='Informatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='target_gene',
            field=models.CharField(blank=True, help_text='Targeted g', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='target_subfragment',
            field=models.CharField(blank=True, help_text='Name of su', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment',
            name='trophic_level',
            field=models.CharField(blank=True, choices=[('autotroph', 'autotroph'), ('carboxydotroph', 'carboxydotroph'), ('chemoautotroph', 'chemoautotroph'), ('chemoheterotroph', 'chemoheterotroph'), ('chemolithoautotroph', 'chemolithoautotroph'), ('chemolithotroph', 'chemolithotroph'), ('chemoorganoheterotroph', 'chemoorganoheterotroph'), ('chemoorganotroph', 'chemoorganotroph'), ('chemosynthetic', 'chemosynthetic'), ('chemotroph', 'chemotroph'), ('copiotroph', 'copiotroph'), ('diazotroph', 'diazotroph'), ('facultative autotroph', 'facultative autotroph'), ('heterotroph', 'heterotroph'), ('lithoautotroph', 'lithoautotroph'), ('lithoheterotroph', 'lithoheterotroph'), ('lithotroph', 'lithotroph'), ('methanotroph', 'methanotroph'), ('methylotroph', 'methylotroph'), ('mixotroph', 'mixotroph'), ('obligate chemoautolithotroph', 'obligate chemoautolithotroph'), ('oligotroph', 'oligotroph'), ('organoheterotroph', 'organoheterotroph'), ('organotroph', 'organotroph'), ('photoautotroph', 'photoautotroph'), ('photoheterotroph', 'photoheterotroph'), ('photolithoautotroph', 'photolithoautotroph'), ('photolithotroph', 'photolithotroph'), ('photosynthetic', 'photosynthetic'), ('phototroph', 'phototroph')], help_text='Trophic le', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='alkalinity',
            field=models.CharField(blank=True, choices=[('mEq/L', 'mEq/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, choices=[('L', 'L'), ('g', 'g'), ('kg', 'kg'), ('m2', 'm2'), ('m3', 'm3')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='depth',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='nitrate',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='phosphate',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='salinity',
            field=models.CharField(blank=True, choices=[('psu', 'psu')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='sample_storage_duration',
            field=models.CharField(blank=True, choices=[('days', 'days'), ('hours', 'hours'), ('months', 'months'), ('weeks', 'weeks'), ('years', 'years')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, choices=[('°C', '°C')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('mL', 'mL'), ('mg', 'mg'), ('ng', 'ng')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='sodium',
            field=models.CharField(blank=True, choices=[('parts/million', 'parts/million'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='temperature',
            field=models.CharField(blank=True, choices=[('ºC', 'ºC')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='adapters',
            field=models.CharField(blank=True, help_text='Adapters p', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='altitude',
            field=models.CharField(blank=True, help_text='The altitu', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='annotation_source',
            field=models.CharField(blank=True, help_text='For cases ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='broad_scale_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='chemical_administration',
            field=models.CharField(blank=True, help_text='list of ch', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='chimera_check_software',
            field=models.CharField(blank=True, help_text='Tool(s) us', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='collection_date',
            field=models.CharField(blank=True, help_text='The date t', max_length=120, validators=[django.core.validators.RegexValidator('(^[12][0-9]{3}(-(0[1-9]|1[0-2])(-(0[1-9]|[12][0-9]|3[01])(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?(/[0-9]{4}(-[0-9]{2}(-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?)?$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='depth',
            field=models.CharField(blank=True, help_text='The vertic', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='elevation',
            field=models.CharField(blank=True, help_text='The elevat', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='encoded_traits',
            field=models.CharField(blank=True, help_text='Should inc', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='environmental_medium',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='estimated_size',
            field=models.CharField(blank=True, help_text='The estima', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='experimental_factor',
            field=models.CharField(blank=True, help_text='Experiment', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='extrachromosomal_elements',
            field=models.CharField(blank=True, help_text='Do plasmid', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='geographic_location_country_and_or_sea',
            field=models.CharField(blank=True, choices=[('Afghanistan', 'Afghanistan'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Arctic Ocean', 'Arctic Ocean'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Ashmore and Cartier Islands', 'Ashmore and Cartier Islands'), ('Atlantic Ocean', 'Atlantic Ocean'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Baker Island', 'Baker Island'), ('Baltic Sea', 'Baltic Sea'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Bassas da India', 'Bassas da India'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia', 'Bolivia'), ('Borneo', 'Borneo'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Virgin Islands', 'British Virgin Islands'), ('Brunei', 'Brunei'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Canada', 'Canada'), ('Cape Verde', 'Cape Verde'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Clipperton Island', 'Clipperton Island'), ('Cocos Islands', 'Cocos Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Cook Islands', 'Cook Islands'), ('Coral Sea Islands', 'Coral Sea Islands'), ('Costa Rica', 'Costa Rica'), ("Cote d'Ivoire", "Cote d'Ivoire"), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Curacao', 'Curacao'), ('Cyprus', 'Cyprus'), ('Czech Republic', 'Czech Republic'), ('Democratic Republic of the Congo', 'Democratic Republic of the Congo'), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('East Timor', 'East Timor'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Ethiopia', 'Ethiopia'), ('Europa Island', 'Europa Island'), ('Falkland Islands (Islas Malvinas)', 'Falkland Islands (Islas Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern and Antarctic Lands', 'French Southern and Antarctic Lands'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Gaza Strip', 'Gaza Strip'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Glorioso Islands', 'Glorioso Islands'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and McDonald Islands', 'Heard Island and McDonald Islands'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Howland Island', 'Howland Island'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indian Ocean', 'Indian Ocean'), ('Indonesia', 'Indonesia'), ('Iran', 'Iran'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Jan Mayen', 'Jan Mayen'), ('Japan', 'Japan'), ('Jarvis Island', 'Jarvis Island'), ('Jersey', 'Jersey'), ('Johnston Atoll', 'Johnston Atoll'), ('Jordan', 'Jordan'), ('Juan de Nova Island', 'Juan de Nova Island'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kerguelen Archipelago', 'Kerguelen Archipelago'), ('Kingman Reef', 'Kingman Reef'), ('Kiribati', 'Kiribati'), ('Kosovo', 'Kosovo'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), ('Laos', 'Laos'), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macau', 'Macau'), ('Macedonia', 'Macedonia'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Mediterranean Sea', 'Mediterranean Sea'), ('Mexico', 'Mexico'), ('Micronesia', 'Micronesia'), ('Midway Islands', 'Midway Islands'), ('Moldova', 'Moldova'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Navassa Island', 'Navassa Island'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('North Korea', 'North Korea'), ('North Sea', 'North Sea'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pacific Ocean', 'Pacific Ocean'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palmyra Atoll', 'Palmyra Atoll'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paracel Islands', 'Paracel Islands'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn Islands', 'Pitcairn Islands'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Republic of the Congo', 'Republic of the Congo'), ('Reunion', 'Reunion'), ('Romania', 'Romania'), ('Ross Sea', 'Ross Sea'), ('Russia', 'Russia'), ('Rwanda', 'Rwanda'), ('Saint Helena', 'Saint Helena'), ('Saint Kitts and Nevis', 'Saint Kitts and Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Pierre and Miquelon', 'Saint Pierre and Miquelon'), ('Saint Vincent and the Grenadines', 'Saint Vincent and the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Sint Maarten', 'Sint Maarten'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia and the South Sandwich Islands', 'South Georgia and the South Sandwich Islands'), ('South Korea', 'South Korea'), ('Southern Ocean', 'Southern Ocean'), ('Spain', 'Spain'), ('Spratly Islands', 'Spratly Islands'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard', 'Svalbard'), ('Swaziland', 'Swaziland'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syria', 'Syria'), ('Taiwan', 'Taiwan'), ('Tajikistan', 'Tajikistan'), ('Tanzania', 'Tanzania'), ('Tasman Sea', 'Tasman Sea'), ('Thailand', 'Thailand'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad and Tobago', 'Trinidad and Tobago'), ('Tromelin Island', 'Tromelin Island'), ('Tunisia', 'Tunisia'), ('Turkey', 'Turkey'), ('Turkmenistan', 'Turkmenistan'), ('Turks and Caicos Islands', 'Turks and Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('USA', 'USA'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela', 'Venezuela'), ('Viet Nam', 'Viet Nam'), ('Virgin Islands', 'Virgin Islands'), ('Wake Island', 'Wake Island'), ('Wallis and Futuna', 'Wallis and Futuna'), ('West Bank', 'West Bank'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('restricted access', 'restricted access')], help_text='The locati', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='geographic_location_region_and_locality',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='host_age',
            field=models.CharField(blank=True, help_text='age of hos', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='host_disease_status',
            field=models.CharField(blank=True, help_text='list of di', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='host_genotype',
            field=models.CharField(blank=True, help_text='observed g', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='host_height',
            field=models.CharField(blank=True, help_text='the height', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='host_phenotype',
            field=models.CharField(blank=True, help_text='phenotype ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='host_total_mass',
            field=models.CharField(blank=True, help_text='total mass', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='isolation_and_growth_condition',
            field=models.CharField(blank=True, help_text='Publicatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='known_pathogenicity',
            field=models.CharField(blank=True, help_text='To what is', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='library_construction_method',
            field=models.CharField(blank=True, help_text='Library co', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='library_reads_sequenced',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='library_screening_strategy',
            field=models.CharField(blank=True, help_text='Specific e', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='library_size',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='library_vector',
            field=models.CharField(blank=True, help_text='Cloning ve', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='local_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='multiplex_identifiers',
            field=models.CharField(blank=True, help_text='Molecular ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='negative_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='nucleic_acid_amplification',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='nucleic_acid_extraction',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='number_of_replicons',
            field=models.CharField(blank=True, help_text='Reports th', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='observed_biotic_relationship',
            field=models.CharField(blank=True, choices=[('commensal', 'commensal'), ('free living', 'free living'), ('mutualism', 'mutualism'), ('parasite', 'parasite'), ('symbiont', 'symbiont')], help_text='Is it free', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='organism_count',
            field=models.CharField(blank=True, help_text='Total cell', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='oxygenation_status_of_sample',
            field=models.CharField(blank=True, choices=[('aerobic', 'aerobic'), ('anaerobic', 'anaerobic')], help_text='oxygenatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='pcr_conditions',
            field=models.CharField(blank=True, help_text='Descriptio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='pcr_primers',
            field=models.CharField(blank=True, help_text='PCR primer', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='perturbation',
            field=models.CharField(blank=True, help_text='type of pe', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='ploidy',
            field=models.CharField(blank=True, help_text='The ploidy', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='positive_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='project_name',
            field=models.CharField(blank=True, help_text='Name of th', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='propagation',
            field=models.CharField(blank=True, help_text='The type o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='reference_for_biomaterial',
            field=models.CharField(blank=True, help_text='Primary pu', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='relationship_to_oxygen',
            field=models.CharField(blank=True, choices=[('aerobe', 'aerobe'), ('anaerobe', 'anaerobe'), ('facultative', 'facultative'), ('microaerophilic', 'microaerophilic'), ('microanaerobe', 'microanaerobe'), ('obligate aerobe', 'obligate aerobe'), ('obligate anaerobe', 'obligate anaerobe')], help_text='Is this or', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='relevant_electronic_resources',
            field=models.CharField(blank=True, help_text='A related ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='relevant_standard_operating_procedures',
            field=models.CharField(blank=True, help_text='Standard o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='salinity',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='sample_collection_device',
            field=models.CharField(blank=True, help_text='The device', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='sample_collection_method',
            field=models.CharField(blank=True, help_text='The method', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='sample_material_processing',
            field=models.CharField(blank=True, help_text='A brief de', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='sample_storage_duration',
            field=models.CharField(blank=True, help_text='duration f', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='sample_storage_location',
            field=models.CharField(blank=True, help_text='location a', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, help_text='Volume (ml', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='sequence_quality_check',
            field=models.CharField(blank=True, choices=[('manual', 'manual'), ('none', 'none'), ('software', 'software')], help_text='Indicate i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='sequencing_method',
            field=models.CharField(blank=True, help_text='Sequencing', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='source_material_identifiers',
            field=models.CharField(blank=True, help_text='A unique i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='subspecific_genetic_lineage',
            field=models.CharField(blank=True, help_text='Informatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='target_gene',
            field=models.CharField(blank=True, help_text='Targeted g', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='target_subfragment',
            field=models.CharField(blank=True, help_text='Name of su', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated',
            name='trophic_level',
            field=models.CharField(blank=True, choices=[('autotroph', 'autotroph'), ('carboxydotroph', 'carboxydotroph'), ('chemoautotroph', 'chemoautotroph'), ('chemoheterotroph', 'chemoheterotroph'), ('chemolithoautotroph', 'chemolithoautotroph'), ('chemolithotroph', 'chemolithotroph'), ('chemoorganoheterotroph', 'chemoorganoheterotroph'), ('chemoorganotroph', 'chemoorganotroph'), ('chemosynthetic', 'chemosynthetic'), ('chemotroph', 'chemotroph'), ('copiotroph', 'copiotroph'), ('diazotroph', 'diazotroph'), ('facultative autotroph', 'facultative autotroph'), ('heterotroph', 'heterotroph'), ('lithoautotroph', 'lithoautotroph'), ('lithoheterotroph', 'lithoheterotroph'), ('lithotroph', 'lithotroph'), ('methanotroph', 'methanotroph'), ('methylotroph', 'methylotroph'), ('mixotroph', 'mixotroph'), ('obligate chemoautolithotroph', 'obligate chemoautolithotroph'), ('oligotroph', 'oligotroph'), ('organoheterotroph', 'organoheterotroph'), ('organotroph', 'organotroph'), ('photoautotroph', 'photoautotroph'), ('photoheterotroph', 'photoheterotroph'), ('photolithoautotroph', 'photolithoautotroph'), ('photolithotroph', 'photolithotroph'), ('photosynthetic', 'photosynthetic'), ('phototroph', 'phototroph')], help_text='Trophic le', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated_unit',
            name='altitude',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated_unit',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, choices=[('L', 'L'), ('g', 'g'), ('kg', 'kg'), ('m2', 'm2'), ('m3', 'm3')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated_unit',
            name='depth',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated_unit',
            name='elevation',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated_unit',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated_unit',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated_unit',
            name='host_age',
            field=models.CharField(blank=True, choices=[('centuries', 'centuries'), ('days', 'days'), ('decades', 'decades'), ('hours', 'hours'), ('minutes', 'minutes'), ('months', 'months'), ('seconds', 'seconds'), ('weeks', 'weeks'), ('years', 'years')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated_unit',
            name='host_height',
            field=models.CharField(blank=True, choices=[('cm', 'cm'), ('m', 'm'), ('mm', 'mm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated_unit',
            name='host_total_mass',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('kg', 'kg')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated_unit',
            name='salinity',
            field=models.CharField(blank=True, choices=[('psu', 'psu')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated_unit',
            name='sample_storage_duration',
            field=models.CharField(blank=True, choices=[('days', 'days'), ('hours', 'hours'), ('months', 'months'), ('weeks', 'weeks'), ('years', 'years')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated_unit',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, choices=[('°C', '°C')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated_unit',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('mL', 'mL'), ('mg', 'mg'), ('ng', 'ng')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_plant_associated_unit',
            name='temperature',
            field=models.CharField(blank=True, choices=[('ºC', 'ºC')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='adapters',
            field=models.CharField(blank=True, help_text='Adapters p', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='alkyl_diethers',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='altitude',
            field=models.CharField(blank=True, help_text='The altitu', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='aminopeptidase_activity',
            field=models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='ammonium',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='annotation_source',
            field=models.CharField(blank=True, help_text='For cases ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='bacterial_carbon_production',
            field=models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='biomass',
            field=models.CharField(blank=True, help_text='amount of ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='bishomohopanol',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='broad_scale_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='bromide',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='calcium',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='carbon_nitrogen_ratio',
            field=models.CharField(blank=True, help_text='ratio of a', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='chemical_administration',
            field=models.CharField(blank=True, help_text='list of ch', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='chimera_check_software',
            field=models.CharField(blank=True, help_text='Tool(s) us', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='chloride',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='chlorophyll',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='collection_date',
            field=models.CharField(blank=True, help_text='The date t', max_length=120, validators=[django.core.validators.RegexValidator('(^[12][0-9]{3}(-(0[1-9]|1[0-2])(-(0[1-9]|[12][0-9]|3[01])(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?(/[0-9]{4}(-[0-9]{2}(-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?)?$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='density',
            field=models.CharField(blank=True, help_text='density of', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='depth',
            field=models.CharField(blank=True, help_text='The vertic', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='diether_lipids',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='dissolved_carbon_dioxide',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='dissolved_hydrogen',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='dissolved_inorganic_carbon',
            field=models.CharField(blank=True, help_text='dissolved ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='dissolved_organic_carbon',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='dissolved_organic_nitrogen',
            field=models.CharField(blank=True, help_text='dissolved ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='dissolved_oxygen',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='elevation',
            field=models.CharField(blank=True, help_text='The elevat', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='encoded_traits',
            field=models.CharField(blank=True, help_text='Should inc', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='environmental_medium',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='estimated_size',
            field=models.CharField(blank=True, help_text='The estima', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='experimental_factor',
            field=models.CharField(blank=True, help_text='Experiment', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='extrachromosomal_elements',
            field=models.CharField(blank=True, help_text='Do plasmid', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='geographic_location_country_and_or_sea',
            field=models.CharField(blank=True, choices=[('Afghanistan', 'Afghanistan'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Arctic Ocean', 'Arctic Ocean'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Ashmore and Cartier Islands', 'Ashmore and Cartier Islands'), ('Atlantic Ocean', 'Atlantic Ocean'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Baker Island', 'Baker Island'), ('Baltic Sea', 'Baltic Sea'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Bassas da India', 'Bassas da India'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia', 'Bolivia'), ('Borneo', 'Borneo'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Virgin Islands', 'British Virgin Islands'), ('Brunei', 'Brunei'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Canada', 'Canada'), ('Cape Verde', 'Cape Verde'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Clipperton Island', 'Clipperton Island'), ('Cocos Islands', 'Cocos Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Cook Islands', 'Cook Islands'), ('Coral Sea Islands', 'Coral Sea Islands'), ('Costa Rica', 'Costa Rica'), ("Cote d'Ivoire", "Cote d'Ivoire"), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Curacao', 'Curacao'), ('Cyprus', 'Cyprus'), ('Czech Republic', 'Czech Republic'), ('Democratic Republic of the Congo', 'Democratic Republic of the Congo'), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('East Timor', 'East Timor'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Ethiopia', 'Ethiopia'), ('Europa Island', 'Europa Island'), ('Falkland Islands (Islas Malvinas)', 'Falkland Islands (Islas Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern and Antarctic Lands', 'French Southern and Antarctic Lands'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Gaza Strip', 'Gaza Strip'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Glorioso Islands', 'Glorioso Islands'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and McDonald Islands', 'Heard Island and McDonald Islands'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Howland Island', 'Howland Island'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indian Ocean', 'Indian Ocean'), ('Indonesia', 'Indonesia'), ('Iran', 'Iran'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Jan Mayen', 'Jan Mayen'), ('Japan', 'Japan'), ('Jarvis Island', 'Jarvis Island'), ('Jersey', 'Jersey'), ('Johnston Atoll', 'Johnston Atoll'), ('Jordan', 'Jordan'), ('Juan de Nova Island', 'Juan de Nova Island'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kerguelen Archipelago', 'Kerguelen Archipelago'), ('Kingman Reef', 'Kingman Reef'), ('Kiribati', 'Kiribati'), ('Kosovo', 'Kosovo'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), ('Laos', 'Laos'), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macau', 'Macau'), ('Macedonia', 'Macedonia'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Mediterranean Sea', 'Mediterranean Sea'), ('Mexico', 'Mexico'), ('Micronesia', 'Micronesia'), ('Midway Islands', 'Midway Islands'), ('Moldova', 'Moldova'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Navassa Island', 'Navassa Island'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('North Korea', 'North Korea'), ('North Sea', 'North Sea'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pacific Ocean', 'Pacific Ocean'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palmyra Atoll', 'Palmyra Atoll'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paracel Islands', 'Paracel Islands'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn Islands', 'Pitcairn Islands'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Republic of the Congo', 'Republic of the Congo'), ('Reunion', 'Reunion'), ('Romania', 'Romania'), ('Ross Sea', 'Ross Sea'), ('Russia', 'Russia'), ('Rwanda', 'Rwanda'), ('Saint Helena', 'Saint Helena'), ('Saint Kitts and Nevis', 'Saint Kitts and Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Pierre and Miquelon', 'Saint Pierre and Miquelon'), ('Saint Vincent and the Grenadines', 'Saint Vincent and the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Sint Maarten', 'Sint Maarten'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia and the South Sandwich Islands', 'South Georgia and the South Sandwich Islands'), ('South Korea', 'South Korea'), ('Southern Ocean', 'Southern Ocean'), ('Spain', 'Spain'), ('Spratly Islands', 'Spratly Islands'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard', 'Svalbard'), ('Swaziland', 'Swaziland'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syria', 'Syria'), ('Taiwan', 'Taiwan'), ('Tajikistan', 'Tajikistan'), ('Tanzania', 'Tanzania'), ('Tasman Sea', 'Tasman Sea'), ('Thailand', 'Thailand'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad and Tobago', 'Trinidad and Tobago'), ('Tromelin Island', 'Tromelin Island'), ('Tunisia', 'Tunisia'), ('Turkey', 'Turkey'), ('Turkmenistan', 'Turkmenistan'), ('Turks and Caicos Islands', 'Turks and Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('USA', 'USA'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela', 'Venezuela'), ('Viet Nam', 'Viet Nam'), ('Virgin Islands', 'Virgin Islands'), ('Wake Island', 'Wake Island'), ('Wallis and Futuna', 'Wallis and Futuna'), ('West Bank', 'West Bank'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('restricted access', 'restricted access')], help_text='The locati', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='geographic_location_region_and_locality',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='glucosidase_activity',
            field=models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='host_disease_status',
            field=models.CharField(blank=True, help_text='list of di', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='host_scientific_name',
            field=models.CharField(blank=True, help_text='Scientific', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='isolation_and_growth_condition',
            field=models.CharField(blank=True, help_text='Publicatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='known_pathogenicity',
            field=models.CharField(blank=True, help_text='To what is', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='library_construction_method',
            field=models.CharField(blank=True, help_text='Library co', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='library_reads_sequenced',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='library_screening_strategy',
            field=models.CharField(blank=True, help_text='Specific e', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='library_size',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='library_vector',
            field=models.CharField(blank=True, help_text='Cloning ve', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='local_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='magnesium',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='multiplex_identifiers',
            field=models.CharField(blank=True, help_text='Molecular ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='n_alkanes',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='negative_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='nitrate',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='nitrite',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='nitrogen',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='nucleic_acid_amplification',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='nucleic_acid_extraction',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='number_of_replicons',
            field=models.CharField(blank=True, help_text='Reports th', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='observed_biotic_relationship',
            field=models.CharField(blank=True, choices=[('commensal', 'commensal'), ('free living', 'free living'), ('mutualism', 'mutualism'), ('parasite', 'parasite'), ('symbiont', 'symbiont')], help_text='Is it free', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='organic_carbon',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='organic_matter',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='organic_nitrogen',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='organism_count',
            field=models.CharField(blank=True, help_text='Total cell', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='oxygenation_status_of_sample',
            field=models.CharField(blank=True, choices=[('aerobic', 'aerobic'), ('anaerobic', 'anaerobic')], help_text='oxygenatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='particulate_organic_carbon',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='pcr_conditions',
            field=models.CharField(blank=True, help_text='Descriptio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='pcr_primers',
            field=models.CharField(blank=True, help_text='PCR primer', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='perturbation',
            field=models.CharField(blank=True, help_text='type of pe', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='petroleum_hydrocarbon',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='phaeopigments',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='phosphate',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='phospholipid_fatty_acid',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='ploidy',
            field=models.CharField(blank=True, help_text='The ploidy', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='positive_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='potassium',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='project_name',
            field=models.CharField(blank=True, help_text='Name of th', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='propagation',
            field=models.CharField(blank=True, help_text='The type o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='redox_potential',
            field=models.CharField(blank=True, help_text='redox pote', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='reference_for_biomaterial',
            field=models.CharField(blank=True, help_text='Primary pu', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='relationship_to_oxygen',
            field=models.CharField(blank=True, choices=[('aerobe', 'aerobe'), ('anaerobe', 'anaerobe'), ('facultative', 'facultative'), ('microaerophilic', 'microaerophilic'), ('microanaerobe', 'microanaerobe'), ('obligate aerobe', 'obligate aerobe'), ('obligate anaerobe', 'obligate anaerobe')], help_text='Is this or', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='relevant_electronic_resources',
            field=models.CharField(blank=True, help_text='A related ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='relevant_standard_operating_procedures',
            field=models.CharField(blank=True, help_text='Standard o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='salinity',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='sample_collection_device',
            field=models.CharField(blank=True, help_text='The device', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='sample_collection_method',
            field=models.CharField(blank=True, help_text='The method', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='sample_material_processing',
            field=models.CharField(blank=True, help_text='A brief de', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='sample_storage_duration',
            field=models.CharField(blank=True, help_text='duration f', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='sample_storage_location',
            field=models.CharField(blank=True, help_text='location a', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, help_text='Volume (ml', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='sequence_quality_check',
            field=models.CharField(blank=True, choices=[('manual', 'manual'), ('none', 'none'), ('software', 'software')], help_text='Indicate i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='sequencing_method',
            field=models.CharField(blank=True, help_text='Sequencing', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='silicate',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='sodium',
            field=models.CharField(blank=True, help_text='sodium con', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='source_material_identifiers',
            field=models.CharField(blank=True, help_text='A unique i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='subspecific_genetic_lineage',
            field=models.CharField(blank=True, help_text='Informatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='sulfate',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='sulfide',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='target_gene',
            field=models.CharField(blank=True, help_text='Targeted g', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='target_subfragment',
            field=models.CharField(blank=True, help_text='Name of su', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='total_nitrogen',
            field=models.CharField(blank=True, help_text='total nitr', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='total_organic_carbon',
            field=models.CharField(blank=True, help_text='Definition', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='trophic_level',
            field=models.CharField(blank=True, choices=[('autotroph', 'autotroph'), ('carboxydotroph', 'carboxydotroph'), ('chemoautotroph', 'chemoautotroph'), ('chemoheterotroph', 'chemoheterotroph'), ('chemolithoautotroph', 'chemolithoautotroph'), ('chemolithotroph', 'chemolithotroph'), ('chemoorganoheterotroph', 'chemoorganoheterotroph'), ('chemoorganotroph', 'chemoorganotroph'), ('chemosynthetic', 'chemosynthetic'), ('chemotroph', 'chemotroph'), ('copiotroph', 'copiotroph'), ('diazotroph', 'diazotroph'), ('facultative autotroph', 'facultative autotroph'), ('heterotroph', 'heterotroph'), ('lithoautotroph', 'lithoautotroph'), ('lithoheterotroph', 'lithoheterotroph'), ('lithotroph', 'lithotroph'), ('methanotroph', 'methanotroph'), ('methylotroph', 'methylotroph'), ('mixotroph', 'mixotroph'), ('obligate chemoautolithotroph', 'obligate chemoautolithotroph'), ('oligotroph', 'oligotroph'), ('organoheterotroph', 'organoheterotroph'), ('organotroph', 'organotroph'), ('photoautotroph', 'photoautotroph'), ('photoheterotroph', 'photoheterotroph'), ('photolithoautotroph', 'photolithoautotroph'), ('photolithotroph', 'photolithotroph'), ('photosynthetic', 'photosynthetic'), ('phototroph', 'phototroph')], help_text='Trophic le', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment',
            name='water_content',
            field=models.CharField(blank=True, help_text='water cont', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='alkyl_diethers',
            field=models.CharField(blank=True, choices=[('M/L', 'M/L'), ('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='altitude',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='aminopeptidase_activity',
            field=models.CharField(blank=True, choices=[('mol/L/h', 'mol/L/h')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='ammonium',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, choices=[('L', 'L'), ('g', 'g'), ('kg', 'kg'), ('m2', 'm2'), ('m3', 'm3')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='bacterial_carbon_production',
            field=models.CharField(blank=True, choices=[('ng/h', 'ng/h')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='biomass',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('kg', 'kg'), ('t', 't')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='bishomohopanol',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L'), ('µg/g', 'µg/g')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='bromide',
            field=models.CharField(blank=True, choices=[('parts/million', 'parts/million'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='calcium',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('parts/million', 'parts/million'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='chloride',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='chlorophyll',
            field=models.CharField(blank=True, choices=[('mg/m3', 'mg/m3'), ('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='density',
            field=models.CharField(blank=True, choices=[('g/m3', 'g/m3')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='depth',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='diether_lipids',
            field=models.CharField(blank=True, choices=[('ng/L', 'ng/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='dissolved_carbon_dioxide',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='dissolved_hydrogen',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='dissolved_inorganic_carbon',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='dissolved_organic_carbon',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='dissolved_organic_nitrogen',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='dissolved_oxygen',
            field=models.CharField(blank=True, choices=[('µmol/kg', 'µmol/kg')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='elevation',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='glucosidase_activity',
            field=models.CharField(blank=True, choices=[('mol/L/h', 'mol/L/h')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='magnesium',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('mol/L', 'mol/L'), ('parts/million', 'parts/million')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='n_alkanes',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='nitrate',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='nitrite',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='nitrogen',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='organic_carbon',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='organic_matter',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='organic_nitrogen',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='particulate_organic_carbon',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='petroleum_hydrocarbon',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='phaeopigments',
            field=models.CharField(blank=True, choices=[('mg/m3', 'mg/m3'), ('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='phosphate',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='phospholipid_fatty_acid',
            field=models.CharField(blank=True, choices=[('mol/L', 'mol/L'), ('mol/g', 'mol/g')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='potassium',
            field=models.CharField(blank=True, choices=[('parts/million', 'parts/million'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='redox_potential',
            field=models.CharField(blank=True, choices=[('mV', 'mV')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='salinity',
            field=models.CharField(blank=True, choices=[('psu', 'psu')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='sample_storage_duration',
            field=models.CharField(blank=True, choices=[('days', 'days'), ('hours', 'hours'), ('months', 'months'), ('weeks', 'weeks'), ('years', 'years')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, choices=[('°C', '°C')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('mL', 'mL'), ('mg', 'mg'), ('ng', 'ng')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='silicate',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='sodium',
            field=models.CharField(blank=True, choices=[('parts/million', 'parts/million'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='sulfate',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='sulfide',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='total_nitrogen',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='total_organic_carbon',
            field=models.CharField(blank=True, choices=[('g/kg', 'g/kg')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_sediment_unit',
            name='water_content',
            field=models.CharField(blank=True, choices=[('cm3/cm3', 'cm3/cm3'), ('g/g', 'g/g')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='adapters',
            field=models.CharField(blank=True, help_text='Adapters p', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='altitude',
            field=models.CharField(blank=True, help_text='The altitu', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='annotation_source',
            field=models.CharField(blank=True, help_text='For cases ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='broad_scale_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='chimera_check_software',
            field=models.CharField(blank=True, help_text='Tool(s) us', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='collection_date',
            field=models.CharField(blank=True, help_text='The date t', max_length=120, validators=[django.core.validators.RegexValidator('(^[12][0-9]{3}(-(0[1-9]|1[0-2])(-(0[1-9]|[12][0-9]|3[01])(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?(/[0-9]{4}(-[0-9]{2}(-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?)?$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='depth',
            field=models.CharField(blank=True, help_text='The vertic', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='elevation',
            field=models.CharField(blank=True, help_text='The elevat', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='encoded_traits',
            field=models.CharField(blank=True, help_text='Should inc', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='environmental_medium',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='estimated_size',
            field=models.CharField(blank=True, help_text='The estima', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='experimental_factor',
            field=models.CharField(blank=True, help_text='Experiment', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='extrachromosomal_elements',
            field=models.CharField(blank=True, help_text='Do plasmid', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='geographic_location_country_and_or_sea',
            field=models.CharField(blank=True, choices=[('Afghanistan', 'Afghanistan'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Arctic Ocean', 'Arctic Ocean'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Ashmore and Cartier Islands', 'Ashmore and Cartier Islands'), ('Atlantic Ocean', 'Atlantic Ocean'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Baker Island', 'Baker Island'), ('Baltic Sea', 'Baltic Sea'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Bassas da India', 'Bassas da India'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia', 'Bolivia'), ('Borneo', 'Borneo'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Virgin Islands', 'British Virgin Islands'), ('Brunei', 'Brunei'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Canada', 'Canada'), ('Cape Verde', 'Cape Verde'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Clipperton Island', 'Clipperton Island'), ('Cocos Islands', 'Cocos Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Cook Islands', 'Cook Islands'), ('Coral Sea Islands', 'Coral Sea Islands'), ('Costa Rica', 'Costa Rica'), ("Cote d'Ivoire", "Cote d'Ivoire"), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Curacao', 'Curacao'), ('Cyprus', 'Cyprus'), ('Czech Republic', 'Czech Republic'), ('Democratic Republic of the Congo', 'Democratic Republic of the Congo'), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('East Timor', 'East Timor'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Ethiopia', 'Ethiopia'), ('Europa Island', 'Europa Island'), ('Falkland Islands (Islas Malvinas)', 'Falkland Islands (Islas Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern and Antarctic Lands', 'French Southern and Antarctic Lands'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Gaza Strip', 'Gaza Strip'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Glorioso Islands', 'Glorioso Islands'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and McDonald Islands', 'Heard Island and McDonald Islands'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Howland Island', 'Howland Island'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indian Ocean', 'Indian Ocean'), ('Indonesia', 'Indonesia'), ('Iran', 'Iran'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Jan Mayen', 'Jan Mayen'), ('Japan', 'Japan'), ('Jarvis Island', 'Jarvis Island'), ('Jersey', 'Jersey'), ('Johnston Atoll', 'Johnston Atoll'), ('Jordan', 'Jordan'), ('Juan de Nova Island', 'Juan de Nova Island'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kerguelen Archipelago', 'Kerguelen Archipelago'), ('Kingman Reef', 'Kingman Reef'), ('Kiribati', 'Kiribati'), ('Kosovo', 'Kosovo'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), ('Laos', 'Laos'), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macau', 'Macau'), ('Macedonia', 'Macedonia'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Mediterranean Sea', 'Mediterranean Sea'), ('Mexico', 'Mexico'), ('Micronesia', 'Micronesia'), ('Midway Islands', 'Midway Islands'), ('Moldova', 'Moldova'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Navassa Island', 'Navassa Island'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('North Korea', 'North Korea'), ('North Sea', 'North Sea'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pacific Ocean', 'Pacific Ocean'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palmyra Atoll', 'Palmyra Atoll'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paracel Islands', 'Paracel Islands'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn Islands', 'Pitcairn Islands'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Republic of the Congo', 'Republic of the Congo'), ('Reunion', 'Reunion'), ('Romania', 'Romania'), ('Ross Sea', 'Ross Sea'), ('Russia', 'Russia'), ('Rwanda', 'Rwanda'), ('Saint Helena', 'Saint Helena'), ('Saint Kitts and Nevis', 'Saint Kitts and Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Pierre and Miquelon', 'Saint Pierre and Miquelon'), ('Saint Vincent and the Grenadines', 'Saint Vincent and the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Sint Maarten', 'Sint Maarten'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia and the South Sandwich Islands', 'South Georgia and the South Sandwich Islands'), ('South Korea', 'South Korea'), ('Southern Ocean', 'Southern Ocean'), ('Spain', 'Spain'), ('Spratly Islands', 'Spratly Islands'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard', 'Svalbard'), ('Swaziland', 'Swaziland'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syria', 'Syria'), ('Taiwan', 'Taiwan'), ('Tajikistan', 'Tajikistan'), ('Tanzania', 'Tanzania'), ('Tasman Sea', 'Tasman Sea'), ('Thailand', 'Thailand'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad and Tobago', 'Trinidad and Tobago'), ('Tromelin Island', 'Tromelin Island'), ('Tunisia', 'Tunisia'), ('Turkey', 'Turkey'), ('Turkmenistan', 'Turkmenistan'), ('Turks and Caicos Islands', 'Turks and Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('USA', 'USA'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela', 'Venezuela'), ('Viet Nam', 'Viet Nam'), ('Virgin Islands', 'Virgin Islands'), ('Wake Island', 'Wake Island'), ('Wallis and Futuna', 'Wallis and Futuna'), ('West Bank', 'West Bank'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('restricted access', 'restricted access')], help_text='The locati', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='geographic_location_region_and_locality',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='host_disease_status',
            field=models.CharField(blank=True, help_text='list of di', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='host_scientific_name',
            field=models.CharField(blank=True, help_text='Scientific', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='isolation_and_growth_condition',
            field=models.CharField(blank=True, help_text='Publicatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='known_pathogenicity',
            field=models.CharField(blank=True, help_text='To what is', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='library_construction_method',
            field=models.CharField(blank=True, help_text='Library co', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='library_reads_sequenced',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='library_screening_strategy',
            field=models.CharField(blank=True, help_text='Specific e', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='library_size',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='library_vector',
            field=models.CharField(blank=True, help_text='Cloning ve', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='local_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='multiplex_identifiers',
            field=models.CharField(blank=True, help_text='Molecular ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='negative_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='nucleic_acid_amplification',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='nucleic_acid_extraction',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='number_of_replicons',
            field=models.CharField(blank=True, help_text='Reports th', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='observed_biotic_relationship',
            field=models.CharField(blank=True, choices=[('commensal', 'commensal'), ('free living', 'free living'), ('mutualism', 'mutualism'), ('parasite', 'parasite'), ('symbiont', 'symbiont')], help_text='Is it free', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='organic_matter',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='pH',
            field=models.CharField(blank=True, help_text='pH measure', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='pcr_conditions',
            field=models.CharField(blank=True, help_text='Descriptio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='pcr_primers',
            field=models.CharField(blank=True, help_text='PCR primer', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='perturbation',
            field=models.CharField(blank=True, help_text='type of pe', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='ploidy',
            field=models.CharField(blank=True, help_text='The ploidy', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='positive_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='project_name',
            field=models.CharField(blank=True, help_text='Name of th', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='propagation',
            field=models.CharField(blank=True, help_text='The type o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='reference_for_biomaterial',
            field=models.CharField(blank=True, help_text='Primary pu', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='relationship_to_oxygen',
            field=models.CharField(blank=True, choices=[('aerobe', 'aerobe'), ('anaerobe', 'anaerobe'), ('facultative', 'facultative'), ('microaerophilic', 'microaerophilic'), ('microanaerobe', 'microanaerobe'), ('obligate aerobe', 'obligate aerobe'), ('obligate anaerobe', 'obligate anaerobe')], help_text='Is this or', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='relevant_electronic_resources',
            field=models.CharField(blank=True, help_text='A related ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='relevant_standard_operating_procedures',
            field=models.CharField(blank=True, help_text='Standard o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='sample_collection_device',
            field=models.CharField(blank=True, help_text='The device', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='sample_collection_method',
            field=models.CharField(blank=True, help_text='The method', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='sample_material_processing',
            field=models.CharField(blank=True, help_text='A brief de', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, help_text='Volume (ml', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='sequence_quality_check',
            field=models.CharField(blank=True, choices=[('manual', 'manual'), ('none', 'none'), ('software', 'software')], help_text='Indicate i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='sequencing_method',
            field=models.CharField(blank=True, help_text='Sequencing', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='source_material_identifiers',
            field=models.CharField(blank=True, help_text='A unique i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='subspecific_genetic_lineage',
            field=models.CharField(blank=True, help_text='Informatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='target_gene',
            field=models.CharField(blank=True, help_text='Targeted g', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='target_subfragment',
            field=models.CharField(blank=True, help_text='Name of su', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='total_nitrogen',
            field=models.CharField(blank=True, help_text='total nitr', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil',
            name='trophic_level',
            field=models.CharField(blank=True, choices=[('autotroph', 'autotroph'), ('carboxydotroph', 'carboxydotroph'), ('chemoautotroph', 'chemoautotroph'), ('chemoheterotroph', 'chemoheterotroph'), ('chemolithoautotroph', 'chemolithoautotroph'), ('chemolithotroph', 'chemolithotroph'), ('chemoorganoheterotroph', 'chemoorganoheterotroph'), ('chemoorganotroph', 'chemoorganotroph'), ('chemosynthetic', 'chemosynthetic'), ('chemotroph', 'chemotroph'), ('copiotroph', 'copiotroph'), ('diazotroph', 'diazotroph'), ('facultative autotroph', 'facultative autotroph'), ('heterotroph', 'heterotroph'), ('lithoautotroph', 'lithoautotroph'), ('lithoheterotroph', 'lithoheterotroph'), ('lithotroph', 'lithotroph'), ('methanotroph', 'methanotroph'), ('methylotroph', 'methylotroph'), ('mixotroph', 'mixotroph'), ('obligate chemoautolithotroph', 'obligate chemoautolithotroph'), ('oligotroph', 'oligotroph'), ('organoheterotroph', 'organoheterotroph'), ('organotroph', 'organotroph'), ('photoautotroph', 'photoautotroph'), ('photoheterotroph', 'photoheterotroph'), ('photolithoautotroph', 'photolithoautotroph'), ('photolithotroph', 'photolithotroph'), ('photosynthetic', 'photosynthetic'), ('phototroph', 'phototroph')], help_text='Trophic le', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil_unit',
            name='altitude',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil_unit',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, choices=[('L', 'L'), ('g', 'g'), ('kg', 'kg'), ('m2', 'm2'), ('m3', 'm3')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil_unit',
            name='depth',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil_unit',
            name='elevation',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil_unit',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil_unit',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil_unit',
            name='organic_matter',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil_unit',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('mL', 'mL'), ('mg', 'mg'), ('ng', 'ng')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil_unit',
            name='temperature',
            field=models.CharField(blank=True, choices=[('ºC', 'ºC')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_soil_unit',
            name='total_nitrogen',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='adapters',
            field=models.CharField(blank=True, help_text='Adapters p', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='alkalinity',
            field=models.CharField(blank=True, help_text='alkalinity', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='altitude',
            field=models.CharField(blank=True, help_text='The altitu', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='ammonium',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='annotation_source',
            field=models.CharField(blank=True, help_text='For cases ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='biomass',
            field=models.CharField(blank=True, help_text='amount of ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='broad_scale_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='bromide',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='calcium',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='chemical_administration',
            field=models.CharField(blank=True, help_text='list of ch', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='chimera_check_software',
            field=models.CharField(blank=True, help_text='Tool(s) us', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='chloride',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='chlorophyll',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='collection_date',
            field=models.CharField(blank=True, help_text='The date t', max_length=120, validators=[django.core.validators.RegexValidator('(^[12][0-9]{3}(-(0[1-9]|1[0-2])(-(0[1-9]|[12][0-9]|3[01])(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?(/[0-9]{4}(-[0-9]{2}(-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?)?$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='density',
            field=models.CharField(blank=True, help_text='density of', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='depth',
            field=models.CharField(blank=True, help_text='The vertic', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='diether_lipids',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='dissolved_carbon_dioxide',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='dissolved_hydrogen',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='dissolved_inorganic_carbon',
            field=models.CharField(blank=True, help_text='dissolved ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='dissolved_organic_nitrogen',
            field=models.CharField(blank=True, help_text='dissolved ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='dissolved_oxygen',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='elevation',
            field=models.CharField(blank=True, help_text='The elevat', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='encoded_traits',
            field=models.CharField(blank=True, help_text='Should inc', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='environmental_medium',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='estimated_size',
            field=models.CharField(blank=True, help_text='The estima', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='experimental_factor',
            field=models.CharField(blank=True, help_text='Experiment', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='extrachromosomal_elements',
            field=models.CharField(blank=True, help_text='Do plasmid', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='geographic_location_country_and_or_sea',
            field=models.CharField(blank=True, choices=[('Afghanistan', 'Afghanistan'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Arctic Ocean', 'Arctic Ocean'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Ashmore and Cartier Islands', 'Ashmore and Cartier Islands'), ('Atlantic Ocean', 'Atlantic Ocean'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Baker Island', 'Baker Island'), ('Baltic Sea', 'Baltic Sea'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Bassas da India', 'Bassas da India'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia', 'Bolivia'), ('Borneo', 'Borneo'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Virgin Islands', 'British Virgin Islands'), ('Brunei', 'Brunei'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Canada', 'Canada'), ('Cape Verde', 'Cape Verde'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Clipperton Island', 'Clipperton Island'), ('Cocos Islands', 'Cocos Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Cook Islands', 'Cook Islands'), ('Coral Sea Islands', 'Coral Sea Islands'), ('Costa Rica', 'Costa Rica'), ("Cote d'Ivoire", "Cote d'Ivoire"), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Curacao', 'Curacao'), ('Cyprus', 'Cyprus'), ('Czech Republic', 'Czech Republic'), ('Democratic Republic of the Congo', 'Democratic Republic of the Congo'), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('East Timor', 'East Timor'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Ethiopia', 'Ethiopia'), ('Europa Island', 'Europa Island'), ('Falkland Islands (Islas Malvinas)', 'Falkland Islands (Islas Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern and Antarctic Lands', 'French Southern and Antarctic Lands'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Gaza Strip', 'Gaza Strip'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Glorioso Islands', 'Glorioso Islands'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and McDonald Islands', 'Heard Island and McDonald Islands'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Howland Island', 'Howland Island'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indian Ocean', 'Indian Ocean'), ('Indonesia', 'Indonesia'), ('Iran', 'Iran'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Jan Mayen', 'Jan Mayen'), ('Japan', 'Japan'), ('Jarvis Island', 'Jarvis Island'), ('Jersey', 'Jersey'), ('Johnston Atoll', 'Johnston Atoll'), ('Jordan', 'Jordan'), ('Juan de Nova Island', 'Juan de Nova Island'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kerguelen Archipelago', 'Kerguelen Archipelago'), ('Kingman Reef', 'Kingman Reef'), ('Kiribati', 'Kiribati'), ('Kosovo', 'Kosovo'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), ('Laos', 'Laos'), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macau', 'Macau'), ('Macedonia', 'Macedonia'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Mediterranean Sea', 'Mediterranean Sea'), ('Mexico', 'Mexico'), ('Micronesia', 'Micronesia'), ('Midway Islands', 'Midway Islands'), ('Moldova', 'Moldova'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Navassa Island', 'Navassa Island'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('North Korea', 'North Korea'), ('North Sea', 'North Sea'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pacific Ocean', 'Pacific Ocean'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palmyra Atoll', 'Palmyra Atoll'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paracel Islands', 'Paracel Islands'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn Islands', 'Pitcairn Islands'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Republic of the Congo', 'Republic of the Congo'), ('Reunion', 'Reunion'), ('Romania', 'Romania'), ('Ross Sea', 'Ross Sea'), ('Russia', 'Russia'), ('Rwanda', 'Rwanda'), ('Saint Helena', 'Saint Helena'), ('Saint Kitts and Nevis', 'Saint Kitts and Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Pierre and Miquelon', 'Saint Pierre and Miquelon'), ('Saint Vincent and the Grenadines', 'Saint Vincent and the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Sint Maarten', 'Sint Maarten'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia and the South Sandwich Islands', 'South Georgia and the South Sandwich Islands'), ('South Korea', 'South Korea'), ('Southern Ocean', 'Southern Ocean'), ('Spain', 'Spain'), ('Spratly Islands', 'Spratly Islands'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard', 'Svalbard'), ('Swaziland', 'Swaziland'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syria', 'Syria'), ('Taiwan', 'Taiwan'), ('Tajikistan', 'Tajikistan'), ('Tanzania', 'Tanzania'), ('Tasman Sea', 'Tasman Sea'), ('Thailand', 'Thailand'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad and Tobago', 'Trinidad and Tobago'), ('Tromelin Island', 'Tromelin Island'), ('Tunisia', 'Tunisia'), ('Turkey', 'Turkey'), ('Turkmenistan', 'Turkmenistan'), ('Turks and Caicos Islands', 'Turks and Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('USA', 'USA'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela', 'Venezuela'), ('Viet Nam', 'Viet Nam'), ('Virgin Islands', 'Virgin Islands'), ('Wake Island', 'Wake Island'), ('Wallis and Futuna', 'Wallis and Futuna'), ('West Bank', 'West Bank'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('restricted access', 'restricted access')], help_text='The locati', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='geographic_location_region_and_locality',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='host_disease_status',
            field=models.CharField(blank=True, help_text='list of di', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='host_scientific_name',
            field=models.CharField(blank=True, help_text='Scientific', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='isolation_and_growth_condition',
            field=models.CharField(blank=True, help_text='Publicatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='known_pathogenicity',
            field=models.CharField(blank=True, help_text='To what is', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='library_construction_method',
            field=models.CharField(blank=True, help_text='Library co', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='library_reads_sequenced',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='library_screening_strategy',
            field=models.CharField(blank=True, help_text='Specific e', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='library_size',
            field=models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='library_vector',
            field=models.CharField(blank=True, help_text='Cloning ve', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='local_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='multiplex_identifiers',
            field=models.CharField(blank=True, help_text='Molecular ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='negative_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='nitrate',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='nitrite',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='nitrogen',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='nucleic_acid_amplification',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='nucleic_acid_extraction',
            field=models.CharField(blank=True, help_text='A link to ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='number_of_replicons',
            field=models.CharField(blank=True, help_text='Reports th', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='observed_biotic_relationship',
            field=models.CharField(blank=True, choices=[('commensal', 'commensal'), ('free living', 'free living'), ('mutualism', 'mutualism'), ('parasite', 'parasite'), ('symbiont', 'symbiont')], help_text='Is it free', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='organic_carbon',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='organic_matter',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='organic_nitrogen',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='organism_count',
            field=models.CharField(blank=True, help_text='Total cell', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='oxygenation_status_of_sample',
            field=models.CharField(blank=True, choices=[('aerobic', 'aerobic'), ('anaerobic', 'anaerobic')], help_text='oxygenatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='pH',
            field=models.CharField(blank=True, help_text='pH measure', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='pcr_conditions',
            field=models.CharField(blank=True, help_text='Descriptio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='pcr_primers',
            field=models.CharField(blank=True, help_text='PCR primer', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='perturbation',
            field=models.CharField(blank=True, help_text='type of pe', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='phosphate',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='phospholipid_fatty_acid',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='ploidy',
            field=models.CharField(blank=True, help_text='The ploidy', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='positive_control_type',
            field=models.CharField(blank=True, help_text='The substa', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='potassium',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='pressure',
            field=models.CharField(blank=True, help_text='pressure t', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='project_name',
            field=models.CharField(blank=True, help_text='Name of th', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='propagation',
            field=models.CharField(blank=True, help_text='The type o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='reference_for_biomaterial',
            field=models.CharField(blank=True, help_text='Primary pu', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='relationship_to_oxygen',
            field=models.CharField(blank=True, choices=[('aerobe', 'aerobe'), ('anaerobe', 'anaerobe'), ('facultative', 'facultative'), ('microaerophilic', 'microaerophilic'), ('microanaerobe', 'microanaerobe'), ('obligate aerobe', 'obligate aerobe'), ('obligate anaerobe', 'obligate anaerobe')], help_text='Is this or', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='relevant_electronic_resources',
            field=models.CharField(blank=True, help_text='A related ', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='relevant_standard_operating_procedures',
            field=models.CharField(blank=True, help_text='Standard o', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='salinity',
            field=models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='sample_collection_device',
            field=models.CharField(blank=True, help_text='The device', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='sample_collection_method',
            field=models.CharField(blank=True, help_text='The method', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='sample_material_processing',
            field=models.CharField(blank=True, help_text='A brief de', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='sample_storage_duration',
            field=models.CharField(blank=True, help_text='duration f', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='sample_storage_location',
            field=models.CharField(blank=True, help_text='location a', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, help_text='Volume (ml', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='sequence_quality_check',
            field=models.CharField(blank=True, choices=[('manual', 'manual'), ('none', 'none'), ('software', 'software')], help_text='Indicate i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='sequencing_method',
            field=models.CharField(blank=True, help_text='Sequencing', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='silicate',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='sodium',
            field=models.CharField(blank=True, help_text='sodium con', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='source_material_identifiers',
            field=models.CharField(blank=True, help_text='A unique i', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='subspecific_genetic_lineage',
            field=models.CharField(blank=True, help_text='Informatio', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='sulfate',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='sulfide',
            field=models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='target_gene',
            field=models.CharField(blank=True, help_text='Targeted g', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='target_subfragment',
            field=models.CharField(blank=True, help_text='Name of su', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='temperature',
            field=models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='total_nitrogen',
            field=models.CharField(blank=True, help_text='total nitr', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='trophic_level',
            field=models.CharField(blank=True, choices=[('autotroph', 'autotroph'), ('carboxydotroph', 'carboxydotroph'), ('chemoautotroph', 'chemoautotroph'), ('chemoheterotroph', 'chemoheterotroph'), ('chemolithoautotroph', 'chemolithoautotroph'), ('chemolithotroph', 'chemolithotroph'), ('chemoorganoheterotroph', 'chemoorganoheterotroph'), ('chemoorganotroph', 'chemoorganotroph'), ('chemosynthetic', 'chemosynthetic'), ('chemotroph', 'chemotroph'), ('copiotroph', 'copiotroph'), ('diazotroph', 'diazotroph'), ('facultative autotroph', 'facultative autotroph'), ('heterotroph', 'heterotroph'), ('lithoautotroph', 'lithoautotroph'), ('lithoheterotroph', 'lithoheterotroph'), ('lithotroph', 'lithotroph'), ('methanotroph', 'methanotroph'), ('methylotroph', 'methylotroph'), ('mixotroph', 'mixotroph'), ('obligate chemoautolithotroph', 'obligate chemoautolithotroph'), ('oligotroph', 'oligotroph'), ('organoheterotroph', 'organoheterotroph'), ('organotroph', 'organotroph'), ('photoautotroph', 'photoautotroph'), ('photoheterotroph', 'photoheterotroph'), ('photolithoautotroph', 'photolithoautotroph'), ('photolithotroph', 'photolithotroph'), ('photosynthetic', 'photosynthetic'), ('phototroph', 'phototroph')], help_text='Trophic le', max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water',
            name='water_current',
            field=models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')]),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='alkalinity',
            field=models.CharField(blank=True, choices=[('mEq/L', 'mEq/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='altitude',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='ammonium',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, choices=[('L', 'L'), ('g', 'g'), ('kg', 'kg'), ('m2', 'm2'), ('m3', 'm3')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='biomass',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('kg', 'kg'), ('t', 't')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='bromide',
            field=models.CharField(blank=True, choices=[('parts/million', 'parts/million'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='calcium',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('parts/million', 'parts/million'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='chloride',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='chlorophyll',
            field=models.CharField(blank=True, choices=[('mg/m3', 'mg/m3'), ('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='density',
            field=models.CharField(blank=True, choices=[('g/m3', 'g/m3')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='depth',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='diether_lipids',
            field=models.CharField(blank=True, choices=[('ng/L', 'ng/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='dissolved_carbon_dioxide',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='dissolved_hydrogen',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='dissolved_inorganic_carbon',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='dissolved_organic_nitrogen',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='dissolved_oxygen',
            field=models.CharField(blank=True, choices=[('µmol/kg', 'µmol/kg')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='elevation',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='nitrate',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='nitrite',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='nitrogen',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='organic_carbon',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='organic_matter',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='organic_nitrogen',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='phosphate',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='phospholipid_fatty_acid',
            field=models.CharField(blank=True, choices=[('mol/L', 'mol/L'), ('mol/g', 'mol/g')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='potassium',
            field=models.CharField(blank=True, choices=[('parts/million', 'parts/million'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='pressure',
            field=models.CharField(blank=True, choices=[('atm', 'atm'), ('bar', 'bar')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='salinity',
            field=models.CharField(blank=True, choices=[('psu', 'psu')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='sample_storage_duration',
            field=models.CharField(blank=True, choices=[('days', 'days'), ('hours', 'hours'), ('months', 'months'), ('weeks', 'weeks'), ('years', 'years')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, choices=[('°C', '°C')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('mL', 'mL'), ('mg', 'mg'), ('ng', 'ng')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='silicate',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='sodium',
            field=models.CharField(blank=True, choices=[('parts/million', 'parts/million'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='sulfate',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='sulfide',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='temperature',
            field=models.CharField(blank=True, choices=[('ºC', 'ºC')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='total_nitrogen',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AddField(
            model_name='gsc_mixs_water_unit',
            name='water_current',
            field=models.CharField(blank=True, choices=[('knot', 'knot'), ('m3/s', 'm3/s')], max_length=120),
        ),
        migrations.AlterField(
            model_name='ena_binned_metagenome',
            name='assembly_quality',
            field=models.CharField(blank=True, choices=[('Many fragments with little to no review of assembly other than reporting of standard assembly statistics', 'Many fragments with little to no review of assembly other than reporting of standard assembly statistics'), ('Multiple fragments where gaps span repetitive regions. Presence of the 23S, 16S, and 5S rRNA genes and at least 18 tRNAs', 'Multiple fragments where gaps span repetitive regions. Presence of the 23S, 16S, and 5S rRNA genes and at least 18 tRNAs'), ('Single contiguous sequence without gaps or ambiguities with a consensus error rate equivalent to Q50 or better', 'Single contiguous sequence without gaps or ambiguities with a consensus error rate equivalent to Q50 or better')], help_text='The assemb', max_length=120),
        ),
        migrations.AlterField(
            model_name='ena_binned_metagenome',
            name='assembly_software',
            field=models.CharField(blank=True, help_text='Tool(s) us', max_length=120),
        ),
        migrations.AlterField(
            model_name='ena_binned_metagenome',
            name='binning_parameters',
            field=models.CharField(blank=True, help_text='The parame', max_length=120),
        ),
        migrations.AlterField(
            model_name='ena_binned_metagenome',
            name='binning_software',
            field=models.CharField(blank=True, help_text='Tool(s) us', max_length=120),
        ),
        migrations.AlterField(
            model_name='ena_binned_metagenome',
            name='completeness_score',
            field=models.CharField(blank=True, help_text='Completene', max_length=120, validators=[django.core.validators.RegexValidator('^(\\d|[1-9]\\d|\\d\\.\\d{1,2}|[1-9]\\d\\.\\d{1,2}|100)$')]),
        ),
        migrations.AlterField(
            model_name='ena_binned_metagenome',
            name='completeness_software',
            field=models.CharField(blank=True, help_text='Tools used', max_length=120),
        ),
        migrations.AlterField(
            model_name='ena_binned_metagenome',
            name='contamination_score',
            field=models.CharField(blank=True, help_text='The contam', max_length=120, validators=[django.core.validators.RegexValidator('^(\\d|[1-9]\\d|\\d\\.\\d{1,2}|[1-9]\\d\\.\\d{1,2}|100)$')]),
        ),
        migrations.AlterField(
            model_name='ena_binned_metagenome',
            name='metagenomic_source',
            field=models.CharField(blank=True, help_text='The metage', max_length=120),
        ),
        migrations.AlterField(
            model_name='ena_binned_metagenome',
            name='sample_derived_from',
            field=models.CharField(blank=True, help_text='Reference ', max_length=120, validators=[django.core.validators.RegexValidator('(^[ESD]R[SR]\\d{6,}(,[ESD]R[SR]\\d{6,})*$)|(^SAM[END][AG]?\\d+(,SAM[END][AG]?\\d+)*$)|(^EGA[NR]\\d{11}(,EGA[NR]\\d{11})*$)|(^[ESD]R[SR]\\d{6,}-[ESD]R[SR]\\d{6,}$)|(^SAM[END][AG]?\\d+-SAM[END][AG]?\\d+$)|(^EGA[NR]\\d{11}-EGA[NR]\\d{11}$)')]),
        ),
        migrations.AlterField(
            model_name='ena_binned_metagenome',
            name='taxonomic_identity_marker',
            field=models.CharField(blank=True, help_text='The phylog', max_length=120),
        ),
        migrations.AlterField(
            model_name='ena_binned_metagenome_unit',
            name='completeness_score',
            field=models.CharField(blank=True, choices=[('%', '%')], max_length=120),
        ),
        migrations.AlterField(
            model_name='ena_binned_metagenome_unit',
            name='contamination_score',
            field=models.CharField(blank=True, choices=[('%', '%')], max_length=120),
        ),
        migrations.AlterField(
            model_name='ena_binned_metagenome_unit',
            name='reassembly_post_binning',
            field=models.CharField(blank=True, choices=[('No', 'No'), ('Yes', 'Yes')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_air_unit',
            name='air_particulate_matter_concentration',
            field=models.CharField(blank=True, choices=[('µg/m3', 'µg/m3')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_air_unit',
            name='barometric_pressure',
            field=models.CharField(blank=True, choices=[('Torr', 'Torr'), ('in. Hg', 'in. Hg'), ('millibar(hPa)', 'millibar(hPa)'), ('mm Hg', 'mm Hg')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_air_unit',
            name='carbon_dioxide',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_air_unit',
            name='carbon_monoxide',
            field=models.CharField(blank=True, choices=[('µM/L', 'µM/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_air_unit',
            name='humidity',
            field=models.CharField(blank=True, choices=[('%', '%'), ('g/m3', 'g/m3')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_air_unit',
            name='oxygen',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('parts/million', 'parts/million')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_air_unit',
            name='pollutants',
            field=models.CharField(blank=True, choices=[('M/L', 'M/L'), ('g', 'g'), ('mg/L', 'mg/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_air_unit',
            name='solar_irradiance',
            field=models.CharField(blank=True, choices=[('W/m2', 'W/m2')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_air_unit',
            name='ventilation_rate',
            field=models.CharField(blank=True, choices=[('L/sec', 'L/sec'), ('m3/min', 'm3/min')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_air_unit',
            name='volatile_organic_compounds',
            field=models.CharField(blank=True, choices=[('parts/million', 'parts/million'), ('µg/m3', 'µg/m3')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_air_unit',
            name='wind_speed',
            field=models.CharField(blank=True, choices=[('km/h', 'km/h'), ('m/s', 'm/s')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_host_associated_unit',
            name='host_blood_pressure_diastolic',
            field=models.CharField(blank=True, choices=[('mm Hg', 'mm Hg')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_host_associated_unit',
            name='host_blood_pressure_systolic',
            field=models.CharField(blank=True, choices=[('mm Hg', 'mm Hg')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_human_associated_unit',
            name='weight_loss_in_last_three_months',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('kg', 'kg')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_human_oral_unit',
            name='time_since_last_toothbrushing',
            field=models.CharField(blank=True, choices=[('hours', 'hours'), ('minutes', 'minutes')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_human_skin_unit',
            name='host_age',
            field=models.CharField(blank=True, choices=[('centuries', 'centuries'), ('days', 'days'), ('decades', 'decades'), ('hours', 'hours'), ('minutes', 'minutes'), ('months', 'months'), ('seconds', 'seconds'), ('weeks', 'weeks'), ('years', 'years')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_human_skin_unit',
            name='host_body_mass_index',
            field=models.CharField(blank=True, choices=[('kg/m2', 'kg/m2')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_human_skin_unit',
            name='host_body_temperature',
            field=models.CharField(blank=True, choices=[('ºC', 'ºC')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_human_skin_unit',
            name='host_height',
            field=models.CharField(blank=True, choices=[('cm', 'cm'), ('m', 'm'), ('mm', 'mm')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_human_skin_unit',
            name='host_pulse',
            field=models.CharField(blank=True, choices=[('bpm', 'bpm')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_human_skin_unit',
            name='host_total_mass',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('kg', 'kg')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_human_skin_unit',
            name='time_since_last_wash',
            field=models.CharField(blank=True, choices=[('hours', 'hours'), ('minutes', 'minutes')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_microbial_mat_biolfilm_unit',
            name='turbidity',
            field=models.CharField(blank=True, choices=[('FTU', 'FTU'), ('NTU', 'NTU')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='altitude',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='ammonium',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='biomass',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('kg', 'kg'), ('t', 't')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='bromide',
            field=models.CharField(blank=True, choices=[('parts/million', 'parts/million'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='calcium',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('parts/million', 'parts/million'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='chloride',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='chlorophyll',
            field=models.CharField(blank=True, choices=[('mg/m3', 'mg/m3'), ('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='density',
            field=models.CharField(blank=True, choices=[('g/m3', 'g/m3')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='diether_lipids',
            field=models.CharField(blank=True, choices=[('ng/L', 'ng/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='dissolved_carbon_dioxide',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='dissolved_hydrogen',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='dissolved_inorganic_carbon',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='dissolved_organic_nitrogen',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='dissolved_oxygen',
            field=models.CharField(blank=True, choices=[('µmol/kg', 'µmol/kg')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='elevation',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='nitrite',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='nitrogen',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='organic_carbon',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='organic_matter',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='organic_nitrogen',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='phospholipid_fatty_acid',
            field=models.CharField(blank=True, choices=[('mol/L', 'mol/L'), ('mol/g', 'mol/g')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='potassium',
            field=models.CharField(blank=True, choices=[('parts/million', 'parts/million'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='pressure',
            field=models.CharField(blank=True, choices=[('atm', 'atm'), ('bar', 'bar')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='silicate',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='sulfate',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='sulfide',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_miscellaneous_natural_or_artificial_environment_unit',
            name='water_current',
            field=models.CharField(blank=True, choices=[('knot', 'knot'), ('m3/s', 'm3/s')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_plant_associated_unit',
            name='host_dry_mass',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('kg', 'kg'), ('mg', 'mg')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_plant_associated_unit',
            name='host_length',
            field=models.CharField(blank=True, choices=[('cm', 'cm'), ('m', 'm'), ('mm', 'mm')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_plant_associated_unit',
            name='host_wet_mass',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('kg', 'kg'), ('mg', 'mg')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_sediment_unit',
            name='methane',
            field=models.CharField(blank=True, choices=[('µM/L', 'µM/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_sediment_unit',
            name='total_carbon',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_soil_unit',
            name='extreme_unusual_properties_Al_saturation',
            field=models.CharField(blank=True, choices=[('%', '%')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_soil_unit',
            name='mean_annual_and_seasonal_precipitation',
            field=models.CharField(blank=True, choices=[('mm', 'mm')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_soil_unit',
            name='mean_annual_and_seasonal_temperature',
            field=models.CharField(blank=True, choices=[('ºC', 'ºC')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_soil_unit',
            name='microbial_biomass',
            field=models.CharField(blank=True, choices=[('g/kg', 'g/kg')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_soil_unit',
            name='sample_weight_for_DNA_extraction',
            field=models.CharField(blank=True, choices=[('g', 'g')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_soil_unit',
            name='slope_gradient',
            field=models.CharField(blank=True, choices=[('%', '%')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_soil_unit',
            name='soil_texture_measurement',
            field=models.CharField(blank=True, choices=[('% sand/silt/clay', '% sand/silt/clay')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_soil_unit',
            name='total_organic_carbon',
            field=models.CharField(blank=True, choices=[('g/kg', 'g/kg')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_soil_unit',
            name='water_content',
            field=models.CharField(blank=True, choices=[('cm3/cm3', 'cm3/cm3'), ('g/g', 'g/g')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge',
            name='broad_scale_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge',
            name='collection_date',
            field=models.CharField(blank=True, help_text='The date t', max_length=120, validators=[django.core.validators.RegexValidator('(^[12][0-9]{3}(-(0[1-9]|1[0-2])(-(0[1-9]|[12][0-9]|3[01])(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?(\\/[0-9]{4}(-[0-9]{2}(-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?)?$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge',
            name='environmental_medium',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge',
            name='geographic_location_country_and_or_sea',
            field=models.CharField(blank=True, choices=[('Afghanistan', 'Afghanistan'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Arctic Ocean', 'Arctic Ocean'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Ashmore and Cartier Islands', 'Ashmore and Cartier Islands'), ('Atlantic Ocean', 'Atlantic Ocean'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Baker Island', 'Baker Island'), ('Baltic Sea', 'Baltic Sea'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Bassas da India', 'Bassas da India'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia', 'Bolivia'), ('Borneo', 'Borneo'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Virgin Islands', 'British Virgin Islands'), ('Brunei', 'Brunei'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Canada', 'Canada'), ('Cape Verde', 'Cape Verde'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Clipperton Island', 'Clipperton Island'), ('Cocos Islands', 'Cocos Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Cook Islands', 'Cook Islands'), ('Coral Sea Islands', 'Coral Sea Islands'), ('Costa Rica', 'Costa Rica'), ("Cote d'Ivoire", "Cote d'Ivoire"), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Curacao', 'Curacao'), ('Cyprus', 'Cyprus'), ('Czech Republic', 'Czech Republic'), ('Democratic Republic of the Congo', 'Democratic Republic of the Congo'), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('East Timor', 'East Timor'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Ethiopia', 'Ethiopia'), ('Europa Island', 'Europa Island'), ('Falkland Islands (Islas Malvinas)', 'Falkland Islands (Islas Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern and Antarctic Lands', 'French Southern and Antarctic Lands'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Gaza Strip', 'Gaza Strip'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Glorioso Islands', 'Glorioso Islands'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and McDonald Islands', 'Heard Island and McDonald Islands'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Howland Island', 'Howland Island'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indian Ocean', 'Indian Ocean'), ('Indonesia', 'Indonesia'), ('Iran', 'Iran'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Jan Mayen', 'Jan Mayen'), ('Japan', 'Japan'), ('Jarvis Island', 'Jarvis Island'), ('Jersey', 'Jersey'), ('Johnston Atoll', 'Johnston Atoll'), ('Jordan', 'Jordan'), ('Juan de Nova Island', 'Juan de Nova Island'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kerguelen Archipelago', 'Kerguelen Archipelago'), ('Kingman Reef', 'Kingman Reef'), ('Kiribati', 'Kiribati'), ('Kosovo', 'Kosovo'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), ('Laos', 'Laos'), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macau', 'Macau'), ('Macedonia', 'Macedonia'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Mediterranean Sea', 'Mediterranean Sea'), ('Mexico', 'Mexico'), ('Micronesia', 'Micronesia'), ('Midway Islands', 'Midway Islands'), ('Moldova', 'Moldova'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Navassa Island', 'Navassa Island'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('North Korea', 'North Korea'), ('North Sea', 'North Sea'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pacific Ocean', 'Pacific Ocean'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palmyra Atoll', 'Palmyra Atoll'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paracel Islands', 'Paracel Islands'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn Islands', 'Pitcairn Islands'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Republic of the Congo', 'Republic of the Congo'), ('Reunion', 'Reunion'), ('Romania', 'Romania'), ('Ross Sea', 'Ross Sea'), ('Russia', 'Russia'), ('Rwanda', 'Rwanda'), ('Saint Helena', 'Saint Helena'), ('Saint Kitts and Nevis', 'Saint Kitts and Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Pierre and Miquelon', 'Saint Pierre and Miquelon'), ('Saint Vincent and the Grenadines', 'Saint Vincent and the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Sint Maarten', 'Sint Maarten'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia and the South Sandwich Islands', 'South Georgia and the South Sandwich Islands'), ('South Korea', 'South Korea'), ('Southern Ocean', 'Southern Ocean'), ('Spain', 'Spain'), ('Spratly Islands', 'Spratly Islands'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard', 'Svalbard'), ('Swaziland', 'Swaziland'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syria', 'Syria'), ('Taiwan', 'Taiwan'), ('Tajikistan', 'Tajikistan'), ('Tanzania', 'Tanzania'), ('Tasman Sea', 'Tasman Sea'), ('Thailand', 'Thailand'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad and Tobago', 'Trinidad and Tobago'), ('Tromelin Island', 'Tromelin Island'), ('Tunisia', 'Tunisia'), ('Turkey', 'Turkey'), ('Turkmenistan', 'Turkmenistan'), ('Turks and Caicos Islands', 'Turks and Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('USA', 'USA'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela', 'Venezuela'), ('Viet Nam', 'Viet Nam'), ('Virgin Islands', 'Virgin Islands'), ('Wake Island', 'Wake Island'), ('Wallis and Futuna', 'Wallis and Futuna'), ('West Bank', 'West Bank'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('restricted access', 'restricted access')], help_text='The locati', max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')]),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge',
            name='local_environmental_context',
            field=models.CharField(blank=True, help_text='Report the', max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge',
            name='project_name',
            field=models.CharField(blank=True, help_text='Name of th', max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='alkalinity',
            field=models.CharField(blank=True, choices=[('mEq/L', 'mEq/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='amount_or_size_of_sample_collected',
            field=models.CharField(blank=True, choices=[('L', 'L'), ('g', 'g'), ('kg', 'kg'), ('m2', 'm2'), ('m3', 'm3')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='biochemical_oxygen_demand',
            field=models.CharField(blank=True, choices=[('mg/L (over 5 days at 20C)', 'mg/L (over 5 days at 20C)')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='chemical_oxygen_demand',
            field=models.CharField(blank=True, choices=[('mg/L (over 5 days at 20C)', 'mg/L (over 5 days at 20C)')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='depth',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='efficiency_percent',
            field=models.CharField(blank=True, choices=[('%', '%')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='emulsions',
            field=models.CharField(blank=True, choices=[('g/L', 'g/L'), ('ng/L', 'ng/L'), ('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='gaseous_substances',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='geographic_location_latitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='geographic_location_longitude',
            field=models.CharField(blank=True, choices=[('DD', 'DD')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='industrial_effluent_percent',
            field=models.CharField(blank=True, choices=[('%', '%')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='inorganic_particles',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('mol/L', 'mol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='nitrate',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='organic_particles',
            field=models.CharField(blank=True, choices=[('g/L', 'g/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='phosphate',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='salinity',
            field=models.CharField(blank=True, choices=[('psu', 'psu')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='sample_storage_duration',
            field=models.CharField(blank=True, choices=[('days', 'days'), ('hours', 'hours'), ('months', 'months'), ('weeks', 'weeks'), ('years', 'years')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='sample_storage_temperature',
            field=models.CharField(blank=True, choices=[('°C', '°C')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='sample_volume_or_weight_for_DNA_extraction',
            field=models.CharField(blank=True, choices=[('g', 'g'), ('mL', 'mL'), ('mg', 'mg'), ('ng', 'ng')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='sludge_retention_time',
            field=models.CharField(blank=True, choices=[('days', 'days'), ('hours', 'hours'), ('minutes', 'minutes'), ('weeks', 'weeks')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='sodium',
            field=models.CharField(blank=True, choices=[('parts/million', 'parts/million'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='soluble_inorganic_material',
            field=models.CharField(blank=True, choices=[('g/L', 'g/L'), ('mol/L', 'mol/L'), ('parts/million', 'parts/million')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='soluble_organic_material',
            field=models.CharField(blank=True, choices=[('g/L', 'g/L'), ('mol/L', 'mol/L'), ('parts/million', 'parts/million')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='suspended_solids',
            field=models.CharField(blank=True, choices=[('g/L', 'g/L'), ('mol/L', 'mol/L'), ('parts/million', 'parts/million')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='temperature',
            field=models.CharField(blank=True, choices=[('ºC', 'ºC')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='total_nitrogen',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_wastewater_sludge_unit',
            name='total_phosphate',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='alkyl_diethers',
            field=models.CharField(blank=True, choices=[('M/L', 'M/L'), ('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='aminopeptidase_activity',
            field=models.CharField(blank=True, choices=[('mol/L/h', 'mol/L/h')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='bacterial_carbon_production',
            field=models.CharField(blank=True, choices=[('ng/h', 'ng/h')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='bacterial_production',
            field=models.CharField(blank=True, choices=[('mg/m3/d', 'mg/m3/d')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='bacterial_respiration',
            field=models.CharField(blank=True, choices=[('mg/m3/d', 'mg/m3/d')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='bishomohopanol',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L'), ('µg/g', 'µg/g')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='conductivity',
            field=models.CharField(blank=True, choices=[('mS/cm', 'mS/cm')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='dissolved_inorganic_nitrogen',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='dissolved_inorganic_phosphorus',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='dissolved_organic_carbon',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='downward_PAR',
            field=models.CharField(blank=True, choices=[('µE/m2/s', 'µE/m2/s')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='fluorescence',
            field=models.CharField(blank=True, choices=[('V', 'V'), ('mg Chla/m3', 'mg Chla/m3')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='glucosidase_activity',
            field=models.CharField(blank=True, choices=[('mol/L/h', 'mol/L/h')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='light_intensity',
            field=models.CharField(blank=True, choices=[('lux', 'lux')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='magnesium',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L'), ('mol/L', 'mol/L'), ('parts/million', 'parts/million')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='mean_friction_velocity',
            field=models.CharField(blank=True, choices=[('m/s', 'm/s')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='mean_peak_friction_velocity',
            field=models.CharField(blank=True, choices=[('m/s', 'm/s')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='n_alkanes',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='particulate_organic_carbon',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='particulate_organic_nitrogen',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='petroleum_hydrocarbon',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='phaeopigments',
            field=models.CharField(blank=True, choices=[('mg/m3', 'mg/m3'), ('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='photon_flux',
            field=models.CharField(blank=True, choices=[('µmol/m2/s', 'µmol/m2/s')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='primary_production',
            field=models.CharField(blank=True, choices=[('g/m2/day', 'g/m2/day'), ('mg/m3/day', 'mg/m3/day')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='redox_potential',
            field=models.CharField(blank=True, choices=[('mV', 'mV')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='soluble_reactive_phosphorus',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='suspended_particulate_matter',
            field=models.CharField(blank=True, choices=[('mg/L', 'mg/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='total_depth_of_water_column',
            field=models.CharField(blank=True, choices=[('m', 'm')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='total_dissolved_nitrogen',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='total_inorganic_nitrogen',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='total_particulate_carbon',
            field=models.CharField(blank=True, choices=[('µg/L', 'µg/L'), ('µmol/L', 'µmol/L')], max_length=120),
        ),
        migrations.AlterField(
            model_name='gsc_mixs_water_unit',
            name='total_phosphorus',
            field=models.CharField(blank=True, choices=[('µmol/L', 'µmol/L')], max_length=120),
        ),
    ]
