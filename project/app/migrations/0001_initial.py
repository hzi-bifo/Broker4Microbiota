# Generated by Django 5.1.4 on 2025-07-09 09:38

import django.core.validators
import django.db.models.deletion
import phonenumber_field.modelfields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Mag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='MagRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(blank=True, max_length=100, null=True)),
                ('samplesheet_content', models.CharField(blank=True, max_length=100, null=True)),
                ('cluster_config', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('billing_address', models.TextField(blank=True, null=True)),
                ('ag_and_hzi', models.CharField(blank=True, max_length=100, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('quote_no', models.CharField(blank=True, max_length=100, null=True)),
                ('contact_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('data_delivery', models.CharField(blank=True, max_length=100, null=True)),
                ('signature', models.CharField(blank=True, max_length=100, null=True)),
                ('experiment_title', models.CharField(blank=True, max_length=100, null=True)),
                ('dna', models.CharField(blank=True, max_length=20, null=True)),
                ('rna', models.CharField(blank=True, max_length=20, null=True)),
                ('method', models.CharField(blank=True, max_length=100, null=True)),
                ('buffer', models.CharField(blank=True, max_length=100, null=True)),
                ('organism', models.CharField(blank=True, max_length=100, null=True)),
                ('isolated_from', models.CharField(blank=True, max_length=100, null=True)),
                ('isolation_method', models.CharField(blank=True, choices=[('method1', 'Method 1'), ('method2', 'Method 2'), ('other', 'Other')], max_length=100, null=True)),
                ('library', models.CharField(blank=True, choices=[('choice1', 'Choice 1'), ('choice2', 'Choice 2'), ('other', 'Other')], max_length=100, null=True)),
                ('platform', models.CharField(blank=True, default='OXFORD_NANOPORE', max_length=100, null=True)),
                ('insert_size', models.CharField(blank=True, default='2', max_length=100, null=True)),
                ('library_name', models.CharField(blank=True, default='PCRtest', max_length=100, null=True)),
                ('library_source', models.CharField(blank=True, default='GENOMIC', max_length=100, null=True)),
                ('library_selection', models.CharField(blank=True, default='PCR', max_length=100, null=True)),
                ('library_strategy', models.CharField(blank=True, default='WGS', max_length=100, null=True)),
                ('sequencing_instrument', models.CharField(blank=True, default='Illumina HiSeq 1500', max_length=100, null=True)),
                ('submitted', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('ready_for_sequencing', 'Ready for Sequencing'), ('sequencing_in_progress', 'Sequencing in Progress'), ('sequencing_completed', 'Sequencing Completed'), ('data_processing', 'Data Processing'), ('data_delivered', 'Data Delivered'), ('completed', 'Completed')], default='draft', help_text='Current status of the sequencing order', max_length=30)),
                ('status_updated_at', models.DateTimeField(auto_now=True)),
                ('status_notes', models.TextField(blank=True, help_text='Additional notes about the current status')),
            ],
        ),
        migrations.CreateModel(
            name='Read',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_1', models.CharField(blank=True, max_length=255, null=True)),
                ('file_2', models.CharField(blank=True, max_length=255, null=True)),
                ('uncompressed_file_1', models.CharField(blank=True, max_length=255, null=True)),
                ('uncompressed_file_2', models.CharField(blank=True, max_length=255, null=True)),
                ('read_file_checksum_1', models.CharField(blank=True, max_length=255, null=True)),
                ('read_file_checksum_2', models.CharField(blank=True, max_length=255, null=True)),
                ('experiment_accession_number', models.CharField(blank=True, max_length=100, null=True)),
                ('run_accession_number', models.CharField(blank=True, max_length=100, null=True)),
                ('submitted', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='SiteSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_name', models.CharField(default='Sequencing Order Management', help_text='The name of your application', max_length=200)),
                ('organization_name', models.CharField(default='Helmholtz Centre for Infection Research', help_text='Full name of your organization', max_length=200)),
                ('organization_short_name', models.CharField(default='HZI', help_text='Short name or acronym', max_length=50)),
                ('tagline', models.CharField(blank=True, default='Streamlining sequencing requests and ensuring compliance with MIxS standards', help_text='A brief description or tagline for your site', max_length=500)),
                ('contact_email', models.EmailField(default='sequencing@helmholtz-hzi.de', help_text='Primary contact email address', max_length=254)),
                ('website_url', models.URLField(blank=True, default='https://www.helmholtz-hzi.de', help_text="Organization's main website URL")),
                ('logo', models.ImageField(blank=True, help_text='Organization logo (recommended size: 200x50px)', null=True, upload_to='branding/')),
                ('favicon', models.ImageField(blank=True, help_text='Favicon for browser tab (recommended: 32x32px .ico or .png)', null=True, upload_to='branding/')),
                ('primary_color', models.CharField(default='#3273dc', help_text='Primary theme color in hex format (e.g., #3273dc)', max_length=7, validators=[django.core.validators.RegexValidator(message='Enter a valid hex color code (e.g., #3273dc)', regex='^#[0-9a-fA-F]{6}$')])),
                ('secondary_color', models.CharField(default='#2366d1', help_text='Secondary theme color in hex format', max_length=7, validators=[django.core.validators.RegexValidator(message='Enter a valid hex color code (e.g., #2366d1)', regex='^#[0-9a-fA-F]{6}$')])),
                ('footer_text', models.TextField(blank=True, default='', help_text='Additional footer text (HTML allowed)')),
                ('empty_projects_text', models.TextField(blank=True, default='Welcome to the Sequencing Order Management System! Start by creating your first project to organize and track your sequencing requests.', help_text='Message shown when user has no projects')),
                ('projects_with_samples_text', models.TextField(blank=True, default='You have active sequencing projects. Create a new project for a different study or continue working on your existing projects.', help_text='Message shown when user has projects with samples')),
                ('project_form_title', models.CharField(default='Create New Sequencing Project', help_text='Title shown on project creation form', max_length=200)),
                ('project_form_description', models.TextField(blank=True, default='A project represents a study or experiment that groups related sequencing orders. Each project can contain multiple orders for different samples or time points.', help_text='Description shown on project creation form')),
                ('order_form_title', models.CharField(default='Create Sequencing Order', help_text='Title shown on order creation form', max_length=200)),
                ('order_form_description', models.TextField(blank=True, default='Provide detailed information for your sequencing order including contact details, sample information, and sequencing preferences.', help_text='Description shown on order creation form')),
                ('submission_instructions', models.TextField(blank=True, default='<h4>Next Steps After Submission:</h4>\n<ol>\n<li><strong>Sample Preparation:</strong> Ensure your samples are properly labeled with the sample IDs you provided.</li>\n<li><strong>Sample Shipping:</strong> Ship your samples to:\n    <address>\n    Sequencing Facility<br>\n    Helmholtz Centre for Infection Research<br>\n    Inhoffenstra√üe 7<br>\n    38124 Braunschweig, Germany\n    </address>\n</li>\n<li><strong>Include Documentation:</strong> Print and include your order confirmation with the samples.</li>\n<li><strong>Tracking:</strong> You will receive email updates on the status of your sequencing order.</li>\n</ol>\n<p>For questions, contact: <a href="mailto:sequencing@helmholtz-hzi.de">sequencing@helmholtz-hzi.de</a></p>', help_text='Instructions shown after order submission (HTML allowed)')),
                ('metadata_checklist_title', models.CharField(default='Configure Metadata Checklists', help_text='Title shown on metadata checklist selection page', max_length=200)),
                ('metadata_checklist_description', models.TextField(blank=True, default="Select the appropriate MIxS (Minimum Information about any Sequence) standard for your samples. This determines what metadata fields you'll need to fill out.", help_text='Description shown on metadata checklist selection page')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Site Settings',
                'verbose_name_plural': 'Site Settings',
            },
        ),
        migrations.CreateModel(
            name='FormTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the form template', max_length=200)),
                ('form_type', models.CharField(choices=[('project', 'Project Form'), ('order', 'Order Form'), ('sample', 'Sample Form'), ('custom', 'Custom Form')], help_text='Type of form this template represents', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Description of when to use this form template')),
                ('version', models.CharField(default='1.0', help_text='Version of this form template', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this form template is currently active')),
                ('facility_specific', models.BooleanField(default=False, help_text='Whether this form is specific to a facility')),
                ('facility_name', models.CharField(blank=True, help_text='Name of the facility this form is for (if facility_specific)', max_length=200)),
                ('json_schema', models.JSONField(default=dict, help_text='JSON schema defining the form structure')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_form_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
                'unique_together': {('name', 'version', 'facility_name')},
            },
        ),
        migrations.CreateModel(
            name='MagRunInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, max_length=100, null=True)),
                ('run_folder', models.CharField(blank=True, max_length=100, null=True)),
                ('magRun', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.magrun')),
            ],
        ),
        migrations.CreateModel(
            name='Assembly',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assembly_software', models.CharField(blank=True, max_length=255, null=True)),
                ('file', models.CharField(blank=True, max_length=255, null=True)),
                ('submitted', models.BooleanField(default=False)),
                ('assembly_accession_number', models.CharField(blank=True, max_length=100, null=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.order')),
                ('read', models.ManyToManyField(to='app.read')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100, null=True)),
                ('alias', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('study_accession_id', models.CharField(blank=True, max_length=100, null=True)),
                ('alternative_accession_id', models.CharField(blank=True, max_length=100, null=True)),
                ('submitted', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='order',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.project'),
        ),
        migrations.CreateModel(
            name='FormSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_data', models.JSONField(help_text='The submitted form data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(help_text='User who submitted the form', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('form_template', models.ForeignKey(help_text='The form template used for this submission', on_delete=django.db.models.deletion.PROTECT, to='app.formtemplate')),
                ('order', models.ForeignKey(blank=True, help_text='Related order (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, to='app.order')),
                ('project', models.ForeignKey(blank=True, help_text='Related project (if applicable)', null=True, on_delete=django.db.models.deletion.CASCADE, to='app.project')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_object_xml', models.TextField(blank=True, null=True)),
                ('submission_object_xml', models.TextField(blank=True, null=True)),
                ('receipt_xml', models.TextField(blank=True, null=True)),
                ('accession_status', models.CharField(blank=True, max_length=100, null=True)),
                ('projects', models.ManyToManyField(to='app.project')),
            ],
        ),
        migrations.AddField(
            model_name='magrun',
            name='reads',
            field=models.ManyToManyField(to='app.read'),
        ),
        migrations.CreateModel(
            name='Bin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bin_number', models.CharField(blank=True, max_length=255, null=True)),
                ('completeness_software', models.CharField(blank=True, max_length=255, null=True)),
                ('binning_software', models.CharField(blank=True, max_length=255, null=True)),
                ('quality_file', models.CharField(blank=True, max_length=255, null=True)),
                ('file', models.CharField(blank=True, max_length=255, null=True)),
                ('submitted', models.BooleanField(default=False)),
                ('bin_accession_number', models.CharField(blank=True, max_length=100, null=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.order')),
                ('read', models.ManyToManyField(to='app.read')),
            ],
        ),
        migrations.CreateModel(
            name='Alignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.CharField(blank=True, max_length=255, null=True)),
                ('submitted', models.BooleanField(default=False)),
                ('assembly', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.assembly')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.order')),
                ('read', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.read')),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(blank=True, max_length=2, null=True)),
                ('sample_id', models.CharField(blank=True, max_length=100, null=True)),
                ('tax_id', models.CharField(blank=True, max_length=100, null=True)),
                ('scientific_name', models.CharField(blank=True, max_length=100, null=True)),
                ('sample_alias', models.CharField(blank=True, max_length=100, null=True)),
                ('sample_title', models.CharField(blank=True, max_length=100, null=True)),
                ('sample_description', models.CharField(blank=True, max_length=100, null=True)),
                ('sample_accession_number', models.CharField(blank=True, max_length=100, null=True)),
                ('sample_biosample_number', models.CharField(blank=True, max_length=100, null=True)),
                ('sample_type', models.IntegerField(default=1)),
                ('submitted', models.BooleanField(default=False)),
                ('mag_data', models.CharField(blank=True, max_length=100, null=True)),
                ('assembly', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.assembly')),
                ('bin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.bin')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.order')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReadSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('read_object_txt_list', models.JSONField()),
                ('receipt_xml', models.TextField(blank=True, null=True)),
                ('accession_status', models.CharField(blank=True, max_length=100, null=True)),
                ('samples', models.ManyToManyField(to='app.sample')),
            ],
        ),
        migrations.AddField(
            model_name='read',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.sample'),
        ),
        migrations.CreateModel(
            name='Pipelines',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run_id', models.CharField(max_length=100, unique=True)),
                ('status', models.CharField(blank=True, choices=[('in_preparation', 'In Preparation'), ('sequencing', 'Sequencing'), ('finished', 'Finished'), ('uploaded_to_ENA', 'Uploaded to ENA')], max_length=20, null=True)),
                ('output_folder', models.CharField(blank=True, max_length=255, null=True)),
                ('samples', models.ManyToManyField(to='app.sample')),
            ],
        ),
        migrations.CreateModel(
            name='Sampleset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checklists', models.JSONField()),
                ('include', models.JSONField()),
                ('exclude', models.JSONField()),
                ('custom', models.JSONField()),
                ('sample_type', models.IntegerField(default=1)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.order')),
            ],
        ),
        migrations.CreateModel(
            name='GSC_MIxS_water_unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('conductivity', models.CharField(choices=[('mS/cm', 'mS/cm')], max_length=120)),
                ('fluorescence', models.CharField(choices=[('V', 'V'), ('mg Chla/m3', 'mg Chla/m3')], max_length=120)),
                ('light_intensity', models.CharField(choices=[('lux', 'lux')], max_length=120)),
                ('mean_friction_velocity', models.CharField(choices=[('m/s', 'm/s')], max_length=120)),
                ('mean_peak_friction_velocity', models.CharField(choices=[('m/s', 'm/s')], max_length=120)),
                ('downward_PAR', models.CharField(choices=[('¬µE/m2/s', '¬µE/m2/s')], max_length=120)),
                ('photon_flux', models.CharField(choices=[('¬µmol/m2/s', '¬µmol/m2/s')], max_length=120)),
                ('total_depth_of_water_column', models.CharField(choices=[('m', 'm')], max_length=120)),
                ('alkyl_diethers', models.CharField(choices=[('M/L', 'M/L'), ('¬µg/L', '¬µg/L')], max_length=120)),
                ('aminopeptidase_activity', models.CharField(choices=[('mol/L/h', 'mol/L/h')], max_length=120)),
                ('bacterial_carbon_production', models.CharField(choices=[('ng/h', 'ng/h')], max_length=120)),
                ('bacterial_production', models.CharField(choices=[('mg/m3/d', 'mg/m3/d')], max_length=120)),
                ('bacterial_respiration', models.CharField(choices=[('mg/m3/d', 'mg/m3/d')], max_length=120)),
                ('bishomohopanol', models.CharField(choices=[('¬µg/L', '¬µg/L'), ('¬µg/g', '¬µg/g')], max_length=120)),
                ('dissolved_inorganic_nitrogen', models.CharField(choices=[('¬µg/L', '¬µg/L')], max_length=120)),
                ('dissolved_inorganic_phosphorus', models.CharField(choices=[('¬µg/L', '¬µg/L')], max_length=120)),
                ('dissolved_organic_carbon', models.CharField(choices=[('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('glucosidase_activity', models.CharField(choices=[('mol/L/h', 'mol/L/h')], max_length=120)),
                ('magnesium', models.CharField(choices=[('mg/L', 'mg/L'), ('mol/L', 'mol/L'), ('parts/million', 'parts/million')], max_length=120)),
                ('n_alkanes', models.CharField(choices=[('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('particulate_organic_carbon', models.CharField(choices=[('¬µg/L', '¬µg/L')], max_length=120)),
                ('particulate_organic_nitrogen', models.CharField(choices=[('¬µg/L', '¬µg/L')], max_length=120)),
                ('petroleum_hydrocarbon', models.CharField(choices=[('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('phaeopigments', models.CharField(choices=[('mg/m3', 'mg/m3'), ('¬µg/L', '¬µg/L')], max_length=120)),
                ('primary_production', models.CharField(choices=[('g/m2/day', 'g/m2/day'), ('mg/m3/day', 'mg/m3/day')], max_length=120)),
                ('redox_potential', models.CharField(choices=[('mV', 'mV')], max_length=120)),
                ('soluble_reactive_phosphorus', models.CharField(choices=[('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('suspended_particulate_matter', models.CharField(choices=[('mg/L', 'mg/L')], max_length=120)),
                ('total_dissolved_nitrogen', models.CharField(choices=[('¬µg/L', '¬µg/L')], max_length=120)),
                ('total_inorganic_nitrogen', models.CharField(choices=[('¬µg/L', '¬µg/L')], max_length=120)),
                ('total_particulate_carbon', models.CharField(choices=[('¬µg/L', '¬µg/L'), ('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('total_phosphorus', models.CharField(choices=[('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_water',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('atmospheric_data', models.CharField(blank=True, help_text='measuremen', max_length=120)),
                ('conductivity', models.CharField(blank=True, help_text='electrical', max_length=120, validators=[django.core.validators.RegexValidator('[1-9][0-9]*\\.?[0-9]*([Ee][+-]?[0-9]+)?')])),
                ('fluorescence', models.CharField(blank=True, help_text='raw (volts', max_length=120, validators=[django.core.validators.RegexValidator('[1-9][0-9]*\\.?[0-9]*([Ee][+-]?[0-9]+)?')])),
                ('light_intensity', models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('mean_friction_velocity', models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('mean_peak_friction_velocity', models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('downward_PAR', models.CharField(blank=True, help_text='visible wa', max_length=120, validators=[django.core.validators.RegexValidator('[1-9][0-9]*\\.?[0-9]*([Ee][+-]?[0-9]+)?')])),
                ('photon_flux', models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('tidal_stage', models.CharField(blank=True, choices=[('high', 'high'), ('low', 'low')], help_text='stage of t', max_length=120)),
                ('total_depth_of_water_column', models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('alkyl_diethers', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('aminopeptidase_activity', models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('bacterial_carbon_production', models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('bacterial_production', models.CharField(blank=True, help_text='bacterial ', max_length=120, validators=[django.core.validators.RegexValidator('[1-9][0-9]*\\.?[0-9]*([Ee][+-]?[0-9]+)?')])),
                ('bacterial_respiration', models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('[1-9][0-9]*\\.?[0-9]*([Ee][+-]?[0-9]+)?')])),
                ('bishomohopanol', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('carbon_nitrogen_ratio', models.CharField(blank=True, help_text='ratio of a', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('dissolved_inorganic_nitrogen', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('dissolved_inorganic_phosphorus', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('dissolved_organic_carbon', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('glucosidase_activity', models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('magnesium', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('n_alkanes', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('particulate_organic_carbon', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('particulate_organic_nitrogen', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('petroleum_hydrocarbon', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('phaeopigments', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('primary_production', models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('redox_potential', models.CharField(blank=True, help_text='redox pote', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('soluble_reactive_phosphorus', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('suspended_particulate_matter', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('total_dissolved_nitrogen', models.CharField(blank=True, help_text='total diss', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('total_inorganic_nitrogen', models.CharField(blank=True, help_text='total inor', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('total_particulate_carbon', models.CharField(blank=True, help_text='total part', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('total_phosphorus', models.CharField(blank=True, help_text='total phos', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_wastewater_sludge_unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('sample_volume_or_weight_for_DNA_extraction', models.CharField(choices=[('g', 'g'), ('mL', 'mL'), ('mg', 'mg'), ('ng', 'ng')], max_length=120)),
                ('geographic_location_latitude', models.CharField(choices=[('DD', 'DD')], max_length=120)),
                ('geographic_location_longitude', models.CharField(choices=[('DD', 'DD')], max_length=120)),
                ('depth', models.CharField(choices=[('m', 'm')], max_length=120)),
                ('amount_or_size_of_sample_collected', models.CharField(choices=[('L', 'L'), ('g', 'g'), ('kg', 'kg'), ('m2', 'm2'), ('m3', 'm3')], max_length=120)),
                ('sample_storage_duration', models.CharField(choices=[('days', 'days'), ('hours', 'hours'), ('months', 'months'), ('weeks', 'weeks'), ('years', 'years')], max_length=120)),
                ('sample_storage_temperature', models.CharField(choices=[('¬∞C', '¬∞C')], max_length=120)),
                ('biochemical_oxygen_demand', models.CharField(choices=[('mg/L (over 5 days at 20C)', 'mg/L (over 5 days at 20C)')], max_length=120)),
                ('chemical_oxygen_demand', models.CharField(choices=[('mg/L (over 5 days at 20C)', 'mg/L (over 5 days at 20C)')], max_length=120)),
                ('sludge_retention_time', models.CharField(choices=[('days', 'days'), ('hours', 'hours'), ('minutes', 'minutes'), ('weeks', 'weeks')], max_length=120)),
                ('alkalinity', models.CharField(choices=[('mEq/L', 'mEq/L')], max_length=120)),
                ('industrial_effluent_percent', models.CharField(choices=[('%', '%')], max_length=120)),
                ('temperature', models.CharField(choices=[('¬∫C', '¬∫C')], max_length=120)),
                ('efficiency_percent', models.CharField(choices=[('%', '%')], max_length=120)),
                ('emulsions', models.CharField(choices=[('g/L', 'g/L'), ('ng/L', 'ng/L'), ('¬µg/L', '¬µg/L')], max_length=120)),
                ('gaseous_substances', models.CharField(choices=[('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('inorganic_particles', models.CharField(choices=[('mg/L', 'mg/L'), ('mol/L', 'mol/L')], max_length=120)),
                ('organic_particles', models.CharField(choices=[('g/L', 'g/L')], max_length=120)),
                ('soluble_inorganic_material', models.CharField(choices=[('g/L', 'g/L'), ('mol/L', 'mol/L'), ('parts/million', 'parts/million')], max_length=120)),
                ('soluble_organic_material', models.CharField(choices=[('g/L', 'g/L'), ('mol/L', 'mol/L'), ('parts/million', 'parts/million')], max_length=120)),
                ('suspended_solids', models.CharField(choices=[('g/L', 'g/L'), ('mol/L', 'mol/L'), ('parts/million', 'parts/million')], max_length=120)),
                ('total_phosphate', models.CharField(choices=[('¬µg/L', '¬µg/L'), ('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('nitrate', models.CharField(choices=[('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('phosphate', models.CharField(choices=[('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('salinity', models.CharField(choices=[('psu', 'psu')], max_length=120)),
                ('sodium', models.CharField(choices=[('parts/million', 'parts/million'), ('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('total_nitrogen', models.CharField(choices=[('¬µg/L', '¬µg/L'), ('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_wastewater_sludge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('project_name', models.CharField(help_text='Name of th', max_length=120)),
                ('experimental_factor', models.CharField(blank=True, help_text='Experiment', max_length=120)),
                ('ploidy', models.CharField(blank=True, help_text='The ploidy', max_length=120)),
                ('number_of_replicons', models.CharField(blank=True, help_text='Reports th', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')])),
                ('extrachromosomal_elements', models.CharField(blank=True, help_text='Do plasmid', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')])),
                ('estimated_size', models.CharField(blank=True, help_text='The estima', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')])),
                ('reference_for_biomaterial', models.CharField(blank=True, help_text='Primary pu', max_length=120)),
                ('annotation_source', models.CharField(blank=True, help_text='For cases ', max_length=120)),
                ('sample_volume_or_weight_for_DNA_extraction', models.CharField(blank=True, help_text='Volume (ml', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('nucleic_acid_extraction', models.CharField(blank=True, help_text='A link to ', max_length=120)),
                ('nucleic_acid_amplification', models.CharField(blank=True, help_text='A link to ', max_length=120)),
                ('library_size', models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')])),
                ('library_reads_sequenced', models.CharField(blank=True, help_text='Total numb', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')])),
                ('library_construction_method', models.CharField(blank=True, help_text='Library co', max_length=120)),
                ('library_vector', models.CharField(blank=True, help_text='Cloning ve', max_length=120)),
                ('library_screening_strategy', models.CharField(blank=True, help_text='Specific e', max_length=120)),
                ('target_gene', models.CharField(blank=True, help_text='Targeted g', max_length=120)),
                ('target_subfragment', models.CharField(blank=True, help_text='Name of su', max_length=120)),
                ('pcr_primers', models.CharField(blank=True, help_text='PCR primer', max_length=120)),
                ('multiplex_identifiers', models.CharField(blank=True, help_text='Molecular ', max_length=120)),
                ('adapters', models.CharField(blank=True, help_text='Adapters p', max_length=120)),
                ('pcr_conditions', models.CharField(blank=True, help_text='Descriptio', max_length=120)),
                ('sequencing_method', models.CharField(blank=True, help_text='Sequencing', max_length=120)),
                ('sequence_quality_check', models.CharField(blank=True, choices=[('manual', 'manual'), ('none', 'none'), ('software', 'software')], help_text='Indicate i', max_length=120)),
                ('chimera_check_software', models.CharField(blank=True, help_text='Tool(s) us', max_length=120)),
                ('relevant_electronic_resources', models.CharField(blank=True, help_text='A related ', max_length=120)),
                ('relevant_standard_operating_procedures', models.CharField(blank=True, help_text='Standard o', max_length=120)),
                ('negative_control_type', models.CharField(blank=True, help_text='The substa', max_length=120)),
                ('positive_control_type', models.CharField(blank=True, help_text='The substa', max_length=120)),
                ('collection_date', models.CharField(help_text='The date t', max_length=120, validators=[django.core.validators.RegexValidator('(^[12][0-9]{3}(-(0[1-9]|1[0-2])(-(0[1-9]|[12][0-9]|3[01])(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?(\\/[0-9]{4}(-[0-9]{2}(-[0-9]{2}(T[0-9]{2}:[0-9]{2}(:[0-9]{2})?Z?([+-][0-9]{1,2})?)?)?)?)?$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')])),
                ('geographic_location_country_and_or_sea', models.CharField(choices=[('Afghanistan', 'Afghanistan'), ('Albania', 'Albania'), ('Algeria', 'Algeria'), ('American Samoa', 'American Samoa'), ('Andorra', 'Andorra'), ('Angola', 'Angola'), ('Anguilla', 'Anguilla'), ('Antarctica', 'Antarctica'), ('Antigua and Barbuda', 'Antigua and Barbuda'), ('Arctic Ocean', 'Arctic Ocean'), ('Argentina', 'Argentina'), ('Armenia', 'Armenia'), ('Aruba', 'Aruba'), ('Ashmore and Cartier Islands', 'Ashmore and Cartier Islands'), ('Atlantic Ocean', 'Atlantic Ocean'), ('Australia', 'Australia'), ('Austria', 'Austria'), ('Azerbaijan', 'Azerbaijan'), ('Bahamas', 'Bahamas'), ('Bahrain', 'Bahrain'), ('Baker Island', 'Baker Island'), ('Baltic Sea', 'Baltic Sea'), ('Bangladesh', 'Bangladesh'), ('Barbados', 'Barbados'), ('Bassas da India', 'Bassas da India'), ('Belarus', 'Belarus'), ('Belgium', 'Belgium'), ('Belize', 'Belize'), ('Benin', 'Benin'), ('Bermuda', 'Bermuda'), ('Bhutan', 'Bhutan'), ('Bolivia', 'Bolivia'), ('Borneo', 'Borneo'), ('Bosnia and Herzegovina', 'Bosnia and Herzegovina'), ('Botswana', 'Botswana'), ('Bouvet Island', 'Bouvet Island'), ('Brazil', 'Brazil'), ('British Virgin Islands', 'British Virgin Islands'), ('Brunei', 'Brunei'), ('Bulgaria', 'Bulgaria'), ('Burkina Faso', 'Burkina Faso'), ('Burundi', 'Burundi'), ('Cambodia', 'Cambodia'), ('Cameroon', 'Cameroon'), ('Canada', 'Canada'), ('Cape Verde', 'Cape Verde'), ('Cayman Islands', 'Cayman Islands'), ('Central African Republic', 'Central African Republic'), ('Chad', 'Chad'), ('Chile', 'Chile'), ('China', 'China'), ('Christmas Island', 'Christmas Island'), ('Clipperton Island', 'Clipperton Island'), ('Cocos Islands', 'Cocos Islands'), ('Colombia', 'Colombia'), ('Comoros', 'Comoros'), ('Cook Islands', 'Cook Islands'), ('Coral Sea Islands', 'Coral Sea Islands'), ('Costa Rica', 'Costa Rica'), ("Cote d'Ivoire", "Cote d'Ivoire"), ('Croatia', 'Croatia'), ('Cuba', 'Cuba'), ('Curacao', 'Curacao'), ('Cyprus', 'Cyprus'), ('Czech Republic', 'Czech Republic'), ('Democratic Republic of the Congo', 'Democratic Republic of the Congo'), ('Denmark', 'Denmark'), ('Djibouti', 'Djibouti'), ('Dominica', 'Dominica'), ('Dominican Republic', 'Dominican Republic'), ('East Timor', 'East Timor'), ('Ecuador', 'Ecuador'), ('Egypt', 'Egypt'), ('El Salvador', 'El Salvador'), ('Equatorial Guinea', 'Equatorial Guinea'), ('Eritrea', 'Eritrea'), ('Estonia', 'Estonia'), ('Ethiopia', 'Ethiopia'), ('Europa Island', 'Europa Island'), ('Falkland Islands (Islas Malvinas)', 'Falkland Islands (Islas Malvinas)'), ('Faroe Islands', 'Faroe Islands'), ('Fiji', 'Fiji'), ('Finland', 'Finland'), ('France', 'France'), ('French Guiana', 'French Guiana'), ('French Polynesia', 'French Polynesia'), ('French Southern and Antarctic Lands', 'French Southern and Antarctic Lands'), ('Gabon', 'Gabon'), ('Gambia', 'Gambia'), ('Gaza Strip', 'Gaza Strip'), ('Georgia', 'Georgia'), ('Germany', 'Germany'), ('Ghana', 'Ghana'), ('Gibraltar', 'Gibraltar'), ('Glorioso Islands', 'Glorioso Islands'), ('Greece', 'Greece'), ('Greenland', 'Greenland'), ('Grenada', 'Grenada'), ('Guadeloupe', 'Guadeloupe'), ('Guam', 'Guam'), ('Guatemala', 'Guatemala'), ('Guernsey', 'Guernsey'), ('Guinea', 'Guinea'), ('Guinea-Bissau', 'Guinea-Bissau'), ('Guyana', 'Guyana'), ('Haiti', 'Haiti'), ('Heard Island and McDonald Islands', 'Heard Island and McDonald Islands'), ('Honduras', 'Honduras'), ('Hong Kong', 'Hong Kong'), ('Howland Island', 'Howland Island'), ('Hungary', 'Hungary'), ('Iceland', 'Iceland'), ('India', 'India'), ('Indian Ocean', 'Indian Ocean'), ('Indonesia', 'Indonesia'), ('Iran', 'Iran'), ('Iraq', 'Iraq'), ('Ireland', 'Ireland'), ('Isle of Man', 'Isle of Man'), ('Israel', 'Israel'), ('Italy', 'Italy'), ('Jamaica', 'Jamaica'), ('Jan Mayen', 'Jan Mayen'), ('Japan', 'Japan'), ('Jarvis Island', 'Jarvis Island'), ('Jersey', 'Jersey'), ('Johnston Atoll', 'Johnston Atoll'), ('Jordan', 'Jordan'), ('Juan de Nova Island', 'Juan de Nova Island'), ('Kazakhstan', 'Kazakhstan'), ('Kenya', 'Kenya'), ('Kerguelen Archipelago', 'Kerguelen Archipelago'), ('Kingman Reef', 'Kingman Reef'), ('Kiribati', 'Kiribati'), ('Kosovo', 'Kosovo'), ('Kuwait', 'Kuwait'), ('Kyrgyzstan', 'Kyrgyzstan'), ('Laos', 'Laos'), ('Latvia', 'Latvia'), ('Lebanon', 'Lebanon'), ('Lesotho', 'Lesotho'), ('Liberia', 'Liberia'), ('Libya', 'Libya'), ('Liechtenstein', 'Liechtenstein'), ('Lithuania', 'Lithuania'), ('Luxembourg', 'Luxembourg'), ('Macau', 'Macau'), ('Macedonia', 'Macedonia'), ('Madagascar', 'Madagascar'), ('Malawi', 'Malawi'), ('Malaysia', 'Malaysia'), ('Maldives', 'Maldives'), ('Mali', 'Mali'), ('Malta', 'Malta'), ('Marshall Islands', 'Marshall Islands'), ('Martinique', 'Martinique'), ('Mauritania', 'Mauritania'), ('Mauritius', 'Mauritius'), ('Mayotte', 'Mayotte'), ('Mediterranean Sea', 'Mediterranean Sea'), ('Mexico', 'Mexico'), ('Micronesia', 'Micronesia'), ('Midway Islands', 'Midway Islands'), ('Moldova', 'Moldova'), ('Monaco', 'Monaco'), ('Mongolia', 'Mongolia'), ('Montenegro', 'Montenegro'), ('Montserrat', 'Montserrat'), ('Morocco', 'Morocco'), ('Mozambique', 'Mozambique'), ('Myanmar', 'Myanmar'), ('Namibia', 'Namibia'), ('Nauru', 'Nauru'), ('Navassa Island', 'Navassa Island'), ('Nepal', 'Nepal'), ('Netherlands', 'Netherlands'), ('New Caledonia', 'New Caledonia'), ('New Zealand', 'New Zealand'), ('Nicaragua', 'Nicaragua'), ('Niger', 'Niger'), ('Nigeria', 'Nigeria'), ('Niue', 'Niue'), ('Norfolk Island', 'Norfolk Island'), ('North Korea', 'North Korea'), ('North Sea', 'North Sea'), ('Northern Mariana Islands', 'Northern Mariana Islands'), ('Norway', 'Norway'), ('Oman', 'Oman'), ('Pacific Ocean', 'Pacific Ocean'), ('Pakistan', 'Pakistan'), ('Palau', 'Palau'), ('Palmyra Atoll', 'Palmyra Atoll'), ('Panama', 'Panama'), ('Papua New Guinea', 'Papua New Guinea'), ('Paracel Islands', 'Paracel Islands'), ('Paraguay', 'Paraguay'), ('Peru', 'Peru'), ('Philippines', 'Philippines'), ('Pitcairn Islands', 'Pitcairn Islands'), ('Poland', 'Poland'), ('Portugal', 'Portugal'), ('Puerto Rico', 'Puerto Rico'), ('Qatar', 'Qatar'), ('Republic of the Congo', 'Republic of the Congo'), ('Reunion', 'Reunion'), ('Romania', 'Romania'), ('Ross Sea', 'Ross Sea'), ('Russia', 'Russia'), ('Rwanda', 'Rwanda'), ('Saint Helena', 'Saint Helena'), ('Saint Kitts and Nevis', 'Saint Kitts and Nevis'), ('Saint Lucia', 'Saint Lucia'), ('Saint Pierre and Miquelon', 'Saint Pierre and Miquelon'), ('Saint Vincent and the Grenadines', 'Saint Vincent and the Grenadines'), ('Samoa', 'Samoa'), ('San Marino', 'San Marino'), ('Sao Tome and Principe', 'Sao Tome and Principe'), ('Saudi Arabia', 'Saudi Arabia'), ('Senegal', 'Senegal'), ('Serbia', 'Serbia'), ('Seychelles', 'Seychelles'), ('Sierra Leone', 'Sierra Leone'), ('Singapore', 'Singapore'), ('Sint Maarten', 'Sint Maarten'), ('Slovakia', 'Slovakia'), ('Slovenia', 'Slovenia'), ('Solomon Islands', 'Solomon Islands'), ('Somalia', 'Somalia'), ('South Africa', 'South Africa'), ('South Georgia and the South Sandwich Islands', 'South Georgia and the South Sandwich Islands'), ('South Korea', 'South Korea'), ('Southern Ocean', 'Southern Ocean'), ('Spain', 'Spain'), ('Spratly Islands', 'Spratly Islands'), ('Sri Lanka', 'Sri Lanka'), ('Sudan', 'Sudan'), ('Suriname', 'Suriname'), ('Svalbard', 'Svalbard'), ('Swaziland', 'Swaziland'), ('Sweden', 'Sweden'), ('Switzerland', 'Switzerland'), ('Syria', 'Syria'), ('Taiwan', 'Taiwan'), ('Tajikistan', 'Tajikistan'), ('Tanzania', 'Tanzania'), ('Tasman Sea', 'Tasman Sea'), ('Thailand', 'Thailand'), ('Togo', 'Togo'), ('Tokelau', 'Tokelau'), ('Tonga', 'Tonga'), ('Trinidad and Tobago', 'Trinidad and Tobago'), ('Tromelin Island', 'Tromelin Island'), ('Tunisia', 'Tunisia'), ('Turkey', 'Turkey'), ('Turkmenistan', 'Turkmenistan'), ('Turks and Caicos Islands', 'Turks and Caicos Islands'), ('Tuvalu', 'Tuvalu'), ('USA', 'USA'), ('Uganda', 'Uganda'), ('Ukraine', 'Ukraine'), ('United Arab Emirates', 'United Arab Emirates'), ('United Kingdom', 'United Kingdom'), ('Uruguay', 'Uruguay'), ('Uzbekistan', 'Uzbekistan'), ('Vanuatu', 'Vanuatu'), ('Venezuela', 'Venezuela'), ('Viet Nam', 'Viet Nam'), ('Virgin Islands', 'Virgin Islands'), ('Wake Island', 'Wake Island'), ('Wallis and Futuna', 'Wallis and Futuna'), ('West Bank', 'West Bank'), ('Western Sahara', 'Western Sahara'), ('Yemen', 'Yemen'), ('Zambia', 'Zambia'), ('Zimbabwe', 'Zimbabwe'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('restricted access', 'restricted access')], help_text='The locati', max_length=120)),
                ('geographic_location_latitude', models.CharField(help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')])),
                ('geographic_location_longitude', models.CharField(help_text='The geogra', max_length=120, validators=[django.core.validators.RegexValidator('(^[+-]?[0-9]+.?[0-9]{0,8}$)|(^not collected$)|(^not provided$)|(^restricted access$)|(^missing: control sample$)|(^missing: sample group$)|(^missing: synthetic construct$)|(^missing: lab stock$)|(^missing: third party data$)|(^missing: data agreement established pre-2023$)|(^missing: endangered species$)|(^missing: human-identifiable$)')])),
                ('geographic_location_region_and_locality', models.CharField(blank=True, help_text='The geogra', max_length=120)),
                ('depth', models.CharField(blank=True, help_text='The vertic', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('broad_scale_environmental_context', models.CharField(help_text='Report the', max_length=120)),
                ('local_environmental_context', models.CharField(help_text='Report the', max_length=120)),
                ('environmental_medium', models.CharField(help_text='Report the', max_length=120)),
                ('source_material_identifiers', models.CharField(blank=True, help_text='A unique i', max_length=120)),
                ('sample_material_processing', models.CharField(blank=True, help_text='A brief de', max_length=120)),
                ('isolation_and_growth_condition', models.CharField(blank=True, help_text='Publicatio', max_length=120)),
                ('propagation', models.CharField(blank=True, help_text='The type o', max_length=120)),
                ('amount_or_size_of_sample_collected', models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('oxygenation_status_of_sample', models.CharField(blank=True, choices=[('aerobic', 'aerobic'), ('anaerobic', 'anaerobic')], help_text='oxygenatio', max_length=120)),
                ('organism_count', models.CharField(blank=True, help_text='Total cell', max_length=120)),
                ('sample_storage_duration', models.CharField(blank=True, help_text='duration f', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('sample_storage_temperature', models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('sample_storage_location', models.CharField(blank=True, help_text='location a', max_length=120)),
                ('sample_collection_device', models.CharField(blank=True, help_text='The device', max_length=120)),
                ('sample_collection_method', models.CharField(blank=True, help_text='The method', max_length=120)),
                ('biochemical_oxygen_demand', models.CharField(blank=True, help_text='a measure ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('chemical_oxygen_demand', models.CharField(blank=True, help_text='a measure ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('pre_treatment', models.CharField(blank=True, help_text='the proces', max_length=120)),
                ('primary_treatment', models.CharField(blank=True, help_text='the proces', max_length=120)),
                ('reactor_type', models.CharField(blank=True, help_text='anaerobic ', max_length=120)),
                ('secondary_treatment', models.CharField(blank=True, help_text='the proces', max_length=120)),
                ('sludge_retention_time', models.CharField(blank=True, help_text='the time a', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('tertiary_treatment', models.CharField(blank=True, help_text='the proces', max_length=120)),
                ('host_disease_status', models.CharField(blank=True, help_text='list of di', max_length=120)),
                ('host_scientific_name', models.CharField(blank=True, help_text='Scientific', max_length=120)),
                ('alkalinity', models.CharField(blank=True, help_text='alkalinity', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('industrial_effluent_percent', models.CharField(blank=True, help_text='percentage', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('sewage_type', models.CharField(blank=True, help_text='Type of se', max_length=120)),
                ('wastewater_type', models.CharField(blank=True, help_text='the origin', max_length=120)),
                ('temperature', models.CharField(blank=True, help_text='temperatur', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('pH', models.CharField(blank=True, help_text='pH measure', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('efficiency_percent', models.CharField(blank=True, help_text='percentage', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('emulsions', models.CharField(blank=True, help_text='amount or ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('gaseous_substances', models.CharField(blank=True, help_text='amount or ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('inorganic_particles', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('organic_particles', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('soluble_inorganic_material', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('soluble_organic_material', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('suspended_solids', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('total_phosphate', models.CharField(blank=True, help_text='total amou', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('nitrate', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('phosphate', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('salinity', models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('sodium', models.CharField(blank=True, help_text='sodium con', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('total_nitrogen', models.CharField(blank=True, help_text='total nitr', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('subspecific_genetic_lineage', models.CharField(blank=True, help_text='Informatio', max_length=120)),
                ('trophic_level', models.CharField(blank=True, choices=[('autotroph', 'autotroph'), ('carboxydotroph', 'carboxydotroph'), ('chemoautotroph', 'chemoautotroph'), ('chemoheterotroph', 'chemoheterotroph'), ('chemolithoautotroph', 'chemolithoautotroph'), ('chemolithotroph', 'chemolithotroph'), ('chemoorganoheterotroph', 'chemoorganoheterotroph'), ('chemoorganotroph', 'chemoorganotroph'), ('chemosynthetic', 'chemosynthetic'), ('chemotroph', 'chemotroph'), ('copiotroph', 'copiotroph'), ('diazotroph', 'diazotroph'), ('facultative autotroph', 'facultative autotroph'), ('heterotroph', 'heterotroph'), ('lithoautotroph', 'lithoautotroph'), ('lithoheterotroph', 'lithoheterotroph'), ('lithotroph', 'lithotroph'), ('methanotroph', 'methanotroph'), ('methylotroph', 'methylotroph'), ('mixotroph', 'mixotroph'), ('obligate chemoautolithotroph', 'obligate chemoautolithotroph'), ('oligotroph', 'oligotroph'), ('organoheterotroph', 'organoheterotroph'), ('organotroph', 'organotroph'), ('photoautotroph', 'photoautotroph'), ('photoheterotroph', 'photoheterotroph'), ('photolithoautotroph', 'photolithoautotroph'), ('photolithotroph', 'photolithotroph'), ('photosynthetic', 'photosynthetic'), ('phototroph', 'phototroph')], help_text='Trophic le', max_length=120)),
                ('relationship_to_oxygen', models.CharField(blank=True, choices=[('aerobe', 'aerobe'), ('anaerobe', 'anaerobe'), ('facultative', 'facultative'), ('microaerophilic', 'microaerophilic'), ('microanaerobe', 'microanaerobe'), ('obligate aerobe', 'obligate aerobe'), ('obligate anaerobe', 'obligate anaerobe')], help_text='Is this or', max_length=120)),
                ('known_pathogenicity', models.CharField(blank=True, help_text='To what is', max_length=120)),
                ('encoded_traits', models.CharField(blank=True, help_text='Should inc', max_length=120)),
                ('observed_biotic_relationship', models.CharField(blank=True, choices=[('commensal', 'commensal'), ('free living', 'free living'), ('mutualism', 'mutualism'), ('parasite', 'parasite'), ('symbiont', 'symbiont')], help_text='Is it free', max_length=120)),
                ('chemical_administration', models.CharField(blank=True, help_text='list of ch', max_length=120)),
                ('perturbation', models.CharField(blank=True, help_text='type of pe', max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_soil_unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('slope_gradient', models.CharField(choices=[('%', '%')], max_length=120)),
                ('sample_weight_for_DNA_extraction', models.CharField(choices=[('g', 'g')], max_length=120)),
                ('microbial_biomass', models.CharField(choices=[('g/kg', 'g/kg')], max_length=120)),
                ('extreme_unusual_properties_Al_saturation', models.CharField(choices=[('%', '%')], max_length=120)),
                ('mean_annual_and_seasonal_temperature', models.CharField(choices=[('¬∫C', '¬∫C')], max_length=120)),
                ('mean_annual_and_seasonal_precipitation', models.CharField(choices=[('mm', 'mm')], max_length=120)),
                ('soil_texture_measurement', models.CharField(choices=[('% sand/silt/clay', '% sand/silt/clay')], max_length=120)),
                ('total_organic_carbon', models.CharField(choices=[('g/kg', 'g/kg')], max_length=120)),
                ('water_content', models.CharField(choices=[('cm3/cm3', 'cm3/cm3'), ('g/g', 'g/g')], max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_soil',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('slope_gradient', models.CharField(blank=True, help_text='commonly c', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('slope_aspect', models.CharField(blank=True, help_text='the direct', max_length=120)),
                ('profile_position', models.CharField(blank=True, choices=[('backslope', 'backslope'), ('footslope', 'footslope'), ('shoulder', 'shoulder'), ('summit', 'summit'), ('toeslope', 'toeslope')], help_text='cross-sect', max_length=120)),
                ('pooling_of_DNA_extracts_if_done', models.CharField(blank=True, help_text='were multi', max_length=120)),
                ('composite_design_sieving_if_any', models.CharField(blank=True, help_text='collection', max_length=120)),
                ('sample_weight_for_DNA_extraction', models.CharField(blank=True, help_text='weight (g)', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('storage_conditions_fresh_frozen_other', models.CharField(blank=True, help_text='explain ho', max_length=120)),
                ('microbial_biomass', models.CharField(blank=True, help_text='the part o', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('microbial_biomass_method', models.CharField(blank=True, help_text='reference ', max_length=120)),
                ('salinity_method', models.CharField(blank=True, help_text='reference ', max_length=120)),
                ('extreme_unusual_properties_heavy_metals', models.CharField(blank=True, help_text='heavy meta', max_length=120)),
                ('extreme_unusual_properties_heavy_metals_method', models.CharField(blank=True, help_text='reference ', max_length=120)),
                ('extreme_unusual_properties_Al_saturation', models.CharField(blank=True, help_text='aluminum s', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('extreme_unusual_properties_Al_saturation_method', models.CharField(blank=True, help_text='reference ', max_length=120)),
                ('link_to_climate_information', models.CharField(blank=True, help_text='link to cl', max_length=120)),
                ('link_to_classification_information', models.CharField(blank=True, help_text='link to di', max_length=120)),
                ('links_to_additional_analysis', models.CharField(blank=True, help_text='link to ad', max_length=120)),
                ('current_land_use', models.CharField(blank=True, help_text='present st', max_length=120)),
                ('current_vegetation', models.CharField(blank=True, help_text='vegetation', max_length=120)),
                ('current_vegetation_method', models.CharField(blank=True, help_text='reference ', max_length=120)),
                ('soil_horizon', models.CharField(blank=True, choices=[('A horizon', 'A horizon'), ('B horizon', 'B horizon'), ('C horizon', 'C horizon'), ('E horizon', 'E horizon'), ('O horizon', 'O horizon'), ('Permafrost', 'Permafrost'), ('R layer', 'R layer')], help_text='specific l', max_length=120)),
                ('soil_horizon_method', models.CharField(blank=True, help_text='reference ', max_length=120)),
                ('mean_annual_and_seasonal_temperature', models.CharField(blank=True, help_text='mean annua', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('mean_annual_and_seasonal_precipitation', models.CharField(blank=True, help_text='mean annua', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('soil_taxonomic_FAO_classification', models.CharField(blank=True, help_text='soil class', max_length=120)),
                ('soil_taxonomic_local_classification', models.CharField(blank=True, help_text='soil class', max_length=120)),
                ('soil_taxonomic_local_classification_method', models.CharField(blank=True, help_text='reference ', max_length=120)),
                ('soil_type', models.CharField(blank=True, choices=[('Acrisol', 'Acrisol'), ('Albeluvisol', 'Albeluvisol'), ('Alisol', 'Alisol'), ('Andosol', 'Andosol'), ('Anthrosol', 'Anthrosol'), ('Arenosol', 'Arenosol'), ('Calcisol', 'Calcisol'), ('Cambisol', 'Cambisol'), ('Chernozem', 'Chernozem'), ('Cryosol', 'Cryosol'), ('Durisol', 'Durisol'), ('Ferralsol', 'Ferralsol'), ('Fluvisol', 'Fluvisol'), ('Gleysol', 'Gleysol'), ('Gypsisol', 'Gypsisol'), ('Histosol', 'Histosol'), ('Kastanozem', 'Kastanozem'), ('Leptosol', 'Leptosol'), ('Lixisol', 'Lixisol'), ('Luvisol', 'Luvisol'), ('Nitisol', 'Nitisol'), ('Phaeozem', 'Phaeozem'), ('Planosol', 'Planosol'), ('Plinthosol', 'Plinthosol'), ('Podzol', 'Podzol'), ('Regosol', 'Regosol'), ('Solonchak', 'Solonchak'), ('Solonetz', 'Solonetz'), ('Stagnosol', 'Stagnosol'), ('Technosol', 'Technosol'), ('Umbrisol', 'Umbrisol'), ('Vertisol', 'Vertisol')], help_text='Descriptio', max_length=120)),
                ('soil_type_method', models.CharField(blank=True, help_text='reference ', max_length=120)),
                ('drainage_classification', models.CharField(blank=True, choices=[('excessively drained', 'excessively drained'), ('moderately well', 'moderately well'), ('poorly', 'poorly'), ('somewhat poorly', 'somewhat poorly'), ('very poorly', 'very poorly'), ('well', 'well')], help_text='drainage c', max_length=120)),
                ('soil_texture_measurement', models.CharField(blank=True, help_text='the relati', max_length=120)),
                ('soil_texture_method', models.CharField(blank=True, help_text='reference ', max_length=120)),
                ('pH_method', models.CharField(blank=True, help_text='reference ', max_length=120)),
                ('water_content_method', models.CharField(blank=True, help_text='reference ', max_length=120)),
                ('total_organic_C_method', models.CharField(blank=True, help_text='reference ', max_length=120)),
                ('total_nitrogen_method', models.CharField(blank=True, help_text='reference ', max_length=120)),
                ('total_organic_carbon', models.CharField(blank=True, help_text='Definition', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('water_content', models.CharField(blank=True, help_text='water cont', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('history_previous_land_use', models.CharField(blank=True, help_text='previous l', max_length=120)),
                ('history_previous_land_use_method', models.CharField(blank=True, help_text='reference ', max_length=120)),
                ('history_crop_rotation', models.CharField(blank=True, help_text='whether or', max_length=120)),
                ('history_agrochemical_additions', models.CharField(blank=True, help_text='addition o', max_length=120)),
                ('history_tillage', models.CharField(blank=True, choices=[('chisel', 'chisel'), ('cutting disc', 'cutting disc'), ('disc plough', 'disc plough'), ('drill', 'drill'), ('mouldboard', 'mouldboard'), ('ridge till', 'ridge till'), ('strip tillage', 'strip tillage'), ('tined', 'tined'), ('zonal tillage', 'zonal tillage')], help_text='note metho', max_length=120)),
                ('history_fire', models.CharField(blank=True, help_text='historical', max_length=120)),
                ('history_flooding', models.CharField(blank=True, help_text='historical', max_length=120)),
                ('history_extreme_events', models.CharField(blank=True, help_text='unusual ph', max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_sediment_unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('methane', models.CharField(choices=[('¬µM/L', '¬µM/L')], max_length=120)),
                ('total_carbon', models.CharField(choices=[('¬µg/L', '¬µg/L')], max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_sediment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('methane', models.CharField(blank=True, help_text='methane (g', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('total_carbon', models.CharField(blank=True, help_text='total carb', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_plant_associated_unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('host_dry_mass', models.CharField(choices=[('g', 'g'), ('kg', 'kg'), ('mg', 'mg')], max_length=120)),
                ('host_wet_mass', models.CharField(choices=[('g', 'g'), ('kg', 'kg'), ('mg', 'mg')], max_length=120)),
                ('host_length', models.CharField(choices=[('cm', 'cm'), ('m', 'm'), ('mm', 'mm')], max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_plant_associated',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('host_dry_mass', models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('plant_product', models.CharField(blank=True, help_text='substance ', max_length=120)),
                ('host_wet_mass', models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('host_common_name', models.CharField(blank=True, help_text='common nam', max_length=120)),
                ('host_taxid', models.CharField(blank=True, help_text='NCBI taxon', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')])),
                ('host_life_stage', models.CharField(blank=True, help_text='descriptio', max_length=120)),
                ('host_length', models.CharField(blank=True, help_text='the length', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('plant_body_site', models.CharField(blank=True, help_text='name of bo', max_length=120)),
                ('host_subspecific_genetic_lineage', models.CharField(blank=True, help_text='Informatio', max_length=120)),
                ('climate_environment', models.CharField(blank=True, help_text='treatment ', max_length=120)),
                ('gaseous_environment', models.CharField(blank=True, help_text='use of con', max_length=120)),
                ('seasonal_environment', models.CharField(blank=True, help_text='treatment ', max_length=120)),
                ('air_temperature_regimen', models.CharField(blank=True, help_text='informatio', max_length=120)),
                ('antibiotic_regimen', models.CharField(blank=True, help_text='informatio', max_length=120)),
                ('chemical_mutagen', models.CharField(blank=True, help_text='treatment ', max_length=120)),
                ('fertilizer_regimen', models.CharField(blank=True, help_text='informatio', max_length=120)),
                ('fungicide_regimen', models.CharField(blank=True, help_text='informatio', max_length=120)),
                ('gravity', models.CharField(blank=True, help_text='informatio', max_length=120)),
                ('growth_hormone_regimen', models.CharField(blank=True, help_text='informatio', max_length=120)),
                ('growth_media', models.CharField(blank=True, help_text='informatio', max_length=120)),
                ('herbicide_regimen', models.CharField(blank=True, help_text='informatio', max_length=120)),
                ('humidity_regimen', models.CharField(blank=True, help_text='informatio', max_length=120)),
                ('mineral_nutrient_regimen', models.CharField(blank=True, help_text='informatio', max_length=120)),
                ('non_mineral_nutrient_regimen', models.CharField(blank=True, help_text='informatio', max_length=120)),
                ('pesticide_regimen', models.CharField(blank=True, help_text='informatio', max_length=120)),
                ('pH_regimen', models.CharField(blank=True, help_text='informatio', max_length=120)),
                ('radiation_regimen', models.CharField(blank=True, help_text='informatio', max_length=120)),
                ('rainfall_regimen', models.CharField(blank=True, help_text='informatio', max_length=120)),
                ('salt_regimen', models.CharField(blank=True, help_text='informatio', max_length=120)),
                ('standing_water_regimen', models.CharField(blank=True, help_text='treatment ', max_length=120)),
                ('tissue_culture_growth_media', models.CharField(blank=True, help_text='descriptio', max_length=120)),
                ('watering_regimen', models.CharField(blank=True, help_text='informatio', max_length=120)),
                ('water_temperature_regimen', models.CharField(blank=True, help_text='informatio', max_length=120)),
                ('mechanical_damage', models.CharField(blank=True, help_text='informatio', max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_miscellaneous_natural_or_artificial_environment_unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('altitude', models.CharField(choices=[('m', 'm')], max_length=120)),
                ('elevation', models.CharField(choices=[('m', 'm')], max_length=120)),
                ('biomass', models.CharField(choices=[('g', 'g'), ('kg', 'kg'), ('t', 't')], max_length=120)),
                ('density', models.CharField(choices=[('g/m3', 'g/m3')], max_length=120)),
                ('water_current', models.CharField(choices=[('knot', 'knot'), ('m3/s', 'm3/s')], max_length=120)),
                ('pressure', models.CharField(choices=[('atm', 'atm'), ('bar', 'bar')], max_length=120)),
                ('ammonium', models.CharField(choices=[('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('bromide', models.CharField(choices=[('parts/million', 'parts/million'), ('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('calcium', models.CharField(choices=[('mg/L', 'mg/L'), ('parts/million', 'parts/million'), ('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('chloride', models.CharField(choices=[('mg/L', 'mg/L')], max_length=120)),
                ('chlorophyll', models.CharField(choices=[('mg/m3', 'mg/m3'), ('¬µg/L', '¬µg/L')], max_length=120)),
                ('diether_lipids', models.CharField(choices=[('ng/L', 'ng/L')], max_length=120)),
                ('dissolved_carbon_dioxide', models.CharField(choices=[('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('dissolved_hydrogen', models.CharField(choices=[('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('dissolved_inorganic_carbon', models.CharField(choices=[('¬µg/L', '¬µg/L')], max_length=120)),
                ('dissolved_organic_nitrogen', models.CharField(choices=[('mg/L', 'mg/L'), ('¬µg/L', '¬µg/L')], max_length=120)),
                ('dissolved_oxygen', models.CharField(choices=[('¬µmol/kg', '¬µmol/kg')], max_length=120)),
                ('nitrite', models.CharField(choices=[('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('nitrogen', models.CharField(choices=[('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('organic_carbon', models.CharField(choices=[('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('organic_matter', models.CharField(choices=[('¬µg/L', '¬µg/L')], max_length=120)),
                ('organic_nitrogen', models.CharField(choices=[('¬µg/L', '¬µg/L')], max_length=120)),
                ('phospholipid_fatty_acid', models.CharField(choices=[('mol/L', 'mol/L'), ('mol/g', 'mol/g')], max_length=120)),
                ('potassium', models.CharField(choices=[('parts/million', 'parts/million'), ('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('silicate', models.CharField(choices=[('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('sulfate', models.CharField(choices=[('mg/L', 'mg/L'), ('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('sulfide', models.CharField(choices=[('mg/L', 'mg/L'), ('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_miscellaneous_natural_or_artificial_environment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('altitude', models.CharField(blank=True, help_text='The altitu', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('elevation', models.CharField(blank=True, help_text='The elevat', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('biomass', models.CharField(blank=True, help_text='amount of ', max_length=120)),
                ('density', models.CharField(blank=True, help_text='density of', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('water_current', models.CharField(blank=True, help_text='measuremen', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('pressure', models.CharField(blank=True, help_text='pressure t', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('ammonium', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('bromide', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('calcium', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('chloride', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('chlorophyll', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('diether_lipids', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('dissolved_carbon_dioxide', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('dissolved_hydrogen', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('dissolved_inorganic_carbon', models.CharField(blank=True, help_text='dissolved ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('dissolved_organic_nitrogen', models.CharField(blank=True, help_text='dissolved ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('dissolved_oxygen', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('nitrite', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('nitrogen', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('organic_carbon', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('organic_matter', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('organic_nitrogen', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('phospholipid_fatty_acid', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('potassium', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('silicate', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('sulfate', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('sulfide', models.CharField(blank=True, help_text='concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_microbial_mat_biolfilm_unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('turbidity', models.CharField(choices=[('FTU', 'FTU'), ('NTU', 'NTU')], max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_microbial_mat_biolfilm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('turbidity', models.CharField(blank=True, help_text='turbidity ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_human_vaginal_unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_human_vaginal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('gynecological_disorder', models.CharField(blank=True, help_text='History of', max_length=120)),
                ('urogenital_disorder', models.CharField(blank=True, help_text='History of', max_length=120)),
                ('menarche', models.CharField(blank=True, help_text='date of mo', max_length=120)),
                ('sexual_activity', models.CharField(blank=True, help_text='current se', max_length=120)),
                ('pregnancy', models.CharField(blank=True, help_text='date due o', max_length=120)),
                ('douche', models.CharField(blank=True, help_text='date of mo', max_length=120)),
                ('birth_control', models.CharField(blank=True, help_text='specificat', max_length=120)),
                ('menopause', models.CharField(blank=True, help_text='date of on', max_length=120)),
                ('HRT', models.CharField(blank=True, help_text='whether su', max_length=120)),
                ('hysterectomy', models.CharField(blank=True, choices=[('No', 'No'), ('Yes', 'Yes')], help_text='specificat', max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_human_skin_unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('host_age', models.CharField(choices=[('centuries', 'centuries'), ('days', 'days'), ('decades', 'decades'), ('hours', 'hours'), ('minutes', 'minutes'), ('months', 'months'), ('seconds', 'seconds'), ('weeks', 'weeks'), ('years', 'years')], max_length=120)),
                ('host_height', models.CharField(choices=[('cm', 'cm'), ('m', 'm'), ('mm', 'mm')], max_length=120)),
                ('host_body_mass_index', models.CharField(choices=[('kg/m2', 'kg/m2')], max_length=120)),
                ('host_total_mass', models.CharField(choices=[('g', 'g'), ('kg', 'kg')], max_length=120)),
                ('host_body_temperature', models.CharField(choices=[('¬∫C', '¬∫C')], max_length=120)),
                ('time_since_last_wash', models.CharField(choices=[('hours', 'hours'), ('minutes', 'minutes')], max_length=120)),
                ('host_pulse', models.CharField(choices=[('bpm', 'bpm')], max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_human_skin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('host_body_product', models.CharField(blank=True, help_text='substance ', max_length=120)),
                ('medical_history_performed', models.CharField(blank=True, choices=[('No', 'No'), ('Yes', 'Yes')], help_text='whether fu', max_length=120)),
                ('dermatology_disorder', models.CharField(blank=True, help_text='History of', max_length=120)),
                ('host_subject_id', models.CharField(blank=True, help_text='a unique i', max_length=120)),
                ('IHMC_medication_code', models.CharField(blank=True, choices=[('01=1=Analgesics/NSAIDS', '01=1=Analgesics/NSAIDS'), ('02=2=Anesthetics', '02=2=Anesthetics'), ('03=3=Antacids/H2 antagonists', '03=3=Antacids/H2 antagonists'), ('04=4=Anti-acne', '04=4=Anti-acne'), ('05=5=Anti-asthma/bronchodilators', '05=5=Anti-asthma/bronchodilators'), ('06=6=Anti-cholesterol/Anti-hyperlipidemic', '06=6=Anti-cholesterol/Anti-hyperlipidemic'), ('07=7=Anti-coagulants', '07=7=Anti-coagulants'), ('08=8=Antibiotics/(anti)-infectives, parasitics, microbials', '08=8=Antibiotics/(anti)-infectives, parasitics, microbials'), ('09=9=Antidepressants/mood-altering drugs', '09=9=Antidepressants/mood-altering drugs'), ('10=10=Antihistamines/ Decongestants', '10=10=Antihistamines/ Decongestants'), ('11=11=Antihypertensives', '11=11=Antihypertensives'), ('12=12=Cardiovascular, other than hyperlipidemic/HTN', '12=12=Cardiovascular, other than hyperlipidemic/HTN'), ('13=13=Contraceptives (oral, implant, injectable)', '13=13=Contraceptives (oral, implant, injectable)'), ('14=14=Emergency/support medications', '14=14=Emergency/support medications'), ('15=15=Endocrine/Metabolic agents', '15=15=Endocrine/Metabolic agents'), ('16=16=GI meds (anti-diarrheal, emetic, spasmodics)', '16=16=GI meds (anti-diarrheal, emetic, spasmodics)'), ('17=17=Herbal/homeopathic products', '17=17=Herbal/homeopathic products'), ('18=18=Hormones/steroids', '18=18=Hormones/steroids'), ('19=19=OTC cold & flu', '19=19=OTC cold & flu'), ('20=20=Vaccine prophylaxis', '20=20=Vaccine prophylaxis'), ('21=21=Vitamins, minerals, food supplements', '21=21=Vitamins, minerals, food supplements'), ('99=99=Other', '99=99=Other')], help_text='can includ', max_length=120)),
                ('host_age', models.CharField(blank=True, help_text='age of hos', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('host_body_site', models.CharField(blank=True, help_text='name of bo', max_length=120)),
                ('host_height', models.CharField(blank=True, help_text='the height', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('host_body_mass_index', models.CharField(blank=True, help_text='body mass ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('ethnicity', models.CharField(blank=True, help_text='A category', max_length=120)),
                ('host_occupation', models.CharField(blank=True, choices=[('01=01 Accounting/Finance', '01=01 Accounting/Finance'), ('02=02 Advertising/Public Relations', '02=02 Advertising/Public Relations'), ('03=03 Arts/Entertainment/Publishing', '03=03 Arts/Entertainment/Publishing'), ('04=04 Automotive', '04=04 Automotive'), ('05=05 Banking/ Mortgage', '05=05 Banking/ Mortgage'), ('06=06 Biotech', '06=06 Biotech'), ('07=07 Broadcast/Journalism', '07=07 Broadcast/Journalism'), ('08=08 Business Development', '08=08 Business Development'), ('09=09 Clerical/Administrative', '09=09 Clerical/Administrative'), ('10=10 Construction/Trades', '10=10 Construction/Trades'), ('11=11 Consultant', '11=11 Consultant'), ('12=12 Customer Services', '12=12 Customer Services'), ('13=13 Design', '13=13 Design'), ('14=14 Education', '14=14 Education'), ('15=15 Engineering', '15=15 Engineering'), ('16=16 Entry Level', '16=16 Entry Level'), ('17=17 Executive', '17=17 Executive'), ('18=18 Food Service', '18=18 Food Service'), ('19=19 Government', '19=19 Government'), ('20=20 Grocery', '20=20 Grocery'), ('21=21 Healthcare', '21=21 Healthcare'), ('22=22 Hospitality', '22=22 Hospitality'), ('23=23 Human Resources', '23=23 Human Resources'), ('24=24 Information Technology', '24=24 Information Technology'), ('25=25 Insurance', '25=25 Insurance'), ('26=26 Law/Legal', '26=26 Law/Legal'), ('27=27 Management', '27=27 Management'), ('28=28 Manufacturing', '28=28 Manufacturing'), ('29=29 Marketing', '29=29 Marketing'), ('30=30 Pharmaceutical', '30=30 Pharmaceutical'), ('31=31 Professional Services', '31=31 Professional Services'), ('32=32 Purchasing', '32=32 Purchasing'), ('33=33 Quality Assurance (QA)', '33=33 Quality Assurance (QA)'), ('34=34 Research', '34=34 Research'), ('35=35 Restaurant', '35=35 Restaurant'), ('36=36 Retail', '36=36 Retail'), ('37=37 Sales', '37=37 Sales'), ('38=38 Science', '38=38 Science'), ('39=39 Security/Law Enforcement', '39=39 Security/Law Enforcement'), ('40=40 Shipping/Distribution', '40=40 Shipping/Distribution'), ('41=41 Strategy', '41=41 Strategy'), ('42=42 Student', '42=42 Student'), ('43=43 Telecommunications', '43=43 Telecommunications'), ('44=44 Training', '44=44 Training'), ('45=45 Transportation', '45=45 Transportation'), ('46=46 Warehouse', '46=46 Warehouse'), ('47=47 Other', '47=47 Other'), ('99=99 Unknown/Refused', '99=99 Unknown/Refused')], help_text='most frequ', max_length=120)),
                ('host_total_mass', models.CharField(blank=True, help_text='total mass', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('host_phenotype', models.CharField(blank=True, help_text='phenotype ', max_length=120)),
                ('host_body_temperature', models.CharField(blank=True, help_text='core body ', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('host_sex', models.CharField(blank=True, choices=[('female', 'female'), ('hermaphrodite', 'hermaphrodite'), ('male', 'male'), ('missing: control sample', 'missing: control sample'), ('missing: data agreement established pre-2023', 'missing: data agreement established pre-2023'), ('missing: endangered species', 'missing: endangered species'), ('missing: human-identifiable', 'missing: human-identifiable'), ('missing: lab stock', 'missing: lab stock'), ('missing: sample group', 'missing: sample group'), ('missing: synthetic construct', 'missing: synthetic construct'), ('missing: third party data', 'missing: third party data'), ('neuter', 'neuter'), ('not applicable', 'not applicable'), ('not collected', 'not collected'), ('not provided', 'not provided'), ('other', 'other'), ('restricted access', 'restricted access')], help_text='Gender or ', max_length=120)),
                ('time_since_last_wash', models.CharField(blank=True, help_text='specificat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('dominant_hand', models.CharField(blank=True, choices=[('ambidextrous', 'ambidextrous'), ('left', 'left'), ('right', 'right')], help_text='dominant h', max_length=120)),
                ('host_diet', models.CharField(blank=True, help_text='type of di', max_length=120)),
                ('host_last_meal', models.CharField(blank=True, help_text='content of', max_length=120)),
                ('host_family_relationship', models.CharField(blank=True, help_text='relationsh', max_length=120)),
                ('host_genotype', models.CharField(blank=True, help_text='observed g', max_length=120)),
                ('host_pulse', models.CharField(blank=True, help_text='resting pu', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')])),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_human_oral_unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('time_since_last_toothbrushing', models.CharField(choices=[('hours', 'hours'), ('minutes', 'minutes')], max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_human_oral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('nose_mouth_teeth_throat_disorder', models.CharField(blank=True, help_text='History of', max_length=120)),
                ('time_since_last_toothbrushing', models.CharField(blank=True, help_text='specificat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_human_gut_unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_human_gut',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('gastrointestinal_tract_disorder', models.CharField(blank=True, help_text='History of', max_length=120)),
                ('liver_disorder', models.CharField(blank=True, help_text='History of', max_length=120)),
                ('special_diet', models.CharField(blank=True, help_text='specificat', max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_human_associated_unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('weight_loss_in_last_three_months', models.CharField(choices=[('g', 'g'), ('kg', 'kg')], max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_human_associated',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('study_completion_status', models.CharField(blank=True, choices=[('No - adverse event', 'No - adverse event'), ('No - lost to follow up', 'No - lost to follow up'), ('No - non-compliance', 'No - non-compliance'), ('No - other', 'No - other'), ('Yes', 'Yes')], help_text='specificat', max_length=120)),
                ('urine_collection_method', models.CharField(blank=True, choices=[('catheter', 'catheter'), ('clean catch', 'clean catch')], help_text='specificat', max_length=120)),
                ('host_HIV_status', models.CharField(blank=True, choices=[('No', 'No'), ('Yes', 'Yes')], help_text='HIV status', max_length=120)),
                ('lung_pulmonary_disorder', models.CharField(blank=True, help_text='History of', max_length=120)),
                ('lung_nose_throat_disorder', models.CharField(blank=True, help_text='History of', max_length=120)),
                ('blood_blood_disorder', models.CharField(blank=True, help_text='History of', max_length=120)),
                ('urine_kidney_disorder', models.CharField(blank=True, help_text='History of', max_length=120)),
                ('urine_urogenital_tract_disorder', models.CharField(blank=True, help_text='History of', max_length=120)),
                ('drug_usage', models.CharField(blank=True, help_text='any drug u', max_length=120)),
                ('presence_of_pets_or_farm_animals', models.CharField(blank=True, help_text='specificat', max_length=120)),
                ('smoker', models.CharField(blank=True, choices=[('ex-smoker', 'ex-smoker'), ('non-smoker', 'non-smoker'), ('smoker', 'smoker')], help_text='specificat', max_length=120)),
                ('major_diet_change_in_last_six_months', models.CharField(blank=True, help_text='specificat', max_length=120)),
                ('weight_loss_in_last_three_months', models.CharField(blank=True, help_text='specificat', max_length=120)),
                ('travel_outside_the_country_in_last_six_months', models.CharField(blank=True, help_text='specificat', max_length=120)),
                ('twin_sibling_presence', models.CharField(blank=True, help_text='specificat', max_length=120)),
                ('amniotic_fluid_gestation_state', models.CharField(blank=True, help_text='specificat', max_length=120)),
                ('amniotic_fluid_maternal_health_status', models.CharField(blank=True, help_text='specificat', max_length=120)),
                ('amniotic_fluid_foetal_health_status', models.CharField(blank=True, help_text='specificat', max_length=120)),
                ('amniotic_fluid_color', models.CharField(blank=True, help_text='specificat', max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_host_associated_unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('host_blood_pressure_diastolic', models.CharField(choices=[('mm Hg', 'mm Hg')], max_length=120)),
                ('host_blood_pressure_systolic', models.CharField(choices=[('mm Hg', 'mm Hg')], max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_host_associated',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('host_body_habitat', models.CharField(blank=True, help_text='original b', max_length=120)),
                ('host_growth_conditions', models.CharField(blank=True, help_text='literature', max_length=120)),
                ('host_substrate', models.CharField(blank=True, help_text='the growth', max_length=120)),
                ('host_color', models.CharField(blank=True, help_text='the color ', max_length=120)),
                ('host_shape', models.CharField(blank=True, help_text='morphologi', max_length=120)),
                ('host_blood_pressure_diastolic', models.CharField(blank=True, help_text='resting di', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('host_blood_pressure_systolic', models.CharField(blank=True, help_text='resting sy', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('gravidity', models.CharField(blank=True, help_text='Whether or', max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_air_unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('ventilation_rate', models.CharField(choices=[('L/sec', 'L/sec'), ('m3/min', 'm3/min')], max_length=120)),
                ('barometric_pressure', models.CharField(choices=[('Torr', 'Torr'), ('in. Hg', 'in. Hg'), ('millibar(hPa)', 'millibar(hPa)'), ('mm Hg', 'mm Hg')], max_length=120)),
                ('humidity', models.CharField(choices=[('%', '%'), ('g/m3', 'g/m3')], max_length=120)),
                ('pollutants', models.CharField(choices=[('M/L', 'M/L'), ('g', 'g'), ('mg/L', 'mg/L')], max_length=120)),
                ('solar_irradiance', models.CharField(choices=[('W/m2', 'W/m2')], max_length=120)),
                ('wind_speed', models.CharField(choices=[('km/h', 'km/h'), ('m/s', 'm/s')], max_length=120)),
                ('carbon_dioxide', models.CharField(choices=[('¬µmol/L', '¬µmol/L')], max_length=120)),
                ('carbon_monoxide', models.CharField(choices=[('¬µM/L', '¬µM/L')], max_length=120)),
                ('oxygen', models.CharField(choices=[('mg/L', 'mg/L'), ('parts/million', 'parts/million')], max_length=120)),
                ('air_particulate_matter_concentration', models.CharField(choices=[('¬µg/m3', '¬µg/m3')], max_length=120)),
                ('volatile_organic_compounds', models.CharField(choices=[('parts/million', 'parts/million'), ('¬µg/m3', '¬µg/m3')], max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIxS_air',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('ventilation_rate', models.CharField(blank=True, help_text='ventilatio', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('ventilation_type', models.CharField(blank=True, choices=[('forced ventilation', 'forced ventilation'), ('mechanical ventilation', 'mechanical ventilation'), ('natural ventilation', 'natural ventilation')], help_text='The intent', max_length=120)),
                ('barometric_pressure', models.CharField(blank=True, help_text='force per ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('humidity', models.CharField(blank=True, help_text='amount of ', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('pollutants', models.CharField(blank=True, help_text='pollutant ', max_length=120)),
                ('solar_irradiance', models.CharField(blank=True, help_text='the amount', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('wind_direction', models.CharField(blank=True, help_text='wind direc', max_length=120)),
                ('wind_speed', models.CharField(blank=True, help_text='speed of w', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('carbon_dioxide', models.CharField(blank=True, help_text='carbon dio', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('carbon_monoxide', models.CharField(blank=True, help_text='carbon mon', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('oxygen', models.CharField(blank=True, help_text='oxygen (ga', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('air_particulate_matter_concentration', models.CharField(blank=True, help_text='Concentrat', max_length=120, validators=[django.core.validators.RegexValidator('(0|((0\\.)|([1-9][0-9]*\\.?))[0-9]*)([Ee][+-]?[0-9]+)?')])),
                ('volatile_organic_compounds', models.CharField(blank=True, help_text='concentrat', max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIMAGS_unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSC_MIMAGS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('feature_prediction', models.CharField(blank=True, help_text='Method use', max_length=120)),
                ('similarity_search_method', models.CharField(blank=True, help_text='Tool used ', max_length=120)),
                ('reference_databases', models.CharField(blank=True, help_text='List of da', max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ENA_default_sample_checklist_unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ENA_default_sample_checklist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('cell_type', models.CharField(blank=True, help_text='cell type ', max_length=120)),
                ('dev_stage', models.CharField(blank=True, help_text='if the sam', max_length=120)),
                ('germline', models.CharField(blank=True, help_text='the sample', max_length=120)),
                ('tissue_lib', models.CharField(blank=True, help_text='tissue lib', max_length=120)),
                ('tissue_type', models.CharField(blank=True, help_text='tissue typ', max_length=120)),
                ('isolation_source', models.CharField(blank=True, help_text='describes ', max_length=120)),
                ('lat_lon', models.CharField(blank=True, help_text='geographic', max_length=120)),
                ('collected_by', models.CharField(blank=True, help_text='name of pe', max_length=120)),
                ('identified_by', models.CharField(blank=True, help_text='name of th', max_length=120)),
                ('environmental_sample', models.CharField(blank=True, choices=[('No', 'No'), ('Yes', 'Yes')], help_text='identifies', max_length=120)),
                ('mating_type', models.CharField(blank=True, help_text='mating typ', max_length=120)),
                ('sex', models.CharField(blank=True, help_text='sex of the', max_length=120)),
                ('lab_host', models.CharField(blank=True, help_text='scientific', max_length=120)),
                ('bio_material', models.CharField(blank=True, help_text='Unique ide', max_length=120)),
                ('culture_collection', models.CharField(blank=True, help_text='Unique ide', max_length=120)),
                ('specimen_voucher', models.CharField(blank=True, help_text='Unique ide', max_length=120)),
                ('cultivar', models.CharField(blank=True, help_text='cultivar (', max_length=120)),
                ('ecotype', models.CharField(blank=True, help_text='a populati', max_length=120)),
                ('isolate', models.CharField(blank=True, help_text='individual', max_length=120)),
                ('sub_species', models.CharField(blank=True, help_text='name of su', max_length=120)),
                ('variety', models.CharField(blank=True, help_text='variety (=', max_length=120)),
                ('sub_strain', models.CharField(blank=True, help_text='name or id', max_length=120)),
                ('cell_line', models.CharField(blank=True, help_text='cell line ', max_length=120)),
                ('serotype', models.CharField(blank=True, help_text='serologica', max_length=120)),
                ('serovar', models.CharField(blank=True, help_text='serologica', max_length=120)),
                ('strain', models.CharField(blank=True, help_text='Name of th', max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ENA_binned_metagenome_unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('completeness_score', models.CharField(choices=[('%', '%')], max_length=120)),
                ('contamination_score', models.CharField(choices=[('%', '%')], max_length=120)),
                ('reassembly_post_binning', models.CharField(choices=[('No', 'No'), ('Yes', 'Yes')], max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ENA_binned_metagenome',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_type', models.IntegerField(default=1)),
                ('metagenomic_source', models.CharField(help_text='The metage', max_length=120)),
                ('sample_derived_from', models.CharField(help_text='Reference ', max_length=120, validators=[django.core.validators.RegexValidator('(^[ESD]R[SR]\\d{6,}(,[ESD]R[SR]\\d{6,})*$)|(^SAM[END][AG]?\\d+(,SAM[END][AG]?\\d+)*$)|(^EGA[NR]\\d{11}(,EGA[NR]\\d{11})*$)|(^[ESD]R[SR]\\d{6,}-[ESD]R[SR]\\d{6,}$)|(^SAM[END][AG]?\\d+-SAM[END][AG]?\\d+$)|(^EGA[NR]\\d{11}-EGA[NR]\\d{11}$)')])),
                ('number_of_standard_tRNAs_extracted', models.CharField(blank=True, help_text='The total ', max_length=120, validators=[django.core.validators.RegexValidator('[+-]?[0-9]+')])),
                ('sixteen_s_recovered', models.CharField(blank=True, choices=[('No', 'No'), ('Yes', 'Yes')], help_text='Can a 16S ', max_length=120)),
                ('sixteen_s_recovery_software', models.CharField(blank=True, help_text='Tools used', max_length=120)),
                ('tRNA_extraction_software', models.CharField(blank=True, help_text='Tools used', max_length=120)),
                ('completeness_score', models.CharField(help_text='Completene', max_length=120, validators=[django.core.validators.RegexValidator('^(\\d|[1-9]\\d|\\d\\.\\d{1,2}|[1-9]\\d\\.\\d{1,2}|100)$')])),
                ('completeness_software', models.CharField(help_text='Tools used', max_length=120)),
                ('completeness_approach', models.CharField(blank=True, help_text='The approa', max_length=120)),
                ('contamination_score', models.CharField(help_text='The contam', max_length=120, validators=[django.core.validators.RegexValidator('^(\\d|[1-9]\\d|\\d\\.\\d{1,2}|[1-9]\\d\\.\\d{1,2}|100)$')])),
                ('contamination_screening_input', models.CharField(blank=True, choices=[('contigs', 'contigs'), ('reads', 'reads')], help_text='The type o', max_length=120)),
                ('contamination_screening_parameters', models.CharField(blank=True, help_text='Specific p', max_length=120)),
                ('decontamination_software', models.CharField(blank=True, help_text='Tool(s) us', max_length=120)),
                ('binning_software', models.CharField(help_text='Tool(s) us', max_length=120)),
                ('reassembly_post_binning', models.CharField(blank=True, choices=[('No', 'No'), ('Yes', 'Yes')], help_text='Has an ass', max_length=120)),
                ('MAG_coverage_software', models.CharField(blank=True, help_text='Tool(s) us', max_length=120)),
                ('assembly_quality', models.CharField(choices=[('Many fragments with little to no review of assembly other than reporting of standard assembly statistics', 'Many fragments with little to no review of assembly other than reporting of standard assembly statistics'), ('Multiple fragments where gaps span repetitive regions. Presence of the 23S, 16S, and 5S rRNA genes and at least 18 tRNAs', 'Multiple fragments where gaps span repetitive regions. Presence of the 23S, 16S, and 5S rRNA genes and at least 18 tRNAs'), ('Single contiguous sequence without gaps or ambiguities with a consensus error rate equivalent to Q50 or better', 'Single contiguous sequence without gaps or ambiguities with a consensus error rate equivalent to Q50 or better')], help_text='The assemb', max_length=120)),
                ('investigation_type', models.CharField(blank=True, choices=[('bacteria_archaea', 'bacteria_archaea'), ('eukaryote', 'eukaryote'), ('metagenome', 'metagenome'), ('metagenome-assembled genome', 'metagenome-assembled genome'), ('metatranscriptome', 'metatranscriptome'), ('mimarks-specimen', 'mimarks-specimen'), ('mimarks-survey', 'mimarks-survey'), ('organelle', 'organelle'), ('plasmid', 'plasmid'), ('single amplified genome', 'single amplified genome'), ('uncultivated viral genomes', 'uncultivated viral genomes'), ('virus', 'virus')], help_text='Nucleic Ac', max_length=120)),
                ('binning_parameters', models.CharField(help_text='The parame', max_length=120)),
                ('taxonomic_identity_marker', models.CharField(help_text='The phylog', max_length=120)),
                ('size_fraction_selected', models.CharField(blank=True, help_text='Filtering ', max_length=120)),
                ('taxonomic_classification', models.CharField(blank=True, help_text='Method use', max_length=120)),
                ('assembly_software', models.CharField(help_text='Tool(s) us', max_length=120)),
                ('sample', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sample')),
                ('sampleset', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='app.sampleset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_object_xml', models.TextField(blank=True, null=True)),
                ('sampleSubmission_object_xml', models.TextField(blank=True, null=True)),
                ('receipt_xml', models.TextField(blank=True, null=True)),
                ('accession_status', models.CharField(blank=True, max_length=100, null=True)),
                ('samples', models.ManyToManyField(to='app.sample')),
            ],
        ),
        migrations.CreateModel(
            name='StatusNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('note_type', models.CharField(choices=[('internal', 'Internal Note'), ('user_visible', 'User Visible Note'), ('status_change', 'Status Change'), ('rejection', 'Rejection Note')], default='internal', max_length=20)),
                ('content', models.TextField(help_text='Note content or status change description')),
                ('old_status', models.CharField(blank=True, help_text='Previous status (for status changes)', max_length=30)),
                ('new_status', models.CharField(blank=True, help_text='New status (for status changes)', max_length=30)),
                ('is_rejection', models.BooleanField(default=False, help_text='Whether this note represents a rejection')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='app.order')),
                ('user', models.ForeignKey(help_text='User who created this note', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SubMGRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, max_length=100, null=True)),
                ('yaml', models.CharField(blank=True, max_length=100, null=True)),
                ('assemblys', models.ManyToManyField(to='app.assembly')),
                ('bins', models.ManyToManyField(to='app.bin')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.order')),
                ('projects', models.ManyToManyField(to='app.project')),
                ('reads', models.ManyToManyField(to='app.read')),
                ('samples', models.ManyToManyField(to='app.sample')),
            ],
        ),
        migrations.CreateModel(
            name='SubMGRunInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(blank=True, max_length=100, null=True)),
                ('run_folder', models.CharField(blank=True, max_length=100, null=True)),
                ('subMGRun', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.submgrun')),
            ],
        ),
    ]
